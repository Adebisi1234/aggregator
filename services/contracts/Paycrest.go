// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPaycrestOrder is an auto generated low-level Go binding around an user-defined struct.
type IPaycrestOrder struct {
	Seller             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	ProtocolFee        *big.Int
	Rate               *big.Int
	IsFulfilled        bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// SharedStructsInstitution is an auto generated low-level Go binding around an user-defined struct.
type SharedStructsInstitution struct {
	Code [32]byte
	Name [32]byte
}

// SharedStructsInstitutionByCode is an auto generated low-level Go binding around an user-defined struct.
type SharedStructsInstitutionByCode struct {
	Name     [32]byte
	Currency [32]byte
}

// PaycrestMetaData contains all meta data concerning the Paycrest contract.
var PaycrestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionByCode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structSharedStructs.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b50620000216200002760201b60201c565b620001c6565b5f60019054906101000a900460ff161562000079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000070906200016e565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff1614620000e85760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000df9190620001ab565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f62000156602783620000ea565b91506200016382620000fa565b604082019050919050565b5f6020820190508181035f830152620001878162000148565b9050919050565b5f60ff82169050919050565b620001a5816200018e565b82525050565b5f602082019050620001c05f8301846200019a565b92915050565b613ddd80620001d45f395ff3fe608060405234801561000f575f80fd5b5060043610610135575f3560e01c80638129fc1c116100b657806399e3c0b41161007a57806399e3c0b414610300578063b810c6361461031c578063c22801031461033b578063cb79455b1461036b578063d28a8d3214610387578063f2fde38b146103b757610135565b80638129fc1c146102815780638456cb591461028b57806384630736146102955780638da5cb5b146102b15780639015dced146102cf57610135565b80635c975abb116100fd5780635c975abb146101dd578063715018a6146101fb57806375151b6314610205578063768c6ec01461023557806379a0effb1461026557610135565b806302621338146101395780632654ec7e1461016957806332200882146101995780633ad59dbc146101b55780633f4ba83a146101d3575b5f80fd5b610153600480360381019061014e919061249c565b6103d3565b60405161016091906125ab565b60405180910390f35b610183600480360381019061017e91906126fa565b610507565b60405161019091906127ee565b60405180910390f35b6101b360048036038101906101ae91906129a0565b610a08565b005b6101bd610b0e565b6040516101ca9190612a74565b60405180910390f35b6101db610b9e565b005b6101e5610bb0565b6040516101f29190612aae565b60405180910390f35b610203610bc5565b005b61021f600480360381019061021a9190612ac7565b610bd8565b60405161022c9190612aae565b60405180910390f35b61024f600480360381019061024a919061249c565b610c2a565b60405161025c9190612bf8565b60405180910390f35b61027f600480360381019061027a9190612c12565b610e5d565b005b610289611001565b005b61029361114b565b005b6102af60048036038101906102aa9190612c8d565b61115d565b005b6102b96111c7565b6040516102c69190612cc7565b60405180910390f35b6102e960048036038101906102e49190612ce0565b6111ef565b6040516102f7929190612d57565b60405180910390f35b61031a60048036038101906103159190612da8565b6115e4565b005b610324611716565b604051610332929190612e16565b60405180910390f35b6103556004803603810190610350919061249c565b611739565b6040516103629190612e6a565b60405180910390f35b61038560048036038101906103809190612ed8565b611777565b005b6103a1600480360381019061039c9190612f23565b6117ce565b6040516103ae9190612aae565b60405180910390f35b6103d160048036038101906103cc9190612ac7565b611b4c565b005b60605f609c5f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610449578382905f5260205f2090600202016040518060400160405290815f820154815260200160018201548152505081526020019060010190610406565b5050505090505f815190505f8167ffffffffffffffff81111561046f5761046e612817565b5b6040519080825280602002602001820160405280156104a857816020015b61049561235d565b81526020019060019003908161048d5790505b5090505f5b828110156104fb578381815181106104c8576104c7612f73565b5b60200260200101518282815181106104e3576104e2612f73565b5b602002602001018190525080806001019150506104ad565b50809350505050919050565b5f610510611bce565b61051e8b8b8689898e611c18565b5f8383905011610563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055a90612ffa565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330888e61058d9190613045565b6040518463ffffffff1660e01b81526004016105ab93929190613078565b6020604051808303815f875af11580156105c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105eb91906130c1565b5060d15f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190610639906130ec565b91905055503360d15f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460405160200161068e929190613133565b6040516020818303038152906040528051906020012090505f60655460665f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168c6106d5919061315a565b6106df91906131c8565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001828152602001896bffffffffffffffffffffffff1681526020015f151581526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff168152602001828d6107b191906131f8565b81525060d05f8481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060c082015181600501600c6101000a81548160ff02191690831515021790555060e0820151816006015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600701559050508160d05f8481526020019081526020015f20600701548d73ffffffffffffffffffffffffffffffffffffffff167f94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919848c8f8f8b8b6040516109f19695949392919061329e565b60405180910390a4509a9950505050505050505050565b610a10611e27565b5f815190505f5b81811015610b0857609c5f8581526020019081526020015f20838281518110610a4357610a42612f73565b5b6020026020010151908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001015550506040518060400160405280848381518110610aa357610aa2612f73565b5b602002602001015160200151815260200185815250609d5f858481518110610ace57610acd612f73565b5b60200260200101515f015181526020019081526020015f205f820151815f0155602082015181600101559050508080600101915050610a17565b50505050565b606060688054610b1d90613325565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4990613325565b8015610b945780601f10610b6b57610100808354040283529160200191610b94565b820191905f5260205f20905b815481529060010190602001808311610b7757829003601f168201915b5050505050905090565b610ba6611e27565b610bae611ea5565b565b5f609e5f9054906101000a900460ff16905090565b610bcd611e27565b610bd65f611f06565b565b5f609b5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b610c3261237b565b60d05f8381526020019081526020015f20604051806101400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160058201600c9054906101000a900460ff16151515158152602001600682015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016007820154815250509050919050565b610e65611e27565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eca9061339f565b60405180910390fd5b7f74726561737572790000000000000000000000000000000000000000000000008203610f3c5780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f72000000000000000000000000000000000000000000008203610fa4578060675f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ff59190612cc7565b60405180910390a15050565b5f8060019054906101000a900460ff16159050808015611030575060015f8054906101000a900460ff1660ff16105b8061105c575061103f30611fc9565b15801561105b575060015f8054906101000a900460ff1660ff16145b5b61109b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110929061342d565b60405180910390fd5b60015f806101000a81548160ff021916908360ff16021790555080156110d65760015f60016101000a81548160ff0219169083151502179055505b620186a06065819055506110e8611feb565b6110f0612043565b8015611148575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161113f9190613490565b60405180910390a15b50565b611153611e27565b61115b61209b565b565b611165611e27565b8060665f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516111bc91906134a9565b60405180910390a150565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f8060675f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611280576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112779061350c565b60405180910390fd5b60d05f8781526020019081526020015f20600501600c9054906101000a900460ff16156112e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d990613574565b60405180910390fd5b5f60d05f8881526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508367ffffffffffffffff1660d05f8981526020019081526020015f2060060160148282829054906101000a90046bffffffffffffffffffffffff1661135e9190613592565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f60d05f8981526020019081526020015f2060060160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361142157600160d05f8981526020019081526020015f20600501600c6101000a81548160ff0219169083151502179055505f60d05f8981526020019081526020015f206003015411156114205761141f876120fd565b5b5b5f60d05f8981526020019081526020015f206004015411156114f0578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660d05f8b81526020019081526020015f20600401546040518363ffffffff1660e01b81526004016114ae929190613133565b6020604051808303815f875af11580156114ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114ee91906130c1565b505b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660d05f8b81526020019081526020015f20600701546040518363ffffffff1660e01b815260040161153f929190613133565b6020604051808303815f875af115801561155b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061157f91906130c1565b508473ffffffffffffffffffffffffffffffffffffffff16877fa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c28a89886040516115cb93929190613601565b60405180910390a3868192509250509550959350505050565b6115ec611e27565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361165a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116519061339f565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036116d65780609b5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161170993929190613636565b60405180910390a1505050565b5f8060665f9054906101000a900467ffffffffffffffff16606554915091509091565b61174161243a565b609d5f8381526020019081526020015f206040518060400160405290815f82015481526020016001820154815250509050919050565b61177f611e27565b818160689182611790929190613809565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef82826040516117c2929190613902565b60405180910390a15050565b5f60675f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461185e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118559061350c565b60405180910390fd5b60d05f8481526020019081526020015f20600501600c9054906101000a900460ff16156118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790613574565b60405180910390fd5b5f8460d05f8681526020019081526020015f20600701546118e191906131f8565b905060d05f8581526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b8152600401611973929190613133565b6020604051808303815f875af115801561198f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119b391906130c1565b50600160d05f8681526020019081526020015f20600501600c6101000a81548160ff0219169083151502179055505f60d05f8681526020019081526020015f2060060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060d05f8581526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60d05f8781526020019081526020015f206006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611ac5929190613133565b6020604051808303815f875af1158015611ae1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b0591906130c1565b50837f79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f8685604051611b38929190613924565b60405180910390a260019150509392505050565b611b54611e27565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb9906139bb565b60405180910390fd5b611bcb81611f06565b50565b611bd6610bb0565b15611c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d90613a23565b60405180910390fd5b565b609b5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9890613a8b565b60405180910390fd5b5f8511611ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cda90613af3565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4890613b5b565b60405180910390fd5b5f801b609d5f8381526020019081526020015f205f015403611da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9f90613bc3565b60405180910390fd5b5f821115611e1f575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1590613c2b565b60405180910390fd5b5b505050505050565b611e2f612244565b73ffffffffffffffffffffffffffffffffffffffff16611e4d6111c7565b73ffffffffffffffffffffffffffffffffffffffff1614611ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9a90613c93565b60405180910390fd5b565b611ead61224b565b5f609e5f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611eef612244565b604051611efc9190612cc7565b60405180910390a1565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16612039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203090613d21565b60405180910390fd5b612041612294565b565b5f60019054906101000a900460ff16612091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208890613d21565b60405180910390fd5b6120996122f4565b565b6120a3611bce565b6001609e5f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120e6612244565b6040516120f39190612cc7565b60405180910390a1565b5f60d05f8381526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60d05f8481526020019081526020015f2060030154905060d05f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016121ba929190613133565b6020604051808303815f875af11580156121d6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121fa91906130c1565b50808273ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a3505050565b5f33905090565b612253610bb0565b612292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228990613d89565b60405180910390fd5b565b5f60019054906101000a900460ff166122e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d990613d21565b60405180910390fd5b6122f26122ed612244565b611f06565b565b5f60019054906101000a900460ff16612342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233990613d21565b60405180910390fd5b5f609e5f6101000a81548160ff021916908315150217905550565b60405180604001604052805f80191681526020015f80191681525090565b6040518061014001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f6bffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180604001604052805f80191681526020015f80191681525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61247b81612469565b8114612485575f80fd5b50565b5f8135905061249681612472565b92915050565b5f602082840312156124b1576124b0612461565b5b5f6124be84828501612488565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6124f981612469565b82525050565b604082015f8201516125135f8501826124f0565b50602082015161252660208501826124f0565b50505050565b5f61253783836124ff565b60408301905092915050565b5f602082019050919050565b5f612559826124c7565b61256381856124d1565b935061256e836124e1565b805f5b8381101561259e578151612585888261252c565b975061259083612543565b925050600181019050612571565b5085935050505092915050565b5f6020820190508181035f8301526125c3818461254f565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6125f4826125cb565b9050919050565b612604816125ea565b811461260e575f80fd5b50565b5f8135905061261f816125fb565b92915050565b5f819050919050565b61263781612625565b8114612641575f80fd5b50565b5f813590506126528161262e565b92915050565b5f6bffffffffffffffffffffffff82169050919050565b61267881612658565b8114612682575f80fd5b50565b5f813590506126938161266f565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126126ba576126b9612699565b5b8235905067ffffffffffffffff8111156126d7576126d661269d565b5b6020830191508360018202830111156126f3576126f26126a1565b5b9250929050565b5f805f805f805f805f806101208b8d03121561271957612718612461565b5b5f6127268d828e01612611565b9a505060206127378d828e01612644565b99505060406127488d828e01612488565b98505060606127598d828e01612488565b975050608061276a8d828e01612685565b96505060a061277b8d828e01612611565b95505060c061278c8d828e01612644565b94505060e061279d8d828e01612611565b9350506101008b013567ffffffffffffffff8111156127bf576127be612465565b5b6127cb8d828e016126a5565b92509250509295989b9194979a5092959850565b6127e881612469565b82525050565b5f6020820190506128015f8301846127df565b92915050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61284d82612807565b810181811067ffffffffffffffff8211171561286c5761286b612817565b5b80604052505050565b5f61287e612458565b905061288a8282612844565b919050565b5f67ffffffffffffffff8211156128a9576128a8612817565b5b602082029050602081019050919050565b5f80fd5b5f604082840312156128d3576128d26128ba565b5b6128dd6040612875565b90505f6128ec84828501612488565b5f8301525060206128ff84828501612488565b60208301525092915050565b5f61291d6129188461288f565b612875565b905080838252602082019050604084028301858111156129405761293f6126a1565b5b835b81811015612969578061295588826128be565b845260208401935050604081019050612942565b5050509392505050565b5f82601f83011261298757612986612699565b5b813561299784826020860161290b565b91505092915050565b5f80604083850312156129b6576129b5612461565b5b5f6129c385828601612488565b925050602083013567ffffffffffffffff8111156129e4576129e3612465565b5b6129f085828601612973565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612a31578082015181840152602081019050612a16565b5f8484015250505050565b5f612a46826129fa565b612a508185612a04565b9350612a60818560208601612a14565b612a6981612807565b840191505092915050565b5f6020820190508181035f830152612a8c8184612a3c565b905092915050565b5f8115159050919050565b612aa881612a94565b82525050565b5f602082019050612ac15f830184612a9f565b92915050565b5f60208284031215612adc57612adb612461565b5b5f612ae984828501612611565b91505092915050565b612afb816125ea565b82525050565b612b0a81612625565b82525050565b612b1981612658565b82525050565b612b2881612a94565b82525050565b61014082015f820151612b435f850182612af2565b506020820151612b566020850182612af2565b506040820151612b696040850182612af2565b506060820151612b7c6060850182612b01565b506080820151612b8f6080850182612b01565b5060a0820151612ba260a0850182612b10565b5060c0820151612bb560c0850182612b1f565b5060e0820151612bc860e0850182612af2565b50610100820151612bdd610100850182612b10565b50610120820151612bf2610120850182612b01565b50505050565b5f61014082019050612c0c5f830184612b2e565b92915050565b5f8060408385031215612c2857612c27612461565b5b5f612c3585828601612488565b9250506020612c4685828601612611565b9150509250929050565b5f67ffffffffffffffff82169050919050565b612c6c81612c50565b8114612c76575f80fd5b50565b5f81359050612c8781612c63565b92915050565b5f60208284031215612ca257612ca1612461565b5b5f612caf84828501612c79565b91505092915050565b612cc1816125ea565b82525050565b5f602082019050612cda5f830184612cb8565b92915050565b5f805f805f60a08688031215612cf957612cf8612461565b5b5f612d0688828901612488565b9550506020612d1788828901612488565b9450506040612d2888828901612488565b9350506060612d3988828901612611565b9250506080612d4a88828901612c79565b9150509295509295909350565b5f604082019050612d6a5f8301856127df565b612d776020830184612cb8565b9392505050565b612d8781612a94565b8114612d91575f80fd5b50565b5f81359050612da281612d7e565b92915050565b5f805f60608486031215612dbf57612dbe612461565b5b5f612dcc86828701612488565b9350506020612ddd86828701612611565b9250506040612dee86828701612d94565b9150509250925092565b612e0181612c50565b82525050565b612e1081612625565b82525050565b5f604082019050612e295f830185612df8565b612e366020830184612e07565b9392505050565b604082015f820151612e515f8501826124f0565b506020820151612e6460208501826124f0565b50505050565b5f604082019050612e7d5f830184612e3d565b92915050565b5f8083601f840112612e9857612e97612699565b5b8235905067ffffffffffffffff811115612eb557612eb461269d565b5b602083019150836001820283011115612ed157612ed06126a1565b5b9250929050565b5f8060208385031215612eee57612eed612461565b5b5f83013567ffffffffffffffff811115612f0b57612f0a612465565b5b612f1785828601612e83565b92509250509250929050565b5f805f60608486031215612f3a57612f39612461565b5b5f612f4786828701612644565b9350506020612f5886828701612488565b9250506040612f6986828701612488565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f496e76616c69644d6573736167654861736800000000000000000000000000005f82015250565b5f612fe4601283612fa0565b9150612fef82612fb0565b602082019050919050565b5f6020820190508181035f83015261301181612fd8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61304f82612625565b915061305a83612625565b925082820190508082111561307257613071613018565b5b92915050565b5f60608201905061308b5f830186612cb8565b6130986020830185612cb8565b6130a56040830184612e07565b949350505050565b5f815190506130bb81612d7e565b92915050565b5f602082840312156130d6576130d5612461565b5b5f6130e3848285016130ad565b91505092915050565b5f6130f682612625565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361312857613127613018565b5b600182019050919050565b5f6040820190506131465f830185612cb8565b6131536020830184612e07565b9392505050565b5f61316482612625565b915061316f83612625565b925082820261317d81612625565b9150828204841483151761319457613193613018565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131d282612625565b91506131dd83612625565b9250826131ed576131ec61319b565b5b828204905092915050565b5f61320282612625565b915061320d83612625565b925082820390508181111561322557613224613018565b5b92915050565b5f819050919050565b5f61324e61324961324484612658565b61322b565b612625565b9050919050565b61325e81613234565b82525050565b828183375f83830152505050565b5f61327d8385612fa0565b935061328a838584613264565b61329383612807565b840190509392505050565b5f60a0820190506132b15f830189612e07565b6132be6020830188613255565b6132cb60408301876127df565b6132d860608301866127df565b81810360808301526132eb818486613272565b9050979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061333c57607f821691505b60208210810361334f5761334e6132f8565b5b50919050565b7f50617963726573743a207a65726f2061646472657373000000000000000000005f82015250565b5f613389601683612fa0565b915061339482613355565b602082019050919050565b5f6020820190508181035f8301526133b68161337d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f613417602e83612fa0565b9150613422826133bd565b604082019050919050565b5f6020820190508181035f8301526134448161340b565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f61347a6134756134708461344b565b61322b565b613454565b9050919050565b61348a81613460565b82525050565b5f6020820190506134a35f830184613481565b92915050565b5f6020820190506134bc5f830184612df8565b92915050565b7f4f6e6c7941676772656761746f720000000000000000000000000000000000005f82015250565b5f6134f6600e83612fa0565b9150613501826134c2565b602082019050919050565b5f6020820190508181035f830152613523816134ea565b9050919050565b7f4f7264657246756c66696c6c65640000000000000000000000000000000000005f82015250565b5f61355e600e83612fa0565b91506135698261352a565b602082019050919050565b5f6020820190508181035f83015261358b81613552565b9050919050565b5f61359c82612658565b91506135a783612658565b925082820390506bffffffffffffffffffffffff8111156135cb576135ca613018565b5b92915050565b5f6135eb6135e66135e184612c50565b61322b565b612658565b9050919050565b6135fb816135d1565b82525050565b5f6060820190506136145f8301866127df565b61362160208301856127df565b61362e60408301846135f2565b949350505050565b5f6060820190506136495f8301866127df565b6136566020830185612cb8565b6136636040830184612a9f565b949350505050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026136d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613696565b6136db8683613696565b95508019841693508086168417925050509392505050565b5f61370d61370861370384612625565b61322b565b612625565b9050919050565b5f819050919050565b613726836136f3565b61373a61373282613714565b8484546136a2565b825550505050565b5f90565b61374e613742565b61375981848461371d565b505050565b5b8181101561377c576137715f82613746565b60018101905061375f565b5050565b601f8211156137c15761379281613675565b61379b84613687565b810160208510156137aa578190505b6137be6137b685613687565b83018261375e565b50505b505050565b5f82821c905092915050565b5f6137e15f19846008026137c6565b1980831691505092915050565b5f6137f983836137d2565b9150826002028217905092915050565b613813838361366b565b67ffffffffffffffff81111561382c5761382b612817565b5b6138368254613325565b613841828285613780565b5f601f83116001811461386e575f841561385c578287013590505b61386685826137ee565b8655506138cd565b601f19841661387c86613675565b5f5b828110156138a35784890135825560018201915060208501945060208101905061387e565b868310156138c057848901356138bc601f8916826137d2565b8355505b6001600288020188555050505b50505050505050565b5f6138e18385612a04565b93506138ee838584613264565b6138f783612807565b840190509392505050565b5f6020820190508181035f83015261391b8184866138d6565b90509392505050565b5f6040820190506139375f830185612e07565b61394460208301846127df565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6139a5602683612fa0565b91506139b08261394b565b604082019050919050565b5f6020820190508181035f8301526139d281613999565b9050919050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f613a0d601083612fa0565b9150613a18826139d9565b602082019050919050565b5f6020820190508181035f830152613a3a81613a01565b9050919050565b7f546f6b656e4e6f74537570706f727465640000000000000000000000000000005f82015250565b5f613a75601183612fa0565b9150613a8082613a41565b602082019050919050565b5f6020820190508181035f830152613aa281613a69565b9050919050565b7f416d6f756e7449735a65726f00000000000000000000000000000000000000005f82015250565b5f613add600c83612fa0565b9150613ae882613aa9565b602082019050919050565b5f6020820190508181035f830152613b0a81613ad1565b9050919050565b7f5468726f775a65726f41646472657373000000000000000000000000000000005f82015250565b5f613b45601083612fa0565b9150613b5082613b11565b602082019050919050565b5f6020820190508181035f830152613b7281613b39565b9050919050565b7f496e76616c6964496e737469747574696f6e436f6465000000000000000000005f82015250565b5f613bad601683612fa0565b9150613bb882613b79565b602082019050919050565b5f6020820190508181035f830152613bda81613ba1565b9050919050565b7f496e76616c696453656e646572466565526563697069656e74000000000000005f82015250565b5f613c15601983612fa0565b9150613c2082613be1565b602082019050919050565b5f6020820190508181035f830152613c4281613c09565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613c7d602083612fa0565b9150613c8882613c49565b602082019050919050565b5f6020820190508181035f830152613caa81613c71565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f613d0b602b83612fa0565b9150613d1682613cb1565b604082019050919050565b5f6020820190508181035f830152613d3881613cff565b9050919050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f613d73601483612fa0565b9150613d7e82613d3f565b602082019050919050565b5f6020820190508181035f830152613da081613d67565b905091905056fea26469706673582212201523dc596a004a4a60e33284142d256cba02c15b21892a23b2d2855ff7b8ae1d64736f6c63430008180033",
}

// PaycrestABI is the input ABI used to generate the binding from.
// Deprecated: Use PaycrestMetaData.ABI instead.
var PaycrestABI = PaycrestMetaData.ABI

// PaycrestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaycrestMetaData.Bin instead.
var PaycrestBin = PaycrestMetaData.Bin

// DeployPaycrest deploys a new Ethereum contract, binding an instance of Paycrest to it.
func DeployPaycrest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Paycrest, error) {
	parsed, err := PaycrestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaycrestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Paycrest{PaycrestCaller: PaycrestCaller{contract: contract}, PaycrestTransactor: PaycrestTransactor{contract: contract}, PaycrestFilterer: PaycrestFilterer{contract: contract}}, nil
}

// Paycrest is an auto generated Go binding around an Ethereum contract.
type Paycrest struct {
	PaycrestCaller     // Read-only binding to the contract
	PaycrestTransactor // Write-only binding to the contract
	PaycrestFilterer   // Log filterer for contract events
}

// PaycrestCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaycrestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaycrestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaycrestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaycrestSession struct {
	Contract     *Paycrest         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaycrestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaycrestCallerSession struct {
	Contract *PaycrestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// PaycrestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaycrestTransactorSession struct {
	Contract     *PaycrestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// PaycrestRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaycrestRaw struct {
	Contract *Paycrest // Generic contract binding to access the raw methods on
}

// PaycrestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaycrestCallerRaw struct {
	Contract *PaycrestCaller // Generic read-only contract binding to access the raw methods on
}

// PaycrestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaycrestTransactorRaw struct {
	Contract *PaycrestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaycrest creates a new instance of Paycrest, bound to a specific deployed contract.
func NewPaycrest(address common.Address, backend bind.ContractBackend) (*Paycrest, error) {
	contract, err := bindPaycrest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Paycrest{PaycrestCaller: PaycrestCaller{contract: contract}, PaycrestTransactor: PaycrestTransactor{contract: contract}, PaycrestFilterer: PaycrestFilterer{contract: contract}}, nil
}

// NewPaycrestCaller creates a new read-only instance of Paycrest, bound to a specific deployed contract.
func NewPaycrestCaller(address common.Address, caller bind.ContractCaller) (*PaycrestCaller, error) {
	contract, err := bindPaycrest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestCaller{contract: contract}, nil
}

// NewPaycrestTransactor creates a new write-only instance of Paycrest, bound to a specific deployed contract.
func NewPaycrestTransactor(address common.Address, transactor bind.ContractTransactor) (*PaycrestTransactor, error) {
	contract, err := bindPaycrest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestTransactor{contract: contract}, nil
}

// NewPaycrestFilterer creates a new log filterer instance of Paycrest, bound to a specific deployed contract.
func NewPaycrestFilterer(address common.Address, filterer bind.ContractFilterer) (*PaycrestFilterer, error) {
	contract, err := bindPaycrest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaycrestFilterer{contract: contract}, nil
}

// bindPaycrest binds a generic wrapper to an already deployed contract.
func bindPaycrest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaycrestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Paycrest *PaycrestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Paycrest.Contract.PaycrestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Paycrest *PaycrestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.Contract.PaycrestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Paycrest *PaycrestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Paycrest.Contract.PaycrestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Paycrest *PaycrestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Paycrest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Paycrest *PaycrestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Paycrest *PaycrestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Paycrest.Contract.contract.Transact(opts, method, params...)
}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_Paycrest *PaycrestCaller) GetAggregator(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "getAggregator")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_Paycrest *PaycrestSession) GetAggregator() ([]byte, error) {
	return _Paycrest.Contract.GetAggregator(&_Paycrest.CallOpts)
}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_Paycrest *PaycrestCallerSession) GetAggregator() ([]byte, error) {
	return _Paycrest.Contract.GetAggregator(&_Paycrest.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Paycrest *PaycrestCaller) GetFeeDetails(opts *bind.CallOpts) (uint64, *big.Int, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "getFeeDetails")

	if err != nil {
		return *new(uint64), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Paycrest *PaycrestSession) GetFeeDetails() (uint64, *big.Int, error) {
	return _Paycrest.Contract.GetFeeDetails(&_Paycrest.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint64, uint256)
func (_Paycrest *PaycrestCallerSession) GetFeeDetails() (uint64, *big.Int, error) {
	return _Paycrest.Contract.GetFeeDetails(&_Paycrest.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,uint96,bool,address,uint96,uint256))
func (_Paycrest *PaycrestCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IPaycrestOrder, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IPaycrestOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IPaycrestOrder)).(*IPaycrestOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,uint96,bool,address,uint96,uint256))
func (_Paycrest *PaycrestSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _Paycrest.Contract.GetOrderInfo(&_Paycrest.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint256,uint96,bool,address,uint96,uint256))
func (_Paycrest *PaycrestCallerSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _Paycrest.Contract.GetOrderInfo(&_Paycrest.CallOpts, _orderId)
}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Paycrest *PaycrestCaller) GetSupportedInstitutionByCode(opts *bind.CallOpts, _code [32]byte) (SharedStructsInstitutionByCode, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "getSupportedInstitutionByCode", _code)

	if err != nil {
		return *new(SharedStructsInstitutionByCode), err
	}

	out0 := *abi.ConvertType(out[0], new(SharedStructsInstitutionByCode)).(*SharedStructsInstitutionByCode)

	return out0, err

}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Paycrest *PaycrestSession) GetSupportedInstitutionByCode(_code [32]byte) (SharedStructsInstitutionByCode, error) {
	return _Paycrest.Contract.GetSupportedInstitutionByCode(&_Paycrest.CallOpts, _code)
}

// GetSupportedInstitutionByCode is a free data retrieval call binding the contract method 0xc2280103.
//
// Solidity: function getSupportedInstitutionByCode(bytes32 _code) view returns((bytes32,bytes32))
func (_Paycrest *PaycrestCallerSession) GetSupportedInstitutionByCode(_code [32]byte) (SharedStructsInstitutionByCode, error) {
	return _Paycrest.Contract.GetSupportedInstitutionByCode(&_Paycrest.CallOpts, _code)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Paycrest *PaycrestCaller) GetSupportedInstitutions(opts *bind.CallOpts, _currency [32]byte) ([]SharedStructsInstitution, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "getSupportedInstitutions", _currency)

	if err != nil {
		return *new([]SharedStructsInstitution), err
	}

	out0 := *abi.ConvertType(out[0], new([]SharedStructsInstitution)).(*[]SharedStructsInstitution)

	return out0, err

}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Paycrest *PaycrestSession) GetSupportedInstitutions(_currency [32]byte) ([]SharedStructsInstitution, error) {
	return _Paycrest.Contract.GetSupportedInstitutions(&_Paycrest.CallOpts, _currency)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 _currency) view returns((bytes32,bytes32)[])
func (_Paycrest *PaycrestCallerSession) GetSupportedInstitutions(_currency [32]byte) ([]SharedStructsInstitution, error) {
	return _Paycrest.Contract.GetSupportedInstitutions(&_Paycrest.CallOpts, _currency)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Paycrest *PaycrestCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Paycrest *PaycrestSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Paycrest.Contract.IsTokenSupported(&_Paycrest.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_Paycrest *PaycrestCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _Paycrest.Contract.IsTokenSupported(&_Paycrest.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Paycrest *PaycrestCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Paycrest *PaycrestSession) Owner() (common.Address, error) {
	return _Paycrest.Contract.Owner(&_Paycrest.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Paycrest *PaycrestCallerSession) Owner() (common.Address, error) {
	return _Paycrest.Contract.Owner(&_Paycrest.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Paycrest *PaycrestCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Paycrest.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Paycrest *PaycrestSession) Paused() (bool, error) {
	return _Paycrest.Contract.Paused(&_Paycrest.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Paycrest *PaycrestCallerSession) Paused() (bool, error) {
	return _Paycrest.Contract.Paused(&_Paycrest.CallOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Paycrest *PaycrestTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "createOrder", _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Paycrest *PaycrestSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Paycrest.Contract.CreateOrder(&_Paycrest.TransactOpts, _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_Paycrest *PaycrestTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _Paycrest.Contract.CreateOrder(&_Paycrest.TransactOpts, _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Paycrest *PaycrestTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Paycrest *PaycrestSession) Initialize() (*types.Transaction, error) {
	return _Paycrest.Contract.Initialize(&_Paycrest.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Paycrest *PaycrestTransactorSession) Initialize() (*types.Transaction, error) {
	return _Paycrest.Contract.Initialize(&_Paycrest.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Paycrest *PaycrestTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Paycrest *PaycrestSession) Pause() (*types.Transaction, error) {
	return _Paycrest.Contract.Pause(&_Paycrest.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Paycrest *PaycrestTransactorSession) Pause() (*types.Transaction, error) {
	return _Paycrest.Contract.Pause(&_Paycrest.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0xd28a8d32.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) returns(bool)
func (_Paycrest *PaycrestTransactor) Refund(opts *bind.TransactOpts, _fee *big.Int, _orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "refund", _fee, _orderId, _label)
}

// Refund is a paid mutator transaction binding the contract method 0xd28a8d32.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) returns(bool)
func (_Paycrest *PaycrestSession) Refund(_fee *big.Int, _orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _Paycrest.Contract.Refund(&_Paycrest.TransactOpts, _fee, _orderId, _label)
}

// Refund is a paid mutator transaction binding the contract method 0xd28a8d32.
//
// Solidity: function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) returns(bool)
func (_Paycrest *PaycrestTransactorSession) Refund(_fee *big.Int, _orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _Paycrest.Contract.Refund(&_Paycrest.TransactOpts, _fee, _orderId, _label)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Paycrest *PaycrestTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Paycrest *PaycrestSession) RenounceOwnership() (*types.Transaction, error) {
	return _Paycrest.Contract.RenounceOwnership(&_Paycrest.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Paycrest *PaycrestTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Paycrest.Contract.RenounceOwnership(&_Paycrest.TransactOpts)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Paycrest *PaycrestTransactor) SetSupportedInstitutions(opts *bind.TransactOpts, currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "setSupportedInstitutions", currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Paycrest *PaycrestSession) SetSupportedInstitutions(currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Paycrest.Contract.SetSupportedInstitutions(&_Paycrest.TransactOpts, currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_Paycrest *PaycrestTransactorSession) SetSupportedInstitutions(currency [32]byte, institutions []SharedStructsInstitution) (*types.Transaction, error) {
	return _Paycrest.Contract.SetSupportedInstitutions(&_Paycrest.TransactOpts, currency, institutions)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_Paycrest *PaycrestTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_Paycrest *PaycrestSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _Paycrest.Contract.SettingManagerBool(&_Paycrest.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_Paycrest *PaycrestTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _Paycrest.Contract.SettingManagerBool(&_Paycrest.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0x9015dced.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) returns(bytes32, address)
func (_Paycrest *PaycrestTransactor) Settle(opts *bind.TransactOpts, _splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "settle", _splitOrderId, _orderId, _label, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0x9015dced.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) returns(bytes32, address)
func (_Paycrest *PaycrestSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Paycrest.Contract.Settle(&_Paycrest.TransactOpts, _splitOrderId, _orderId, _label, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0x9015dced.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) returns(bytes32, address)
func (_Paycrest *PaycrestTransactorSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _liquidityProvider common.Address, _settlePercent uint64) (*types.Transaction, error) {
	return _Paycrest.Contract.Settle(&_Paycrest.TransactOpts, _splitOrderId, _orderId, _label, _liquidityProvider, _settlePercent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Paycrest *PaycrestTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Paycrest *PaycrestSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Paycrest.Contract.TransferOwnership(&_Paycrest.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Paycrest *PaycrestTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Paycrest.Contract.TransferOwnership(&_Paycrest.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Paycrest *PaycrestTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Paycrest *PaycrestSession) Unpause() (*types.Transaction, error) {
	return _Paycrest.Contract.Unpause(&_Paycrest.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Paycrest *PaycrestTransactorSession) Unpause() (*types.Transaction, error) {
	return _Paycrest.Contract.Unpause(&_Paycrest.TransactOpts)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_Paycrest *PaycrestTransactor) UpdateProtocolAddresses(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "updateProtocolAddresses", what, value)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_Paycrest *PaycrestSession) UpdateProtocolAddresses(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolAddresses(&_Paycrest.TransactOpts, what, value)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_Paycrest *PaycrestTransactorSession) UpdateProtocolAddresses(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolAddresses(&_Paycrest.TransactOpts, what, value)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_Paycrest *PaycrestTransactor) UpdateProtocolAggregator(opts *bind.TransactOpts, aggregator []byte) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "updateProtocolAggregator", aggregator)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_Paycrest *PaycrestSession) UpdateProtocolAggregator(aggregator []byte) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolAggregator(&_Paycrest.TransactOpts, aggregator)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_Paycrest *PaycrestTransactorSession) UpdateProtocolAggregator(aggregator []byte) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolAggregator(&_Paycrest.TransactOpts, aggregator)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x84630736.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent) returns()
func (_Paycrest *PaycrestTransactor) UpdateProtocolFees(opts *bind.TransactOpts, _protocolFeePercent uint64) (*types.Transaction, error) {
	return _Paycrest.contract.Transact(opts, "updateProtocolFees", _protocolFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x84630736.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent) returns()
func (_Paycrest *PaycrestSession) UpdateProtocolFees(_protocolFeePercent uint64) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolFees(&_Paycrest.TransactOpts, _protocolFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0x84630736.
//
// Solidity: function updateProtocolFees(uint64 _protocolFeePercent) returns()
func (_Paycrest *PaycrestTransactorSession) UpdateProtocolFees(_protocolFeePercent uint64) (*types.Transaction, error) {
	return _Paycrest.Contract.UpdateProtocolFees(&_Paycrest.TransactOpts, _protocolFeePercent)
}

// PaycrestInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Paycrest contract.
type PaycrestInitializedIterator struct {
	Event *PaycrestInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestInitialized represents a Initialized event raised by the Paycrest contract.
type PaycrestInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Paycrest *PaycrestFilterer) FilterInitialized(opts *bind.FilterOpts) (*PaycrestInitializedIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PaycrestInitializedIterator{contract: _Paycrest.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Paycrest *PaycrestFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PaycrestInitialized) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestInitialized)
				if err := _Paycrest.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Paycrest *PaycrestFilterer) ParseInitialized(log types.Log) (*PaycrestInitialized, error) {
	event := new(PaycrestInitialized)
	if err := _Paycrest.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the Paycrest contract.
type PaycrestOrderCreatedIterator struct {
	Event *PaycrestOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderCreated represents a OrderCreated event raised by the Paycrest contract.
type PaycrestOrderCreated struct {
	Token           common.Address
	Amount          *big.Int
	ProtocolFee     *big.Int
	OrderId         [32]byte
	Rate            *big.Int
	InstitutionCode [32]byte
	Label           [32]byte
	MessageHash     string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919.
//
// Solidity: event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_Paycrest *PaycrestFilterer) FilterOrderCreated(opts *bind.FilterOpts, token []common.Address, amount []*big.Int, orderId [][32]byte) (*PaycrestOrderCreatedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "OrderCreated", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderCreatedIterator{contract: _Paycrest.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919.
//
// Solidity: event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_Paycrest *PaycrestFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *PaycrestOrderCreated, token []common.Address, amount []*big.Int, orderId [][32]byte) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "OrderCreated", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderCreated)
				if err := _Paycrest.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919.
//
// Solidity: event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_Paycrest *PaycrestFilterer) ParseOrderCreated(log types.Log) (*PaycrestOrderCreated, error) {
	event := new(PaycrestOrderCreated)
	if err := _Paycrest.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderRefundedIterator is returned from FilterOrderRefunded and is used to iterate over the raw logs and unpacked data for OrderRefunded events raised by the Paycrest contract.
type PaycrestOrderRefundedIterator struct {
	Event *PaycrestOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderRefunded represents a OrderRefunded event raised by the Paycrest contract.
type PaycrestOrderRefunded struct {
	Fee     *big.Int
	OrderId [32]byte
	Label   [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderRefunded is a free log retrieval operation binding the contract event 0x79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label)
func (_Paycrest *PaycrestFilterer) FilterOrderRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*PaycrestOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderRefundedIterator{contract: _Paycrest.contract, event: "OrderRefunded", logs: logs, sub: sub}, nil
}

// WatchOrderRefunded is a free log subscription operation binding the contract event 0x79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label)
func (_Paycrest *PaycrestFilterer) WatchOrderRefunded(opts *bind.WatchOpts, sink chan<- *PaycrestOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "OrderRefunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderRefunded)
				if err := _Paycrest.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderRefunded is a log parse operation binding the contract event 0x79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f.
//
// Solidity: event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label)
func (_Paycrest *PaycrestFilterer) ParseOrderRefunded(log types.Log) (*PaycrestOrderRefunded, error) {
	event := new(PaycrestOrderRefunded)
	if err := _Paycrest.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettledIterator is returned from FilterOrderSettled and is used to iterate over the raw logs and unpacked data for OrderSettled events raised by the Paycrest contract.
type PaycrestOrderSettledIterator struct {
	Event *PaycrestOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettled represents a OrderSettled event raised by the Paycrest contract.
type PaycrestOrderSettled struct {
	SplitOrderId      [32]byte
	OrderId           [32]byte
	Label             [32]byte
	LiquidityProvider common.Address
	SettlePercent     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOrderSettled is a free log retrieval operation binding the contract event 0xa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c2.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_Paycrest *PaycrestFilterer) FilterOrderSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*PaycrestOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettledIterator{contract: _Paycrest.contract, event: "OrderSettled", logs: logs, sub: sub}, nil
}

// WatchOrderSettled is a free log subscription operation binding the contract event 0xa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c2.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_Paycrest *PaycrestFilterer) WatchOrderSettled(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "OrderSettled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettled)
				if err := _Paycrest.contract.UnpackLog(event, "OrderSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSettled is a log parse operation binding the contract event 0xa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c2.
//
// Solidity: event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_Paycrest *PaycrestFilterer) ParseOrderSettled(log types.Log) (*PaycrestOrderSettled, error) {
	event := new(PaycrestOrderSettled)
	if err := _Paycrest.contract.UnpackLog(event, "OrderSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Paycrest contract.
type PaycrestOwnershipTransferredIterator struct {
	Event *PaycrestOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOwnershipTransferred represents a OwnershipTransferred event raised by the Paycrest contract.
type PaycrestOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Paycrest *PaycrestFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaycrestOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOwnershipTransferredIterator{contract: _Paycrest.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Paycrest *PaycrestFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaycrestOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOwnershipTransferred)
				if err := _Paycrest.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Paycrest *PaycrestFilterer) ParseOwnershipTransferred(log types.Log) (*PaycrestOwnershipTransferred, error) {
	event := new(PaycrestOwnershipTransferred)
	if err := _Paycrest.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Paycrest contract.
type PaycrestPausedIterator struct {
	Event *PaycrestPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestPaused represents a Paused event raised by the Paycrest contract.
type PaycrestPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Paycrest *PaycrestFilterer) FilterPaused(opts *bind.FilterOpts) (*PaycrestPausedIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PaycrestPausedIterator{contract: _Paycrest.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Paycrest *PaycrestFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PaycrestPaused) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestPaused)
				if err := _Paycrest.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Paycrest *PaycrestFilterer) ParsePaused(log types.Log) (*PaycrestPaused, error) {
	event := new(PaycrestPaused)
	if err := _Paycrest.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestProtocolAddressesUpdatedIterator is returned from FilterProtocolAddressesUpdated and is used to iterate over the raw logs and unpacked data for ProtocolAddressesUpdated events raised by the Paycrest contract.
type PaycrestProtocolAddressesUpdatedIterator struct {
	Event *PaycrestProtocolAddressesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestProtocolAddressesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestProtocolAddressesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestProtocolAddressesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestProtocolAddressesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestProtocolAddressesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestProtocolAddressesUpdated represents a ProtocolAddressesUpdated event raised by the Paycrest contract.
type PaycrestProtocolAddressesUpdated struct {
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProtocolAddressesUpdated is a free log retrieval operation binding the contract event 0xd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb.
//
// Solidity: event ProtocolAddressesUpdated(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) FilterProtocolAddressesUpdated(opts *bind.FilterOpts) (*PaycrestProtocolAddressesUpdatedIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "ProtocolAddressesUpdated")
	if err != nil {
		return nil, err
	}
	return &PaycrestProtocolAddressesUpdatedIterator{contract: _Paycrest.contract, event: "ProtocolAddressesUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolAddressesUpdated is a free log subscription operation binding the contract event 0xd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb.
//
// Solidity: event ProtocolAddressesUpdated(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) WatchProtocolAddressesUpdated(opts *bind.WatchOpts, sink chan<- *PaycrestProtocolAddressesUpdated) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "ProtocolAddressesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestProtocolAddressesUpdated)
				if err := _Paycrest.contract.UnpackLog(event, "ProtocolAddressesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolAddressesUpdated is a log parse operation binding the contract event 0xd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb.
//
// Solidity: event ProtocolAddressesUpdated(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) ParseProtocolAddressesUpdated(log types.Log) (*PaycrestProtocolAddressesUpdated, error) {
	event := new(PaycrestProtocolAddressesUpdated)
	if err := _Paycrest.contract.UnpackLog(event, "ProtocolAddressesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestProtocolFeesUpdatedIterator is returned from FilterProtocolFeesUpdated and is used to iterate over the raw logs and unpacked data for ProtocolFeesUpdated events raised by the Paycrest contract.
type PaycrestProtocolFeesUpdatedIterator struct {
	Event *PaycrestProtocolFeesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestProtocolFeesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestProtocolFeesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestProtocolFeesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestProtocolFeesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestProtocolFeesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestProtocolFeesUpdated represents a ProtocolFeesUpdated event raised by the Paycrest contract.
type PaycrestProtocolFeesUpdated struct {
	ProtocolFee uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProtocolFeesUpdated is a free log retrieval operation binding the contract event 0xb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446.
//
// Solidity: event ProtocolFeesUpdated(uint64 protocolFee)
func (_Paycrest *PaycrestFilterer) FilterProtocolFeesUpdated(opts *bind.FilterOpts) (*PaycrestProtocolFeesUpdatedIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "ProtocolFeesUpdated")
	if err != nil {
		return nil, err
	}
	return &PaycrestProtocolFeesUpdatedIterator{contract: _Paycrest.contract, event: "ProtocolFeesUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolFeesUpdated is a free log subscription operation binding the contract event 0xb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446.
//
// Solidity: event ProtocolFeesUpdated(uint64 protocolFee)
func (_Paycrest *PaycrestFilterer) WatchProtocolFeesUpdated(opts *bind.WatchOpts, sink chan<- *PaycrestProtocolFeesUpdated) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "ProtocolFeesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestProtocolFeesUpdated)
				if err := _Paycrest.contract.UnpackLog(event, "ProtocolFeesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolFeesUpdated is a log parse operation binding the contract event 0xb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446.
//
// Solidity: event ProtocolFeesUpdated(uint64 protocolFee)
func (_Paycrest *PaycrestFilterer) ParseProtocolFeesUpdated(log types.Log) (*PaycrestProtocolFeesUpdated, error) {
	event := new(PaycrestProtocolFeesUpdated)
	if err := _Paycrest.contract.UnpackLog(event, "ProtocolFeesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestSenderFeeTransferredIterator is returned from FilterSenderFeeTransferred and is used to iterate over the raw logs and unpacked data for SenderFeeTransferred events raised by the Paycrest contract.
type PaycrestSenderFeeTransferredIterator struct {
	Event *PaycrestSenderFeeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestSenderFeeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestSenderFeeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestSenderFeeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestSenderFeeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestSenderFeeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestSenderFeeTransferred represents a SenderFeeTransferred event raised by the Paycrest contract.
type PaycrestSenderFeeTransferred struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSenderFeeTransferred is a free log retrieval operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Paycrest *PaycrestFilterer) FilterSenderFeeTransferred(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*PaycrestSenderFeeTransferredIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestSenderFeeTransferredIterator{contract: _Paycrest.contract, event: "SenderFeeTransferred", logs: logs, sub: sub}, nil
}

// WatchSenderFeeTransferred is a free log subscription operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Paycrest *PaycrestFilterer) WatchSenderFeeTransferred(opts *bind.WatchOpts, sink chan<- *PaycrestSenderFeeTransferred, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "SenderFeeTransferred", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestSenderFeeTransferred)
				if err := _Paycrest.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSenderFeeTransferred is a log parse operation binding the contract event 0x44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501.
//
// Solidity: event SenderFeeTransferred(address indexed sender, uint256 indexed amount)
func (_Paycrest *PaycrestFilterer) ParseSenderFeeTransferred(log types.Log) (*PaycrestSenderFeeTransferred, error) {
	event := new(PaycrestSenderFeeTransferred)
	if err := _Paycrest.contract.UnpackLog(event, "SenderFeeTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestSetAggregatorIterator is returned from FilterSetAggregator and is used to iterate over the raw logs and unpacked data for SetAggregator events raised by the Paycrest contract.
type PaycrestSetAggregatorIterator struct {
	Event *PaycrestSetAggregator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestSetAggregatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestSetAggregator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestSetAggregator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestSetAggregatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestSetAggregatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestSetAggregator represents a SetAggregator event raised by the Paycrest contract.
type PaycrestSetAggregator struct {
	Aggregator []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetAggregator is a free log retrieval operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_Paycrest *PaycrestFilterer) FilterSetAggregator(opts *bind.FilterOpts) (*PaycrestSetAggregatorIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "SetAggregator")
	if err != nil {
		return nil, err
	}
	return &PaycrestSetAggregatorIterator{contract: _Paycrest.contract, event: "SetAggregator", logs: logs, sub: sub}, nil
}

// WatchSetAggregator is a free log subscription operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_Paycrest *PaycrestFilterer) WatchSetAggregator(opts *bind.WatchOpts, sink chan<- *PaycrestSetAggregator) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "SetAggregator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestSetAggregator)
				if err := _Paycrest.contract.UnpackLog(event, "SetAggregator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAggregator is a log parse operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_Paycrest *PaycrestFilterer) ParseSetAggregator(log types.Log) (*PaycrestSetAggregator, error) {
	event := new(PaycrestSetAggregator)
	if err := _Paycrest.contract.UnpackLog(event, "SetAggregator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestSetFeeRecipientIterator is returned from FilterSetFeeRecipient and is used to iterate over the raw logs and unpacked data for SetFeeRecipient events raised by the Paycrest contract.
type PaycrestSetFeeRecipientIterator struct {
	Event *PaycrestSetFeeRecipient // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestSetFeeRecipientIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestSetFeeRecipient)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestSetFeeRecipient)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestSetFeeRecipientIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestSetFeeRecipientIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestSetFeeRecipient represents a SetFeeRecipient event raised by the Paycrest contract.
type PaycrestSetFeeRecipient struct {
	TreasuryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetFeeRecipient is a free log retrieval operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) FilterSetFeeRecipient(opts *bind.FilterOpts) (*PaycrestSetFeeRecipientIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "SetFeeRecipient")
	if err != nil {
		return nil, err
	}
	return &PaycrestSetFeeRecipientIterator{contract: _Paycrest.contract, event: "SetFeeRecipient", logs: logs, sub: sub}, nil
}

// WatchSetFeeRecipient is a free log subscription operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) WatchSetFeeRecipient(opts *bind.WatchOpts, sink chan<- *PaycrestSetFeeRecipient) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "SetFeeRecipient")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestSetFeeRecipient)
				if err := _Paycrest.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFeeRecipient is a log parse operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address treasuryAddress)
func (_Paycrest *PaycrestFilterer) ParseSetFeeRecipient(log types.Log) (*PaycrestSetFeeRecipient, error) {
	event := new(PaycrestSetFeeRecipient)
	if err := _Paycrest.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestSettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the Paycrest contract.
type PaycrestSettingManagerBoolIterator struct {
	Event *PaycrestSettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestSettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestSettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestSettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestSettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestSettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestSettingManagerBool represents a SettingManagerBool event raised by the Paycrest contract.
type PaycrestSettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_Paycrest *PaycrestFilterer) FilterSettingManagerBool(opts *bind.FilterOpts) (*PaycrestSettingManagerBoolIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return &PaycrestSettingManagerBoolIterator{contract: _Paycrest.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_Paycrest *PaycrestFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *PaycrestSettingManagerBool) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestSettingManagerBool)
				if err := _Paycrest.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_Paycrest *PaycrestFilterer) ParseSettingManagerBool(log types.Log) (*PaycrestSettingManagerBool, error) {
	event := new(PaycrestSettingManagerBool)
	if err := _Paycrest.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Paycrest contract.
type PaycrestUnpausedIterator struct {
	Event *PaycrestUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestUnpaused represents a Unpaused event raised by the Paycrest contract.
type PaycrestUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Paycrest *PaycrestFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PaycrestUnpausedIterator, error) {

	logs, sub, err := _Paycrest.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PaycrestUnpausedIterator{contract: _Paycrest.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Paycrest *PaycrestFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PaycrestUnpaused) (event.Subscription, error) {

	logs, sub, err := _Paycrest.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestUnpaused)
				if err := _Paycrest.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Paycrest *PaycrestFilterer) ParseUnpaused(log types.Log) (*PaycrestUnpaused, error) {
	event := new(PaycrestUnpaused)
	if err := _Paycrest.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
