// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPaycrestOrder is an auto generated low-level Go binding around an user-defined struct.
type IPaycrestOrder struct {
	Seller             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	Rate               *big.Int
	IsFulfilled        bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// PaycrestSettingManagerInstitution is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitution struct {
	Code [32]byte
	Name [32]byte
}

// PaycrestSettingManagerInstitutionByCode is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitutionByCode struct {
	Name     [32]byte
	Currency [32]byte
}

// PaycrestOrderMetaData contains all meta data concerning the PaycrestOrder contract.
var PaycrestOrderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_protocolFeePercent\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b50620000216200002760201b60201c565b620001c6565b5f60019054906101000a900460ff161562000079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000070906200016e565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff1614620000e85760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000df9190620001ab565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f62000156602783620000ea565b91506200016382620000fa565b604082019050919050565b5f6020820190508181035f830152620001878162000148565b9050919050565b5f60ff82169050919050565b620001a5816200018e565b82525050565b5f602082019050620001c05f8301846200019a565b92915050565b613fae80620001d45f395ff3fe608060405234801561000f575f80fd5b5060043610610135575f3560e01c80638da5cb5b116100b6578063d8e8de341161007a578063d8e8de341461034c578063d9caed121461037c578063e4683a7914610398578063e8d6e0de146103c8578063f2fde38b146103e6578063f5326b191461040257610135565b80638da5cb5b146102ba57806399e3c0b4146102d8578063b810c636146102f4578063c4d66de814610314578063cb79455b1461033057610135565b8063715018a6116100fd578063715018a61461020457806375151b631461020e578063768c6ec01461023e57806379a0effb1461026e57806387490d861461028a57610135565b80630262133814610139578063137764fb146101695780632654ec7e1461019a57806332200882146101ca5780633ad59dbc146101e6575b5f80fd5b610153600480360381019061014e91906126a2565b61041e565b60405161016091906127b1565b60405180910390f35b610183600480360381019061017e91906128fe565b610552565b6040516101919291906129d9565b60405180910390f35b6101b460048036038101906101af9190612ac9565b610940565b6040516101c19190612bae565b60405180910390f35b6101e460048036038101906101df9190612d60565b610e04565b005b6101ee610f0a565b6040516101fb9190612e34565b60405180910390f35b61020c610f9a565b005b61022860048036038101906102239190612e54565b610fad565b6040516102359190612e8e565b60405180910390f35b610258600480360381019061025391906126a2565b610fff565b6040516102659190612f98565b60405180910390f35b61028860048036038101906102839190612fb2565b611228565b005b6102a4600480360381019061029f91906126a2565b611372565b6040516102b1919061301d565b60405180910390f35b6102c26113b0565b6040516102cf9190613036565b60405180910390f35b6102f260048036038101906102ed919061304f565b6113d8565b005b6102fc611586565b60405161030b939291906130d8565b60405180910390f35b61032e60048036038101906103299190612e54565b6115d4565b005b61034a60048036038101906103459190613162565b6117e1565b005b61036660048036038101906103619190612e54565b611838565b6040516103739190612e8e565b60405180910390f35b610396600480360381019061039191906131ad565b61188a565b005b6103b260048036038101906103ad91906131fd565b611913565b6040516103bf9190612e8e565b60405180910390f35b6103d0611bac565b6040516103dd9190613036565b60405180910390f35b61040060048036038101906103fb9190612e54565b611bd4565b005b61041c60048036038101906104179190613265565b611c56565b005b60605f609e5f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610494578382905f5260205f2090600202016040518060400160405290815f820154815260200160018201548152505081526020019060010190610451565b5050505090505f815190505f8167ffffffffffffffff8111156104ba576104b9612bd7565b5b6040519080825280602002602001820160405280156104f357816020015b6104e061254b565b8152602001906001900390816104d85790505b5090505f5b8281101561054657838181518110610513576105126132a3565b5b602002602001015182828151811061052e5761052d6132a3565b5b602002602001018190525080806001019150506104f8565b50809350505050919050565b5f8060685f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da9061332a565b60405180910390fd5b60a05f8a81526020019081526020015f20600401600c9054906101000a900460ff1615610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90613392565b60405180910390fd5b5f60a05f8b81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508467ffffffffffffffff1660a05f8c81526020019081526020015f2060050160148282829054906101000a90046bffffffffffffffffffffffff166106c191906133dd565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f6107058b8767ffffffffffffffff1687611d0c565b90505f60a05f8d81526020019081526020015f2060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361079c57600160a05f8d81526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505f60a05f8d81526020019081526020015f2060030154111561079b5761079a8b611e99565b5b5b5f815f01511115610848578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60675f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16835f01516040518363ffffffff1660e01b815260040161080692919061341c565b6020604051808303815f875af1158015610822573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108469190613457565b505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8883602001516040518363ffffffff1660e01b815260040161088792919061341c565b6020604051808303815f875af11580156108a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c79190613457565b506108d88989848460400151611fe0565b8673ffffffffffffffffffffffffffffffffffffffff168b7ff26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c053268e8d8a604051610923939291906134bb565b60405180910390a38a829350935050509850989650505050505050565b5f61094e8b8b86898d612124565b60655460665f9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168b61098c91906134f0565b610996919061355e565b8511156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf906135d8565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610a15939291906135f6565b6020604051808303815f875af1158015610a31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a559190613457565b5060a15f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190610aa39061362b565b91905055503360a15f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054604051602001610af892919061341c565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020015f151581526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff1681526020018b81525060a05f8381526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050808a8c73ffffffffffffffffffffffffffffffffffffffff167f2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b8a8d8d8989604051610dee9594939291906136dc565b60405180910390a49a9950505050505050505050565b610e0c612329565b5f815190505f5b81811015610f0457609e5f8581526020019081526020015f20838281518110610e3f57610e3e6132a3565b5b6020026020010151908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001015550506040518060400160405280848381518110610e9f57610e9e6132a3565b5b602002602001015160200151815260200185815250609f5f858481518110610eca57610ec96132a3565b5b60200260200101515f015181526020019081526020015f205f820151815f0155602082015181600101559050508080600101915050610e13565b50505050565b606060698054610f1990613755565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4590613755565b8015610f905780601f10610f6757610100808354040283529160200191610f90565b820191905f5260205f20905b815481529060010190602001808311610f7357829003601f168201915b5050505050905090565b610fa2612329565b610fab5f6123a7565b565b5f609c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b611007612569565b60a05f8381526020019081526020015f20604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff16151515158152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b611230612329565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361129e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611295906137cf565b60405180910390fd5b7f66656500000000000000000000000000000000000000000000000000000000008203611306578060675f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361136e578060685f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b61137a612622565b609f5f8381526020019081526020015f206040518060400160405290815f82015481526020016001820154815250509050919050565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113e0612329565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361144e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611445906137cf565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036114ca5780609c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036115465780609d5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930838383604051611579939291906137ed565b60405180910390a1505050565b5f805f60665f9054906101000a90046fffffffffffffffffffffffffffffffff16606660109054906101000a90046fffffffffffffffffffffffffffffffff16606554925092509250909192565b5f8060019054906101000a900460ff16159050808015611603575060015f8054906101000a900460ff1660ff16105b8061162f57506116123061246a565b15801561162e575060015f8054906101000a900460ff1660ff16145b5b61166e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166590613892565b60405180910390fd5b60015f806101000a81548160ff021916908360ff16021790555080156116a95760015f60016101000a81548160ff0219169083151502179055505b6001609c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620186a060658190555061138860665f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101f4606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061178561248c565b80156117dd575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516117d491906138f5565b60405180910390a15b5050565b6117e9612329565b8181606991826117fa929190613aac565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef828260405161182c929190613ba5565b60405180910390a15050565b5f609d5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b611892612329565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016118cd92919061341c565b6020604051808303815f875af11580156118e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061190d9190613457565b50505050565b5f60685f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a9061332a565b60405180910390fd5b60a05f8481526020019081526020015f20600401600c9054906101000a900460ff1615611a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fc90613392565b60405180910390fd5b600160a05f8581526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505f60a05f8581526020019081526020015f2060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a05f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60a05f8681526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660a05f8781526020019081526020015f20600601546040518363ffffffff1660e01b8152600401611b2a92919061341c565b6020604051808303815f875af1158015611b46573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b6a9190613457565b50827e7c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f83604051611b9a9190612bae565b60405180910390a26001905092915050565b5f60685f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611bdc612329565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4190613c37565b60405180910390fd5b611c53816123a7565b50565b611c5e612329565b8160665f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df8282604051611d00929190613c55565b60405180910390a15050565b611d14612640565b5f60a05f8681526020019081526020015f2060060154905060a05f8681526020019081526020015f206003015481611d4c9190613c7c565b9050606554846bffffffffffffffffffffffff1682611d6b91906134f0565b611d75919061355e565b82602001818152505060655460665f9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360200151611dc091906134f0565b611dca919061355e565b825f018181525050815f01518260200151611de59190613c7c565b826020018181525050606554606660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16835f0151611e3091906134f0565b611e3a919061355e565b8260400181815250505f8260400151835f0151611e579190613c7c565b90508315611e86578083602001818151611e719190613caf565b915081815250505f835f018181525050611e90565b80835f0181815250505b50509392505050565b5f60a05f8381526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60a05f8481526020019081526020015f2060030154905060a05f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611f5692919061341c565b6020604051808303815f875af1158015611f72573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f969190613457565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b5f8484905090505f8183611ff4919061355e565b90505f5b8281101561211b578473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88888481811061202f5761202e6132a3565b5b90506020020160208101906120449190612e54565b846040518363ffffffff1660e01b815260040161206292919061341c565b6020604051808303815f875af115801561207e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120a29190613457565b50818787838181106120b7576120b66132a3565b5b90506020020160208101906120cc9190612e54565b73ffffffffffffffffffffffffffffffffffffffff167f61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c260405160405180910390a38080600101915050611ff8565b50505050505050565b609c5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166121ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a490613d2c565b60405180910390fd5b5f84116121ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e690613d94565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361225d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225490613dfc565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c290613dfc565b60405180910390fd5b5f801b609f5f8381526020019081526020015f205f015403612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231990613e64565b60405180910390fd5b5050505050565b6123316124e4565b73ffffffffffffffffffffffffffffffffffffffff1661234f6113b0565b73ffffffffffffffffffffffffffffffffffffffff16146123a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239c90613ecc565b60405180910390fd5b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff166124da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d190613f5a565b60405180910390fd5b6124e26124eb565b565b5f33905090565b5f60019054906101000a900460ff16612539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253090613f5a565b60405180910390fd5b6125496125446124e4565b6123a7565b565b60405180604001604052805f80191681526020015f80191681525090565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f6bffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180604001604052805f80191681526020015f80191681525090565b60405180606001604052805f81526020015f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6126818161266f565b811461268b575f80fd5b50565b5f8135905061269c81612678565b92915050565b5f602082840312156126b7576126b6612667565b5b5f6126c48482850161268e565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6126ff8161266f565b82525050565b604082015f8201516127195f8501826126f6565b50602082015161272c60208501826126f6565b50505050565b5f61273d8383612705565b60408301905092915050565b5f602082019050919050565b5f61275f826126cd565b61276981856126d7565b9350612774836126e7565b805f5b838110156127a457815161278b8882612732565b975061279683612749565b925050600181019050612777565b5085935050505092915050565b5f6020820190508181035f8301526127c98184612755565b905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126127f2576127f16127d1565b5b8235905067ffffffffffffffff81111561280f5761280e6127d5565b5b60208301915083602082028301111561282b5761282a6127d9565b5b9250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61285b82612832565b9050919050565b61286b81612851565b8114612875575f80fd5b50565b5f8135905061288681612862565b92915050565b5f67ffffffffffffffff82169050919050565b6128a88161288c565b81146128b2575f80fd5b50565b5f813590506128c38161289f565b92915050565b5f8115159050919050565b6128dd816128c9565b81146128e7575f80fd5b50565b5f813590506128f8816128d4565b92915050565b5f805f805f805f8060e0898b03121561291a57612919612667565b5b5f6129278b828c0161268e565b98505060206129388b828c0161268e565b97505060406129498b828c0161268e565b965050606089013567ffffffffffffffff81111561296a5761296961266b565b5b6129768b828c016127dd565b955095505060806129898b828c01612878565b93505060a061299a8b828c016128b5565b92505060c06129ab8b828c016128ea565b9150509295985092959890939650565b6129c48161266f565b82525050565b6129d381612851565b82525050565b5f6040820190506129ec5f8301856129bb565b6129f960208301846129ca565b9392505050565b5f819050919050565b612a1281612a00565b8114612a1c575f80fd5b50565b5f81359050612a2d81612a09565b92915050565b5f6bffffffffffffffffffffffff82169050919050565b612a5381612a33565b8114612a5d575f80fd5b50565b5f81359050612a6e81612a4a565b92915050565b5f8083601f840112612a8957612a886127d1565b5b8235905067ffffffffffffffff811115612aa657612aa56127d5565b5b602083019150836001820283011115612ac257612ac16127d9565b5b9250929050565b5f805f805f805f805f806101208b8d031215612ae857612ae7612667565b5b5f612af58d828e01612878565b9a50506020612b068d828e01612a1f565b9950506040612b178d828e0161268e565b9850506060612b288d828e0161268e565b9750506080612b398d828e01612a60565b96505060a0612b4a8d828e01612878565b95505060c0612b5b8d828e01612a1f565b94505060e0612b6c8d828e01612878565b9350506101008b013567ffffffffffffffff811115612b8e57612b8d61266b565b5b612b9a8d828e01612a74565b92509250509295989b9194979a5092959850565b5f602082019050612bc15f8301846129bb565b92915050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612c0d82612bc7565b810181811067ffffffffffffffff82111715612c2c57612c2b612bd7565b5b80604052505050565b5f612c3e61265e565b9050612c4a8282612c04565b919050565b5f67ffffffffffffffff821115612c6957612c68612bd7565b5b602082029050602081019050919050565b5f80fd5b5f60408284031215612c9357612c92612c7a565b5b612c9d6040612c35565b90505f612cac8482850161268e565b5f830152506020612cbf8482850161268e565b60208301525092915050565b5f612cdd612cd884612c4f565b612c35565b90508083825260208201905060408402830185811115612d0057612cff6127d9565b5b835b81811015612d295780612d158882612c7e565b845260208401935050604081019050612d02565b5050509392505050565b5f82601f830112612d4757612d466127d1565b5b8135612d57848260208601612ccb565b91505092915050565b5f8060408385031215612d7657612d75612667565b5b5f612d838582860161268e565b925050602083013567ffffffffffffffff811115612da457612da361266b565b5b612db085828601612d33565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612df1578082015181840152602081019050612dd6565b5f8484015250505050565b5f612e0682612dba565b612e108185612dc4565b9350612e20818560208601612dd4565b612e2981612bc7565b840191505092915050565b5f6020820190508181035f830152612e4c8184612dfc565b905092915050565b5f60208284031215612e6957612e68612667565b5b5f612e7684828501612878565b91505092915050565b612e88816128c9565b82525050565b5f602082019050612ea15f830184612e7f565b92915050565b612eb081612851565b82525050565b612ebf81612a00565b82525050565b612ece81612a33565b82525050565b612edd816128c9565b82525050565b61012082015f820151612ef85f850182612ea7565b506020820151612f0b6020850182612ea7565b506040820151612f1e6040850182612ea7565b506060820151612f316060850182612eb6565b506080820151612f446080850182612ec5565b5060a0820151612f5760a0850182612ed4565b5060c0820151612f6a60c0850182612ea7565b5060e0820151612f7d60e0850182612ec5565b50610100820151612f92610100850182612eb6565b50505050565b5f61012082019050612fac5f830184612ee3565b92915050565b5f8060408385031215612fc857612fc7612667565b5b5f612fd58582860161268e565b9250506020612fe685828601612878565b9150509250929050565b604082015f8201516130045f8501826126f6565b50602082015161301760208501826126f6565b50505050565b5f6040820190506130305f830184612ff0565b92915050565b5f6020820190506130495f8301846129ca565b92915050565b5f805f6060848603121561306657613065612667565b5b5f6130738682870161268e565b935050602061308486828701612878565b9250506040613095868287016128ea565b9150509250925092565b5f6fffffffffffffffffffffffffffffffff82169050919050565b6130c38161309f565b82525050565b6130d281612a00565b82525050565b5f6060820190506130eb5f8301866130ba565b6130f860208301856130ba565b61310560408301846130c9565b949350505050565b5f8083601f840112613122576131216127d1565b5b8235905067ffffffffffffffff81111561313f5761313e6127d5565b5b60208301915083600182028301111561315b5761315a6127d9565b5b9250929050565b5f806020838503121561317857613177612667565b5b5f83013567ffffffffffffffff8111156131955761319461266b565b5b6131a18582860161310d565b92509250509250929050565b5f805f606084860312156131c4576131c3612667565b5b5f6131d186828701612878565b93505060206131e286828701612878565b92505060406131f386828701612a1f565b9150509250925092565b5f806040838503121561321357613212612667565b5b5f6132208582860161268e565b92505060206132318582860161268e565b9150509250929050565b6132448161309f565b811461324e575f80fd5b50565b5f8135905061325f8161323b565b92915050565b5f806040838503121561327b5761327a612667565b5b5f61328885828601613251565b925050602061329985828601613251565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f4f6e6c7941676772656761746f720000000000000000000000000000000000005f82015250565b5f613314600e836132d0565b915061331f826132e0565b602082019050919050565b5f6020820190508181035f83015261334181613308565b9050919050565b7f4f7264657246756c66696c6c65640000000000000000000000000000000000005f82015250565b5f61337c600e836132d0565b915061338782613348565b602082019050919050565b5f6020820190508181035f8301526133a981613370565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6133e782612a33565b91506133f283612a33565b925082820390506bffffffffffffffffffffffff811115613416576134156133b0565b5b92915050565b5f60408201905061342f5f8301856129ca565b61343c60208301846130c9565b9392505050565b5f81519050613451816128d4565b92915050565b5f6020828403121561346c5761346b612667565b5b5f61347984828501613443565b91505092915050565b5f819050919050565b5f6134a56134a061349b8461288c565b613482565b612a33565b9050919050565b6134b58161348b565b82525050565b5f6060820190506134ce5f8301866129bb565b6134db60208301856129bb565b6134e860408301846134ac565b949350505050565b5f6134fa82612a00565b915061350583612a00565b925082820261351381612a00565b9150828204841483151761352a576135296133b0565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61356882612a00565b915061357383612a00565b92508261358357613582613531565b5b828204905092915050565b7f53656e646572466565546f6f48696768000000000000000000000000000000005f82015250565b5f6135c26010836132d0565b91506135cd8261358e565b602082019050919050565b5f6020820190508181035f8301526135ef816135b6565b9050919050565b5f6060820190506136095f8301866129ca565b61361660208301856129ca565b61362360408301846130c9565b949350505050565b5f61363582612a00565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613667576136666133b0565b5b600182019050919050565b5f61368c61368761368284612a33565b613482565b612a00565b9050919050565b61369c81613672565b82525050565b828183375f83830152505050565b5f6136bb83856132d0565b93506136c88385846136a2565b6136d183612bc7565b840190509392505050565b5f6080820190506136ef5f830188613693565b6136fc60208301876129bb565b61370960408301866129bb565b818103606083015261371c8184866136b0565b90509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061376c57607f821691505b60208210810361377f5761377e613728565b5b50919050565b7f50617963726573743a207a65726f2061646472657373000000000000000000005f82015250565b5f6137b96016836132d0565b91506137c482613785565b602082019050919050565b5f6020820190508181035f8301526137e6816137ad565b9050919050565b5f6060820190506138005f8301866129bb565b61380d60208301856129ca565b61381a6040830184612e7f565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61387c602e836132d0565b915061388782613822565b604082019050919050565b5f6020820190508181035f8301526138a981613870565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f6138df6138da6138d5846138b0565b613482565b6138b9565b9050919050565b6138ef816138c5565b82525050565b5f6020820190506139085f8301846138e6565b92915050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026139747fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613939565b61397e8683613939565b95508019841693508086168417925050509392505050565b5f6139b06139ab6139a684612a00565b613482565b612a00565b9050919050565b5f819050919050565b6139c983613996565b6139dd6139d5826139b7565b848454613945565b825550505050565b5f90565b6139f16139e5565b6139fc8184846139c0565b505050565b5b81811015613a1f57613a145f826139e9565b600181019050613a02565b5050565b601f821115613a6457613a3581613918565b613a3e8461392a565b81016020851015613a4d578190505b613a61613a598561392a565b830182613a01565b50505b505050565b5f82821c905092915050565b5f613a845f1984600802613a69565b1980831691505092915050565b5f613a9c8383613a75565b9150826002028217905092915050565b613ab6838361390e565b67ffffffffffffffff811115613acf57613ace612bd7565b5b613ad98254613755565b613ae4828285613a23565b5f601f831160018114613b11575f8415613aff578287013590505b613b098582613a91565b865550613b70565b601f198416613b1f86613918565b5f5b82811015613b4657848901358255600182019150602085019450602081019050613b21565b86831015613b635784890135613b5f601f891682613a75565b8355505b6001600288020188555050505b50505050505050565b5f613b848385612dc4565b9350613b918385846136a2565b613b9a83612bc7565b840190509392505050565b5f6020820190508181035f830152613bbe818486613b79565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613c216026836132d0565b9150613c2c82613bc7565b604082019050919050565b5f6020820190508181035f830152613c4e81613c15565b9050919050565b5f604082019050613c685f8301856130ba565b613c7560208301846130ba565b9392505050565b5f613c8682612a00565b9150613c9183612a00565b9250828203905081811115613ca957613ca86133b0565b5b92915050565b5f613cb982612a00565b9150613cc483612a00565b9250828201905080821115613cdc57613cdb6133b0565b5b92915050565b7f546f6b656e4e6f74537570706f727465640000000000000000000000000000005f82015250565b5f613d166011836132d0565b9150613d2182613ce2565b602082019050919050565b5f6020820190508181035f830152613d4381613d0a565b9050919050565b7f416d6f756e7449735a65726f00000000000000000000000000000000000000005f82015250565b5f613d7e600c836132d0565b9150613d8982613d4a565b602082019050919050565b5f6020820190508181035f830152613dab81613d72565b9050919050565b7f5468726f775a65726f41646472657373000000000000000000000000000000005f82015250565b5f613de66010836132d0565b9150613df182613db2565b602082019050919050565b5f6020820190508181035f830152613e1381613dda565b9050919050565b7f496e76616c6964496e737469747574696f6e436f6465000000000000000000005f82015250565b5f613e4e6016836132d0565b9150613e5982613e1a565b602082019050919050565b5f6020820190508181035f830152613e7b81613e42565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613eb66020836132d0565b9150613ec182613e82565b602082019050919050565b5f6020820190508181035f830152613ee381613eaa565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f613f44602b836132d0565b9150613f4f82613eea565b604082019050919050565b5f6020820190508181035f830152613f7181613f38565b905091905056fea26469706673582212208e111ed39528b11841d6e58165f5af7e3fd7e80f127edf20d8f0764eb414172d64736f6c63430008150033",
}

// PaycrestOrderABI is the input ABI used to generate the binding from.
// Deprecated: Use PaycrestOrderMetaData.ABI instead.
var PaycrestOrderABI = PaycrestOrderMetaData.ABI

// PaycrestOrderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaycrestOrderMetaData.Bin instead.
var PaycrestOrderBin = PaycrestOrderMetaData.Bin

// DeployPaycrestOrder deploys a new Ethereum contract, binding an instance of PaycrestOrder to it.
func DeployPaycrestOrder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PaycrestOrder, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaycrestOrderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// PaycrestOrder is an auto generated Go binding around an Ethereum contract.
type PaycrestOrder struct {
	PaycrestOrderCaller     // Read-only binding to the contract
	PaycrestOrderTransactor // Write-only binding to the contract
	PaycrestOrderFilterer   // Log filterer for contract events
}

// PaycrestOrderCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaycrestOrderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaycrestOrderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaycrestOrderSession struct {
	Contract     *PaycrestOrder    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaycrestOrderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaycrestOrderCallerSession struct {
	Contract *PaycrestOrderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PaycrestOrderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaycrestOrderTransactorSession struct {
	Contract     *PaycrestOrderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PaycrestOrderRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaycrestOrderRaw struct {
	Contract *PaycrestOrder // Generic contract binding to access the raw methods on
}

// PaycrestOrderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaycrestOrderCallerRaw struct {
	Contract *PaycrestOrderCaller // Generic read-only contract binding to access the raw methods on
}

// PaycrestOrderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactorRaw struct {
	Contract *PaycrestOrderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaycrestOrder creates a new instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrder(address common.Address, backend bind.ContractBackend) (*PaycrestOrder, error) {
	contract, err := bindPaycrestOrder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// NewPaycrestOrderCaller creates a new read-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderCaller(address common.Address, caller bind.ContractCaller) (*PaycrestOrderCaller, error) {
	contract, err := bindPaycrestOrder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderCaller{contract: contract}, nil
}

// NewPaycrestOrderTransactor creates a new write-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderTransactor(address common.Address, transactor bind.ContractTransactor) (*PaycrestOrderTransactor, error) {
	contract, err := bindPaycrestOrder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransactor{contract: contract}, nil
}

// NewPaycrestOrderFilterer creates a new log filterer instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderFilterer(address common.Address, filterer bind.ContractFilterer) (*PaycrestOrderFilterer, error) {
	contract, err := bindPaycrestOrder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderFilterer{contract: contract}, nil
}

// bindPaycrestOrder binds a generic wrapper to an already deployed contract.
func bindPaycrestOrder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.PaycrestOrderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transact(opts, method, params...)
}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_PaycrestOrder *PaycrestOrderCaller) GetAggregator(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getAggregator")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_PaycrestOrder *PaycrestOrderSession) GetAggregator() ([]byte, error) {
	return _PaycrestOrder.Contract.GetAggregator(&_PaycrestOrder.CallOpts)
}

// GetAggregator is a free data retrieval call binding the contract method 0x3ad59dbc.
//
// Solidity: function getAggregator() view returns(bytes)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetAggregator() ([]byte, error) {
	return _PaycrestOrder.Contract.GetAggregator(&_PaycrestOrder.CallOpts)
}

// GetAggregatorAddress is a free data retrieval call binding the contract method 0xe8d6e0de.
//
// Solidity: function getAggregatorAddress() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) GetAggregatorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getAggregatorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAggregatorAddress is a free data retrieval call binding the contract method 0xe8d6e0de.
//
// Solidity: function getAggregatorAddress() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) GetAggregatorAddress() (common.Address, error) {
	return _PaycrestOrder.Contract.GetAggregatorAddress(&_PaycrestOrder.CallOpts)
}

// GetAggregatorAddress is a free data retrieval call binding the contract method 0xe8d6e0de.
//
// Solidity: function getAggregatorAddress() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetAggregatorAddress() (common.Address, error) {
	return _PaycrestOrder.Contract.GetAggregatorAddress(&_PaycrestOrder.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderCaller) GetFeeDetails(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getFeeDetails")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderSession) GetFeeDetails() (*big.Int, *big.Int, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetFeeDetails() (*big.Int, *big.Int, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IPaycrestOrder, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IPaycrestOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IPaycrestOrder)).(*IPaycrestOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutionName(opts *bind.CallOpts, code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutionName", code)

	if err != nil {
		return *new(PaycrestSettingManagerInstitutionByCode), err
	}

	out0 := *abi.ConvertType(out[0], new(PaycrestSettingManagerInstitutionByCode)).(*PaycrestSettingManagerInstitutionByCode)

	return out0, err

}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutions(opts *bind.CallOpts, currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutions", currency)

	if err != nil {
		return *new([]PaycrestSettingManagerInstitution), err
	}

	out0 := *abi.ConvertType(out[0], new([]PaycrestSettingManagerInstitution)).(*[]PaycrestSettingManagerInstitution)

	return out0, err

}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) GetWhitelistedStatus(opts *bind.CallOpts, sender common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getWhitelistedStatus", sender)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "createOrder", _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x2654ec7e.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, bytes32 _label, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _label [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _institutionCode, _label, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) Initialize(opts *bind.TransactOpts, _usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "initialize", _usdc)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderSession) Initialize(_usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Initialize(&_PaycrestOrder.TransactOpts, _usdc)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) Initialize(_usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Initialize(&_PaycrestOrder.TransactOpts, _usdc)
}

// Refund is a paid mutator transaction binding the contract method 0xe4683a79.
//
// Solidity: function refund(bytes32 _orderId, bytes32 _label) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactor) Refund(opts *bind.TransactOpts, _orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "refund", _orderId, _label)
}

// Refund is a paid mutator transaction binding the contract method 0xe4683a79.
//
// Solidity: function refund(bytes32 _orderId, bytes32 _label) returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) Refund(_orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId, _label)
}

// Refund is a paid mutator transaction binding the contract method 0xe4683a79.
//
// Solidity: function refund(bytes32 _orderId, bytes32 _label) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Refund(_orderId [32]byte, _label [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId, _label)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SetSupportedInstitutions(opts *bind.TransactOpts, currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "setSupportedInstitutions", currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0x137764fb.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner) returns(bytes32, address)
func (_PaycrestOrder *PaycrestOrderTransactor) Settle(opts *bind.TransactOpts, _splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent uint64, _isPartner bool) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settle", _splitOrderId, _orderId, _label, _validators, _liquidityProvider, _settlePercent, _isPartner)
}

// Settle is a paid mutator transaction binding the contract method 0x137764fb.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner) returns(bytes32, address)
func (_PaycrestOrder *PaycrestOrderSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent uint64, _isPartner bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _splitOrderId, _orderId, _label, _validators, _liquidityProvider, _settlePercent, _isPartner)
}

// Settle is a paid mutator transaction binding the contract method 0x137764fb.
//
// Solidity: function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner) returns(bytes32, address)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Settle(_splitOrderId [32]byte, _orderId [32]byte, _label [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent uint64, _isPartner bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _splitOrderId, _orderId, _label, _validators, _liquidityProvider, _settlePercent, _isPartner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateProtocolAddresses(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateProtocolAddresses", what, value)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateProtocolAddresses(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolAddresses(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateProtocolAddresses is a paid mutator transaction binding the contract method 0x79a0effb.
//
// Solidity: function updateProtocolAddresses(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateProtocolAddresses(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolAddresses(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateProtocolAggregator(opts *bind.TransactOpts, aggregator []byte) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateProtocolAggregator", aggregator)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateProtocolAggregator(aggregator []byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolAggregator(&_PaycrestOrder.TransactOpts, aggregator)
}

// UpdateProtocolAggregator is a paid mutator transaction binding the contract method 0xcb79455b.
//
// Solidity: function updateProtocolAggregator(bytes aggregator) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateProtocolAggregator(aggregator []byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolAggregator(&_PaycrestOrder.TransactOpts, aggregator)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateProtocolFees(opts *bind.TransactOpts, _protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateProtocolFees", _protocolFeePercent, _validatorFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateProtocolFees(_protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _validatorFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateProtocolFees(_protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _validatorFeePercent)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _token, address _recipient, uint256 _amount) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) Withdraw(opts *bind.TransactOpts, _token common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "withdraw", _token, _recipient, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _token, address _recipient, uint256 _amount) returns()
func (_PaycrestOrder *PaycrestOrderSession) Withdraw(_token common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Withdraw(&_PaycrestOrder.TransactOpts, _token, _recipient, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _token, address _recipient, uint256 _amount) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) Withdraw(_token common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Withdraw(&_PaycrestOrder.TransactOpts, _token, _recipient, _amount)
}

// PaycrestOrderDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the PaycrestOrder contract.
type PaycrestOrderDepositIterator struct {
	Event *PaycrestOrderDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderDeposit represents a Deposit event raised by the PaycrestOrder contract.
type PaycrestOrderDeposit struct {
	Token           common.Address
	Amount          *big.Int
	OrderId         [32]byte
	Rate            *big.Int
	InstitutionCode [32]byte
	Label           [32]byte
	MessageHash     string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterDeposit(opts *bind.FilterOpts, token []common.Address, amount []*big.Int, orderId [][32]byte) (*PaycrestOrderDepositIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Deposit", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderDepositIterator{contract: _PaycrestOrder.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PaycrestOrderDeposit, token []common.Address, amount []*big.Int, orderId [][32]byte) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Deposit", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderDeposit)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseDeposit(log types.Log) (*PaycrestOrderDeposit, error) {
	event := new(PaycrestOrderDeposit)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PaycrestOrder contract.
type PaycrestOrderInitializedIterator struct {
	Event *PaycrestOrderInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderInitialized represents a Initialized event raised by the PaycrestOrder contract.
type PaycrestOrderInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterInitialized(opts *bind.FilterOpts) (*PaycrestOrderInitializedIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderInitializedIterator{contract: _PaycrestOrder.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PaycrestOrderInitialized) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderInitialized)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseInitialized(log types.Log) (*PaycrestOrderInitialized, error) {
	event := new(PaycrestOrderInitialized)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferredIterator struct {
	Event *PaycrestOrderOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderOwnershipTransferred represents a OwnershipTransferred event raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaycrestOrderOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderOwnershipTransferredIterator{contract: _PaycrestOrder.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaycrestOrderOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderOwnershipTransferred)
				if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseOwnershipTransferred(log types.Log) (*PaycrestOrderOwnershipTransferred, error) {
	event := new(PaycrestOrderOwnershipTransferred)
	if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderPaycrestFeesIterator is returned from FilterPaycrestFees and is used to iterate over the raw logs and unpacked data for PaycrestFees events raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFeesIterator struct {
	Event *PaycrestOrderPaycrestFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderPaycrestFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderPaycrestFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderPaycrestFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderPaycrestFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderPaycrestFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderPaycrestFees represents a PaycrestFees event raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFees struct {
	ProtocolFee         *big.Int
	ValidatorFeePercent *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterPaycrestFees is a free log retrieval operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterPaycrestFees(opts *bind.FilterOpts) (*PaycrestOrderPaycrestFeesIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderPaycrestFeesIterator{contract: _PaycrestOrder.contract, event: "PaycrestFees", logs: logs, sub: sub}, nil
}

// WatchPaycrestFees is a free log subscription operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchPaycrestFees(opts *bind.WatchOpts, sink chan<- *PaycrestOrderPaycrestFees) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderPaycrestFees)
				if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaycrestFees is a log parse operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) ParsePaycrestFees(log types.Log) (*PaycrestOrderPaycrestFees, error) {
	event := new(PaycrestOrderPaycrestFees)
	if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderRefundedIterator is returned from FilterRefunded and is used to iterate over the raw logs and unpacked data for Refunded events raised by the PaycrestOrder contract.
type PaycrestOrderRefundedIterator struct {
	Event *PaycrestOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderRefunded represents a Refunded event raised by the PaycrestOrder contract.
type PaycrestOrderRefunded struct {
	OrderId [32]byte
	Label   [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRefunded is a free log retrieval operation binding the contract event 0x007c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f.
//
// Solidity: event Refunded(bytes32 indexed orderId, bytes32 label)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*PaycrestOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderRefundedIterator{contract: _PaycrestOrder.contract, event: "Refunded", logs: logs, sub: sub}, nil
}

// WatchRefunded is a free log subscription operation binding the contract event 0x007c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f.
//
// Solidity: event Refunded(bytes32 indexed orderId, bytes32 label)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchRefunded(opts *bind.WatchOpts, sink chan<- *PaycrestOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderRefunded)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefunded is a log parse operation binding the contract event 0x007c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f.
//
// Solidity: event Refunded(bytes32 indexed orderId, bytes32 label)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseRefunded(log types.Log) (*PaycrestOrderRefunded, error) {
	event := new(PaycrestOrderRefunded)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderRewardValidatorIterator is returned from FilterRewardValidator and is used to iterate over the raw logs and unpacked data for RewardValidator events raised by the PaycrestOrder contract.
type PaycrestOrderRewardValidatorIterator struct {
	Event *PaycrestOrderRewardValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderRewardValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderRewardValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderRewardValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderRewardValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderRewardValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderRewardValidator represents a RewardValidator event raised by the PaycrestOrder contract.
type PaycrestOrderRewardValidator struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewardValidator is a free log retrieval operation binding the contract event 0x61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2.
//
// Solidity: event RewardValidator(address indexed validator, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterRewardValidator(opts *bind.FilterOpts, validator []common.Address, amount []*big.Int) (*PaycrestOrderRewardValidatorIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "RewardValidator", validatorRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderRewardValidatorIterator{contract: _PaycrestOrder.contract, event: "RewardValidator", logs: logs, sub: sub}, nil
}

// WatchRewardValidator is a free log subscription operation binding the contract event 0x61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2.
//
// Solidity: event RewardValidator(address indexed validator, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchRewardValidator(opts *bind.WatchOpts, sink chan<- *PaycrestOrderRewardValidator, validator []common.Address, amount []*big.Int) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "RewardValidator", validatorRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderRewardValidator)
				if err := _PaycrestOrder.contract.UnpackLog(event, "RewardValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardValidator is a log parse operation binding the contract event 0x61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2.
//
// Solidity: event RewardValidator(address indexed validator, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseRewardValidator(log types.Log) (*PaycrestOrderRewardValidator, error) {
	event := new(PaycrestOrderRewardValidator)
	if err := _PaycrestOrder.contract.UnpackLog(event, "RewardValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSetAggregatorIterator is returned from FilterSetAggregator and is used to iterate over the raw logs and unpacked data for SetAggregator events raised by the PaycrestOrder contract.
type PaycrestOrderSetAggregatorIterator struct {
	Event *PaycrestOrderSetAggregator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSetAggregatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSetAggregator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSetAggregator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSetAggregatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSetAggregatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSetAggregator represents a SetAggregator event raised by the PaycrestOrder contract.
type PaycrestOrderSetAggregator struct {
	Aggregator []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetAggregator is a free log retrieval operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSetAggregator(opts *bind.FilterOpts) (*PaycrestOrderSetAggregatorIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SetAggregator")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSetAggregatorIterator{contract: _PaycrestOrder.contract, event: "SetAggregator", logs: logs, sub: sub}, nil
}

// WatchSetAggregator is a free log subscription operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSetAggregator(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSetAggregator) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SetAggregator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSetAggregator)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SetAggregator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAggregator is a log parse operation binding the contract event 0x6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef.
//
// Solidity: event SetAggregator(bytes aggregator)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSetAggregator(log types.Log) (*PaycrestOrderSetAggregator, error) {
	event := new(PaycrestOrderSetAggregator)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SetAggregator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSetFeeRecipientIterator is returned from FilterSetFeeRecipient and is used to iterate over the raw logs and unpacked data for SetFeeRecipient events raised by the PaycrestOrder contract.
type PaycrestOrderSetFeeRecipientIterator struct {
	Event *PaycrestOrderSetFeeRecipient // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSetFeeRecipientIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSetFeeRecipient)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSetFeeRecipient)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSetFeeRecipientIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSetFeeRecipientIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSetFeeRecipient represents a SetFeeRecipient event raised by the PaycrestOrder contract.
type PaycrestOrderSetFeeRecipient struct {
	FeeRecipient common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetFeeRecipient is a free log retrieval operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address feeRecipient)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSetFeeRecipient(opts *bind.FilterOpts) (*PaycrestOrderSetFeeRecipientIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SetFeeRecipient")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSetFeeRecipientIterator{contract: _PaycrestOrder.contract, event: "SetFeeRecipient", logs: logs, sub: sub}, nil
}

// WatchSetFeeRecipient is a free log subscription operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address feeRecipient)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSetFeeRecipient(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSetFeeRecipient) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SetFeeRecipient")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSetFeeRecipient)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFeeRecipient is a log parse operation binding the contract event 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73.
//
// Solidity: event SetFeeRecipient(address feeRecipient)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSetFeeRecipient(log types.Log) (*PaycrestOrderSetFeeRecipient, error) {
	event := new(PaycrestOrderSetFeeRecipient)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SetFeeRecipient", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBoolIterator struct {
	Event *PaycrestOrderSettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettingManagerBool represents a SettingManagerBool event raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettingManagerBool(opts *bind.FilterOpts) (*PaycrestOrderSettingManagerBoolIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettingManagerBoolIterator{contract: _PaycrestOrder.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettingManagerBool) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettingManagerBool)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettingManagerBool(log types.Log) (*PaycrestOrderSettingManagerBool, error) {
	event := new(PaycrestOrderSettingManagerBool)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettledIterator is returned from FilterSettled and is used to iterate over the raw logs and unpacked data for Settled events raised by the PaycrestOrder contract.
type PaycrestOrderSettledIterator struct {
	Event *PaycrestOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettled represents a Settled event raised by the PaycrestOrder contract.
type PaycrestOrderSettled struct {
	SplitOrderId      [32]byte
	OrderId           [32]byte
	Label             [32]byte
	LiquidityProvider common.Address
	SettlePercent     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSettled is a free log retrieval operation binding the contract event 0xf26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326.
//
// Solidity: event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*PaycrestOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettledIterator{contract: _PaycrestOrder.contract, event: "Settled", logs: logs, sub: sub}, nil
}

// WatchSettled is a free log subscription operation binding the contract event 0xf26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326.
//
// Solidity: event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettled(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettled)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettled is a log parse operation binding the contract event 0xf26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326.
//
// Solidity: event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettled(log types.Log) (*PaycrestOrderSettled, error) {
	event := new(PaycrestOrderSettled)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderTransferSenderFeeIterator is returned from FilterTransferSenderFee and is used to iterate over the raw logs and unpacked data for TransferSenderFee events raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFeeIterator struct {
	Event *PaycrestOrderTransferSenderFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderTransferSenderFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderTransferSenderFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderTransferSenderFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderTransferSenderFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderTransferSenderFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderTransferSenderFee represents a TransferSenderFee event raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFee struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferSenderFee is a free log retrieval operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterTransferSenderFee(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*PaycrestOrderTransferSenderFeeIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransferSenderFeeIterator{contract: _PaycrestOrder.contract, event: "TransferSenderFee", logs: logs, sub: sub}, nil
}

// WatchTransferSenderFee is a free log subscription operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchTransferSenderFee(opts *bind.WatchOpts, sink chan<- *PaycrestOrderTransferSenderFee, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderTransferSenderFee)
				if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSenderFee is a log parse operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseTransferSenderFee(log types.Log) (*PaycrestOrderTransferSenderFee, error) {
	event := new(PaycrestOrderTransferSenderFee)
	if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
