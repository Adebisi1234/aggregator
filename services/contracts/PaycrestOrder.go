// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPaycrestOrder is an auto generated low-level Go binding around an user-defined struct.
type IPaycrestOrder struct {
	Seller             common.Address
	Token              common.Address
	SenderFeeRecipient common.Address
	SenderFee          *big.Int
	Rate               *big.Int
	IsFulfilled        bool
	RefundAddress      common.Address
	CurrentBPS         *big.Int
	Amount             *big.Int
}

// PaycrestSettingManagerInstitution is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitution struct {
	Code [32]byte
	Name [32]byte
}

// PaycrestSettingManagerInstitutionByCode is an auto generated low-level Go binding around an user-defined struct.
type PaycrestSettingManagerInstitutionByCode struct {
	Name     [32]byte
	Currency [32]byte
}

// PaycrestOrderMetaData contains all meta data concerning the PaycrestOrder contract.
var PaycrestOrderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"structPaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_protocolFeePercent\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b50620000216200002760201b60201c565b620001c6565b5f60019054906101000a900460ff161562000079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000070906200016e565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff1614620000e85760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000df9190620001ab565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f62000156602783620000ea565b91506200016382620000fa565b604082019050919050565b5f6020820190508181035f830152620001878162000148565b9050919050565b5f60ff82169050919050565b620001a5816200018e565b82525050565b5f602082019050620001c05f8301846200019a565b92915050565b6134ed80620001d45f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c80638da5cb5b116100a0578063c4d66de81161006f578063c4d66de8146102f2578063d12ff20a1461030e578063d8e8de341461033e578063f2fde38b1461036e578063f5326b191461038a57610114565b80638da5cb5b1461026857806399e3c0b414610286578063b810c636146102a2578063bee1ddd0146102c257610114565b8063715018a6116100e7578063715018a61461019e5780637249fbb6146101a857806375151b63146101d8578063768c6ec01461020857806387490d861461023857610114565b806302621338146101185780632ebc53561461014857806332200882146101665780633d8f8fb214610182575b5f80fd5b610132600480360381019061012d9190612436565b6103a6565b60405161013f9190612545565b60405180910390f35b6101506104da565b60405161015d91906125a4565b60405180910390f35b610180600480360381019061017b919061275e565b610502565b005b61019c600480360381019061019791906127e2565b610608565b005b6101a66107b6565b005b6101c260048036038101906101bd9190612436565b6107c9565b6040516101cf919061283a565b60405180910390f35b6101f260048036038101906101ed9190612853565b610a45565b6040516101ff919061283a565b60405180910390f35b610222600480360381019061021d9190612436565b610a97565b60405161022f919061298f565b60405180910390f35b610252600480360381019061024d9190612436565b610cc0565b60405161025f91906129d6565b60405180910390f35b610270610cfe565b60405161027d91906125a4565b60405180910390f35b6102a0600480360381019061029b9190612a19565b610d26565b005b6102aa610f0c565b6040516102b993929190612aa2565b60405180910390f35b6102dc60048036038101906102d79190612b5a565b610f5a565b6040516102e9919061283a565b60405180910390f35b61030c60048036038101906103079190612853565b611481565b005b61032860048036038101906103239190612c5d565b61168e565b6040516103359190612d3c565b60405180910390f35b61035860048036038101906103539190612853565b611abb565b604051610365919061283a565b60405180910390f35b61038860048036038101906103839190612853565b611b0d565b005b6103a4600480360381019061039f9190612d7f565b611b8f565b005b60605f606c5f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b8282101561041c578382905f5260205f2090600202016040518060400160405290815f8201548152602001600182015481525050815260200190600101906103d9565b5050505090505f815190505f8167ffffffffffffffff811115610442576104416125d1565b5b60405190808252806020026020018201604052801561047b57816020015b6104686122df565b8152602001906001900390816104605790505b5090505f5b828110156104ce5783818151811061049b5761049a612dbd565b5b60200260200101518282815181106104b6576104b5612dbd565b5b60200260200101819052508080600101915050610480565b50809350505050919050565b5f60695f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61050a611c45565b5f815190505f5b8181101561060257606c5f8581526020019081526020015f2083828151811061053d5761053c612dbd565b5b6020026020010151908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0155602082015181600101555050604051806040016040528084838151811061059d5761059c612dbd565b5b602002602001015160200151815260200185815250606d5f8584815181106105c8576105c7612dbd565b5b60200260200101515f015181526020019081526020015f205f820151815f0155602082015181600101559050508080600101915050610511565b50505050565b610610611c45565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610675576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036106dd578060675f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f72000000000000000000000000000000000000000000008203610749578060695f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107b2565b7f7374616b6500000000000000000000000000000000000000000000000000000082036107b1578060685f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b6107be611c45565b6107c75f611cc3565b565b5f60695f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610850576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e5f8381526020019081526020015f20600401600c9054906101000a900460ff16156108a9576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606e5f8481526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505f606e5f8481526020019081526020015f2060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606e5f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606e5f8581526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606e5f8681526020019081526020015f20600601546040518363ffffffff1660e01b81526004016109ce929190612dea565b6020604051808303815f875af11580156109ea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0e9190612e25565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b5f606a5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b610a9f6122fd565b606e5f8381526020019081526020015f20604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015f9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff16151515158152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b610cc86123b6565b606d5f8381526020019081526020015f206040518060400160405290815f82015481526020016001820154815250509050919050565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d2e611c45565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d93576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303610e0f5780606a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b7f77686974656c69737400000000000000000000000000000000000000000000008303610e8f5780606b5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610ecc565b826040517f48bae5b8000000000000000000000000000000000000000000000000000000008152600401610ec39190612d3c565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930838383604051610eff93929190612e50565b60405180910390a1505050565b5f805f60665f9054906101000a90046fffffffffffffffffffffffffffffffff16606660109054906101000a90046fffffffffffffffffffffffffffffffff16606554925092509250909192565b5f60695f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe1576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e5f8781526020019081526020015f20600401600c9054906101000a900460ff161561103a576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f606e5f8881526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082606e5f8981526020019081526020015f2060050160148282829054906101000a90046bffffffffffffffffffffffff166110ac9190612eb2565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505f606e5f8981526020019081526020015f2060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1603611149576001606e5f8981526020019081526020015f20600401600c6101000a81548160ff0219169083151502179055505b5f6111548885611d86565b90505f606e5f8a81526020019081526020015f206003015490505f8111156111805761117f89611edf565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60675f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16845f01516040518363ffffffff1660e01b81526004016111df929190612dea565b6020604051808303815f875af11580156111fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061121f9190612e25565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8784602001516040518363ffffffff1660e01b815260040161125f929190612dea565b6020604051808303815f875af115801561127b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061129f9190612e25565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60685f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604001516040518363ffffffff1660e01b8152600401611300929190612dea565b6020604051808303815f875af115801561131c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113409190612e25565b505f60685f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e02d3a8b868c8c88604001516040518663ffffffff1660e01b81526004016113a8959493929190612f9e565b6020604051808303815f875af11580156113c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e89190612e25565b905080611421576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168a7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33886040516114689190612ff9565b60405180910390a3600194505050505095945050505050565b5f8060019054906101000a900460ff161590508080156114b0575060015f8054906101000a900460ff1660ff16105b806114dc57506114bf30612026565b1580156114db575060015f8054906101000a900460ff1660ff16145b5b61151b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151290613092565b60405180910390fd5b60015f806101000a81548160ff021916908360ff16021790555080156115565760015f60016101000a81548160ff0219169083151502179055505b6001606a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620186a060658190555061138860665f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101f4606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611632612048565b801561168a575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161168191906130fe565b60405180910390a15b5050565b5f61169c8a8a86898c6120a0565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016116d993929190613117565b6020604051808303815f875af11580156116f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117199190612e25565b50606f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906117679061314c565b919050555033606f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516020016117bc929190612dea565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020015f151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606e5f8381526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015f6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610100820151816006015590505080898b73ffffffffffffffffffffffffffffffffffffffff167f34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a40428a8c8888604051611aa694939291906131fd565b60405180910390a49998505050505050505050565b5f606b5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b611b15611c45565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7a906132ab565b60405180910390fd5b611b8c81611cc3565b50565b611b97611c45565b8160665f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df8282604051611c399291906132c9565b60405180910390a15050565b611c4d612278565b73ffffffffffffffffffffffffffffffffffffffff16611c6b610cfe565b73ffffffffffffffffffffffffffffffffffffffff1614611cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb89061333a565b60405180910390fd5b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611d8e6123d4565b5f606e5f8581526020019081526020015f20600601549050606e5f8581526020019081526020015f206003015481611dc69190613358565b9050606554836bffffffffffffffffffffffff1682611de5919061338b565b611def91906133f9565b82602001818152505060655460665f9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360200151611e3a919061338b565b611e4491906133f9565b825f018181525050815f01518260200151611e5f9190613358565b826020018181525050606554606660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16835f0151611eaa919061338b565b611eb491906133f9565b8260400181815250508160400151825f0151611ed09190613358565b825f0181815250505092915050565b5f606e5f8381526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f606e5f8481526020019081526020015f20600301549050606e5f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611f9c929190612dea565b6020604051808303815f875af1158015611fb8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fdc9190612e25565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16612096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208d90613499565b60405180910390fd5b61209e61227f565b565b606a5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16612120576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8403612159576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036121be576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612223576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f801b606d5f8381526020019081526020015f205f015403612271576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b5f33905090565b5f60019054906101000a900460ff166122cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c490613499565b60405180910390fd5b6122dd6122d8612278565b611cc3565b565b60405180604001604052805f80191681526020015f80191681525090565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f6bffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6bffffffffffffffffffffffff1681526020015f81525090565b60405180604001604052805f80191681526020015f80191681525090565b60405180606001604052805f81526020015f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61241581612403565b811461241f575f80fd5b50565b5f813590506124308161240c565b92915050565b5f6020828403121561244b5761244a6123fb565b5b5f61245884828501612422565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61249381612403565b82525050565b604082015f8201516124ad5f85018261248a565b5060208201516124c0602085018261248a565b50505050565b5f6124d18383612499565b60408301905092915050565b5f602082019050919050565b5f6124f382612461565b6124fd818561246b565b93506125088361247b565b805f5b8381101561253857815161251f88826124c6565b975061252a836124dd565b92505060018101905061250b565b5085935050505092915050565b5f6020820190508181035f83015261255d81846124e9565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61258e82612565565b9050919050565b61259e81612584565b82525050565b5f6020820190506125b75f830184612595565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612607826125c1565b810181811067ffffffffffffffff82111715612626576126256125d1565b5b80604052505050565b5f6126386123f2565b905061264482826125fe565b919050565b5f67ffffffffffffffff821115612663576126626125d1565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f6040828403121561269157612690612678565b5b61269b604061262f565b90505f6126aa84828501612422565b5f8301525060206126bd84828501612422565b60208301525092915050565b5f6126db6126d684612649565b61262f565b905080838252602082019050604084028301858111156126fe576126fd612674565b5b835b818110156127275780612713888261267c565b845260208401935050604081019050612700565b5050509392505050565b5f82601f830112612745576127446125bd565b5b81356127558482602086016126c9565b91505092915050565b5f8060408385031215612774576127736123fb565b5b5f61278185828601612422565b925050602083013567ffffffffffffffff8111156127a2576127a16123ff565b5b6127ae85828601612731565b9150509250929050565b6127c181612584565b81146127cb575f80fd5b50565b5f813590506127dc816127b8565b92915050565b5f80604083850312156127f8576127f76123fb565b5b5f61280585828601612422565b9250506020612816858286016127ce565b9150509250929050565b5f8115159050919050565b61283481612820565b82525050565b5f60208201905061284d5f83018461282b565b92915050565b5f60208284031215612868576128676123fb565b5b5f612875848285016127ce565b91505092915050565b61288781612584565b82525050565b5f819050919050565b61289f8161288d565b82525050565b5f6bffffffffffffffffffffffff82169050919050565b6128c5816128a5565b82525050565b6128d481612820565b82525050565b61012082015f8201516128ef5f85018261287e565b506020820151612902602085018261287e565b506040820151612915604085018261287e565b5060608201516129286060850182612896565b50608082015161293b60808501826128bc565b5060a082015161294e60a08501826128cb565b5060c082015161296160c085018261287e565b5060e082015161297460e08501826128bc565b50610100820151612989610100850182612896565b50505050565b5f610120820190506129a35f8301846128da565b92915050565b604082015f8201516129bd5f85018261248a565b5060208201516129d0602085018261248a565b50505050565b5f6040820190506129e95f8301846129a9565b92915050565b6129f881612820565b8114612a02575f80fd5b50565b5f81359050612a13816129ef565b92915050565b5f805f60608486031215612a3057612a2f6123fb565b5b5f612a3d86828701612422565b9350506020612a4e868287016127ce565b9250506040612a5f86828701612a05565b9150509250925092565b5f6fffffffffffffffffffffffffffffffff82169050919050565b612a8d81612a69565b82525050565b612a9c8161288d565b82525050565b5f606082019050612ab55f830186612a84565b612ac26020830185612a84565b612acf6040830184612a93565b949350505050565b5f80fd5b5f8083601f840112612af057612aef6125bd565b5b8235905067ffffffffffffffff811115612b0d57612b0c612ad7565b5b602083019150836020820283011115612b2957612b28612674565b5b9250929050565b612b39816128a5565b8114612b43575f80fd5b50565b5f81359050612b5481612b30565b92915050565b5f805f805f60808688031215612b7357612b726123fb565b5b5f612b8088828901612422565b955050602086013567ffffffffffffffff811115612ba157612ba06123ff565b5b612bad88828901612adb565b94509450506040612bc0888289016127ce565b9250506060612bd188828901612b46565b9150509295509295909350565b612be78161288d565b8114612bf1575f80fd5b50565b5f81359050612c0281612bde565b92915050565b5f8083601f840112612c1d57612c1c6125bd565b5b8235905067ffffffffffffffff811115612c3a57612c39612ad7565b5b602083019150836001820283011115612c5657612c55612674565b5b9250929050565b5f805f805f805f805f6101008a8c031215612c7b57612c7a6123fb565b5b5f612c888c828d016127ce565b9950506020612c998c828d01612bf4565b9850506040612caa8c828d01612422565b9750506060612cbb8c828d01612b46565b9650506080612ccc8c828d016127ce565b95505060a0612cdd8c828d01612bf4565b94505060c0612cee8c828d016127ce565b93505060e08a013567ffffffffffffffff811115612d0f57612d0e6123ff565b5b612d1b8c828d01612c08565b92509250509295985092959850929598565b612d3681612403565b82525050565b5f602082019050612d4f5f830184612d2d565b92915050565b612d5e81612a69565b8114612d68575f80fd5b50565b5f81359050612d7981612d55565b92915050565b5f8060408385031215612d9557612d946123fb565b5b5f612da285828601612d6b565b9250506020612db385828601612d6b565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f604082019050612dfd5f830185612595565b612e0a6020830184612a93565b9392505050565b5f81519050612e1f816129ef565b92915050565b5f60208284031215612e3a57612e396123fb565b5b5f612e4784828501612e11565b91505092915050565b5f606082019050612e635f830186612d2d565b612e706020830185612595565b612e7d604083018461282b565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612ebc826128a5565b9150612ec7836128a5565b925082820390506bffffffffffffffffffffffff811115612eeb57612eea612e85565b5b92915050565b5f82825260208201905092915050565b5f819050919050565b5f612f15838361287e565b60208301905092915050565b5f612f2f60208401846127ce565b905092915050565b5f602082019050919050565b5f612f4e8385612ef1565b9350612f5982612f01565b805f5b85811015612f9157612f6e8284612f21565b612f788882612f0a565b9750612f8383612f37565b925050600181019050612f5c565b5085925050509392505050565b5f608082019050612fb15f830188612d2d565b612fbe6020830187612595565b8181036040830152612fd1818587612f43565b9050612fe06060830184612a93565b9695505050505050565b612ff3816128a5565b82525050565b5f60208201905061300c5f830184612fea565b92915050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61307c602e83613012565b915061308782613022565b604082019050919050565b5f6020820190508181035f8301526130a981613070565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f6130e86130e36130de846130b0565b6130c5565b6130b9565b9050919050565b6130f8816130ce565b82525050565b5f6020820190506131115f8301846130ef565b92915050565b5f60608201905061312a5f830186612595565b6131376020830185612595565b6131446040830184612a93565b949350505050565b5f6131568261288d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361318857613187612e85565b5b600182019050919050565b5f6131ad6131a86131a3846128a5565b6130c5565b61288d565b9050919050565b6131bd81613193565b82525050565b828183375f83830152505050565b5f6131dc8385613012565b93506131e98385846131c3565b6131f2836125c1565b840190509392505050565b5f6060820190506132105f8301876131b4565b61321d6020830186612d2d565b81810360408301526132308184866131d1565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613295602683613012565b91506132a08261323b565b604082019050919050565b5f6020820190508181035f8301526132c281613289565b9050919050565b5f6040820190506132dc5f830185612a84565b6132e96020830184612a84565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613324602083613012565b915061332f826132f0565b602082019050919050565b5f6020820190508181035f83015261335181613318565b9050919050565b5f6133628261288d565b915061336d8361288d565b925082820390508181111561338557613384612e85565b5b92915050565b5f6133958261288d565b91506133a08361288d565b92508282026133ae8161288d565b915082820484148315176133c5576133c4612e85565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6134038261288d565b915061340e8361288d565b92508261341e5761341d6133cc565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f613483602b83613012565b915061348e82613429565b604082019050919050565b5f6020820190508181035f8301526134b081613477565b905091905056fea264697066735822122002595a0e8d13fcd433f0d78d899e85fe281a25307b929df5b0aa39a48bddce3b64736f6c63430008150033",
}

// PaycrestOrderABI is the input ABI used to generate the binding from.
// Deprecated: Use PaycrestOrderMetaData.ABI instead.
var PaycrestOrderABI = PaycrestOrderMetaData.ABI

// PaycrestOrderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaycrestOrderMetaData.Bin instead.
var PaycrestOrderBin = PaycrestOrderMetaData.Bin

// DeployPaycrestOrder deploys a new Ethereum contract, binding an instance of PaycrestOrder to it.
func DeployPaycrestOrder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PaycrestOrder, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaycrestOrderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// PaycrestOrder is an auto generated Go binding around an Ethereum contract.
type PaycrestOrder struct {
	PaycrestOrderCaller     // Read-only binding to the contract
	PaycrestOrderTransactor // Write-only binding to the contract
	PaycrestOrderFilterer   // Log filterer for contract events
}

// PaycrestOrderCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaycrestOrderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaycrestOrderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaycrestOrderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaycrestOrderSession struct {
	Contract     *PaycrestOrder    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaycrestOrderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaycrestOrderCallerSession struct {
	Contract *PaycrestOrderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PaycrestOrderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaycrestOrderTransactorSession struct {
	Contract     *PaycrestOrderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PaycrestOrderRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaycrestOrderRaw struct {
	Contract *PaycrestOrder // Generic contract binding to access the raw methods on
}

// PaycrestOrderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaycrestOrderCallerRaw struct {
	Contract *PaycrestOrderCaller // Generic read-only contract binding to access the raw methods on
}

// PaycrestOrderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaycrestOrderTransactorRaw struct {
	Contract *PaycrestOrderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaycrestOrder creates a new instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrder(address common.Address, backend bind.ContractBackend) (*PaycrestOrder, error) {
	contract, err := bindPaycrestOrder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrder{PaycrestOrderCaller: PaycrestOrderCaller{contract: contract}, PaycrestOrderTransactor: PaycrestOrderTransactor{contract: contract}, PaycrestOrderFilterer: PaycrestOrderFilterer{contract: contract}}, nil
}

// NewPaycrestOrderCaller creates a new read-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderCaller(address common.Address, caller bind.ContractCaller) (*PaycrestOrderCaller, error) {
	contract, err := bindPaycrestOrder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderCaller{contract: contract}, nil
}

// NewPaycrestOrderTransactor creates a new write-only instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderTransactor(address common.Address, transactor bind.ContractTransactor) (*PaycrestOrderTransactor, error) {
	contract, err := bindPaycrestOrder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransactor{contract: contract}, nil
}

// NewPaycrestOrderFilterer creates a new log filterer instance of PaycrestOrder, bound to a specific deployed contract.
func NewPaycrestOrderFilterer(address common.Address, filterer bind.ContractFilterer) (*PaycrestOrderFilterer, error) {
	contract, err := bindPaycrestOrder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderFilterer{contract: contract}, nil
}

// bindPaycrestOrder binds a generic wrapper to an already deployed contract.
func bindPaycrestOrder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaycrestOrderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.PaycrestOrderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.PaycrestOrderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaycrestOrder *PaycrestOrderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaycrestOrder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaycrestOrder *PaycrestOrderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.contract.Transact(opts, method, params...)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderCaller) GetFeeDetails(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getFeeDetails")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderSession) GetFeeDetails() (*big.Int, *big.Int, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetFeeDetails is a free data retrieval call binding the contract method 0xb810c636.
//
// Solidity: function getFeeDetails() view returns(uint128, uint128, uint256)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetFeeDetails() (*big.Int, *big.Int, *big.Int, error) {
	return _PaycrestOrder.Contract.GetFeeDetails(&_PaycrestOrder.CallOpts)
}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) GetLiquidityAggregator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getLiquidityAggregator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) GetLiquidityAggregator() (common.Address, error) {
	return _PaycrestOrder.Contract.GetLiquidityAggregator(&_PaycrestOrder.CallOpts)
}

// GetLiquidityAggregator is a free data retrieval call binding the contract method 0x2ebc5356.
//
// Solidity: function getLiquidityAggregator() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetLiquidityAggregator() (common.Address, error) {
	return _PaycrestOrder.Contract.GetLiquidityAggregator(&_PaycrestOrder.CallOpts)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCaller) GetOrderInfo(opts *bind.CallOpts, _orderId [32]byte) (IPaycrestOrder, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getOrderInfo", _orderId)

	if err != nil {
		return *new(IPaycrestOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(IPaycrestOrder)).(*IPaycrestOrder)

	return out0, err

}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetOrderInfo is a free data retrieval call binding the contract method 0x768c6ec0.
//
// Solidity: function getOrderInfo(bytes32 _orderId) view returns((address,address,address,uint256,uint96,bool,address,uint96,uint256))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetOrderInfo(_orderId [32]byte) (IPaycrestOrder, error) {
	return _PaycrestOrder.Contract.GetOrderInfo(&_PaycrestOrder.CallOpts, _orderId)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutionName(opts *bind.CallOpts, code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutionName", code)

	if err != nil {
		return *new(PaycrestSettingManagerInstitutionByCode), err
	}

	out0 := *abi.ConvertType(out[0], new(PaycrestSettingManagerInstitutionByCode)).(*PaycrestSettingManagerInstitutionByCode)

	return out0, err

}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutionName is a free data retrieval call binding the contract method 0x87490d86.
//
// Solidity: function getSupportedInstitutionName(bytes32 code) view returns((bytes32,bytes32))
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutionName(code [32]byte) (PaycrestSettingManagerInstitutionByCode, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutionName(&_PaycrestOrder.CallOpts, code)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCaller) GetSupportedInstitutions(opts *bind.CallOpts, currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getSupportedInstitutions", currency)

	if err != nil {
		return *new([]PaycrestSettingManagerInstitution), err
	}

	out0 := *abi.ConvertType(out[0], new([]PaycrestSettingManagerInstitution)).(*[]PaycrestSettingManagerInstitution)

	return out0, err

}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetSupportedInstitutions is a free data retrieval call binding the contract method 0x02621338.
//
// Solidity: function getSupportedInstitutions(bytes32 currency) view returns((bytes32,bytes32)[])
func (_PaycrestOrder *PaycrestOrderCallerSession) GetSupportedInstitutions(currency [32]byte) ([]PaycrestSettingManagerInstitution, error) {
	return _PaycrestOrder.Contract.GetSupportedInstitutions(&_PaycrestOrder.CallOpts, currency)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) GetWhitelistedStatus(opts *bind.CallOpts, sender common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "getWhitelistedStatus", sender)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// GetWhitelistedStatus is a free data retrieval call binding the contract method 0xd8e8de34.
//
// Solidity: function getWhitelistedStatus(address sender) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) GetWhitelistedStatus(sender common.Address) (bool, error) {
	return _PaycrestOrder.Contract.GetWhitelistedStatus(&_PaycrestOrder.CallOpts, sender)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCaller) IsTokenSupported(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "isTokenSupported", _token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// IsTokenSupported is a free data retrieval call binding the contract method 0x75151b63.
//
// Solidity: function isTokenSupported(address _token) view returns(bool)
func (_PaycrestOrder *PaycrestOrderCallerSession) IsTokenSupported(_token common.Address) (bool, error) {
	return _PaycrestOrder.Contract.IsTokenSupported(&_PaycrestOrder.CallOpts, _token)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaycrestOrder.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaycrestOrder *PaycrestOrderCallerSession) Owner() (common.Address, error) {
	return _PaycrestOrder.Contract.Owner(&_PaycrestOrder.CallOpts)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactor) CreateOrder(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "createOrder", _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xd12ff20a.
//
// Solidity: function createOrder(address _token, uint256 _amount, bytes32 _institutionCode, uint96 _rate, address _senderFeeRecipient, uint256 _senderFee, address _refundAddress, string messageHash) returns(bytes32 orderId)
func (_PaycrestOrder *PaycrestOrderTransactorSession) CreateOrder(_token common.Address, _amount *big.Int, _institutionCode [32]byte, _rate *big.Int, _senderFeeRecipient common.Address, _senderFee *big.Int, _refundAddress common.Address, messageHash string) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.CreateOrder(&_PaycrestOrder.TransactOpts, _token, _amount, _institutionCode, _rate, _senderFeeRecipient, _senderFee, _refundAddress, messageHash)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) Initialize(opts *bind.TransactOpts, _usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "initialize", _usdc)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderSession) Initialize(_usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Initialize(&_PaycrestOrder.TransactOpts, _usdc)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _usdc) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) Initialize(_usdc common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Initialize(&_PaycrestOrder.TransactOpts, _usdc)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactor) Refund(opts *bind.TransactOpts, _orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "refund", _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) Refund(_orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _orderId) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Refund(_orderId [32]byte) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Refund(&_PaycrestOrder.TransactOpts, _orderId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaycrestOrder.Contract.RenounceOwnership(&_PaycrestOrder.TransactOpts)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SetSupportedInstitutions(opts *bind.TransactOpts, currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "setSupportedInstitutions", currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SetSupportedInstitutions is a paid mutator transaction binding the contract method 0x32200882.
//
// Solidity: function setSupportedInstitutions(bytes32 currency, (bytes32,bytes32)[] institutions) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SetSupportedInstitutions(currency [32]byte, institutions []PaycrestSettingManagerInstitution) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SetSupportedInstitutions(&_PaycrestOrder.TransactOpts, currency, institutions)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) SettingManagerBool(opts *bind.TransactOpts, what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settingManagerBool", what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// SettingManagerBool is a paid mutator transaction binding the contract method 0x99e3c0b4.
//
// Solidity: function settingManagerBool(bytes32 what, address value, bool status) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) SettingManagerBool(what [32]byte, value common.Address, status bool) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.SettingManagerBool(&_PaycrestOrder.TransactOpts, what, value, status)
}

// Settle is a paid mutator transaction binding the contract method 0xbee1ddd0.
//
// Solidity: function settle(bytes32 _orderId, address[] _validators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactor) Settle(opts *bind.TransactOpts, _orderId [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "settle", _orderId, _validators, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xbee1ddd0.
//
// Solidity: function settle(bytes32 _orderId, address[] _validators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderSession) Settle(_orderId [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _orderId, _validators, _liquidityProvider, _settlePercent)
}

// Settle is a paid mutator transaction binding the contract method 0xbee1ddd0.
//
// Solidity: function settle(bytes32 _orderId, address[] _validators, address _liquidityProvider, uint96 _settlePercent) returns(bool)
func (_PaycrestOrder *PaycrestOrderTransactorSession) Settle(_orderId [32]byte, _validators []common.Address, _liquidityProvider common.Address, _settlePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.Settle(&_PaycrestOrder.TransactOpts, _orderId, _validators, _liquidityProvider, _settlePercent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.TransferOwnership(&_PaycrestOrder.TransactOpts, newOwner)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateFeeRecipient(opts *bind.TransactOpts, what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateFeeRecipient", what, value)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateFeeRecipient(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateFeeRecipient(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0x3d8f8fb2.
//
// Solidity: function updateFeeRecipient(bytes32 what, address value) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateFeeRecipient(what [32]byte, value common.Address) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateFeeRecipient(&_PaycrestOrder.TransactOpts, what, value)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactor) UpdateProtocolFees(opts *bind.TransactOpts, _protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.contract.Transact(opts, "updateProtocolFees", _protocolFeePercent, _validatorFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderSession) UpdateProtocolFees(_protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _validatorFeePercent)
}

// UpdateProtocolFees is a paid mutator transaction binding the contract method 0xf5326b19.
//
// Solidity: function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) returns()
func (_PaycrestOrder *PaycrestOrderTransactorSession) UpdateProtocolFees(_protocolFeePercent *big.Int, _validatorFeePercent *big.Int) (*types.Transaction, error) {
	return _PaycrestOrder.Contract.UpdateProtocolFees(&_PaycrestOrder.TransactOpts, _protocolFeePercent, _validatorFeePercent)
}

// PaycrestOrderDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the PaycrestOrder contract.
type PaycrestOrderDepositIterator struct {
	Event *PaycrestOrderDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderDeposit represents a Deposit event raised by the PaycrestOrder contract.
type PaycrestOrderDeposit struct {
	Token           common.Address
	Amount          *big.Int
	OrderId         [32]byte
	Rate            *big.Int
	InstitutionCode [32]byte
	MessageHash     string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a4042.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterDeposit(opts *bind.FilterOpts, token []common.Address, amount []*big.Int, orderId [][32]byte) (*PaycrestOrderDepositIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Deposit", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderDepositIterator{contract: _PaycrestOrder.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a4042.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PaycrestOrderDeposit, token []common.Address, amount []*big.Int, orderId [][32]byte) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Deposit", tokenRule, amountRule, orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderDeposit)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a4042.
//
// Solidity: event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseDeposit(log types.Log) (*PaycrestOrderDeposit, error) {
	event := new(PaycrestOrderDeposit)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PaycrestOrder contract.
type PaycrestOrderInitializedIterator struct {
	Event *PaycrestOrderInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderInitialized represents a Initialized event raised by the PaycrestOrder contract.
type PaycrestOrderInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterInitialized(opts *bind.FilterOpts) (*PaycrestOrderInitializedIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderInitializedIterator{contract: _PaycrestOrder.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PaycrestOrderInitialized) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderInitialized)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseInitialized(log types.Log) (*PaycrestOrderInitialized, error) {
	event := new(PaycrestOrderInitialized)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferredIterator struct {
	Event *PaycrestOrderOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderOwnershipTransferred represents a OwnershipTransferred event raised by the PaycrestOrder contract.
type PaycrestOrderOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaycrestOrderOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderOwnershipTransferredIterator{contract: _PaycrestOrder.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaycrestOrderOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderOwnershipTransferred)
				if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseOwnershipTransferred(log types.Log) (*PaycrestOrderOwnershipTransferred, error) {
	event := new(PaycrestOrderOwnershipTransferred)
	if err := _PaycrestOrder.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderPaycrestFeesIterator is returned from FilterPaycrestFees and is used to iterate over the raw logs and unpacked data for PaycrestFees events raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFeesIterator struct {
	Event *PaycrestOrderPaycrestFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderPaycrestFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderPaycrestFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderPaycrestFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderPaycrestFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderPaycrestFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderPaycrestFees represents a PaycrestFees event raised by the PaycrestOrder contract.
type PaycrestOrderPaycrestFees struct {
	ProtocolFee         *big.Int
	ValidatorFeePercent *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterPaycrestFees is a free log retrieval operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterPaycrestFees(opts *bind.FilterOpts) (*PaycrestOrderPaycrestFeesIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderPaycrestFeesIterator{contract: _PaycrestOrder.contract, event: "PaycrestFees", logs: logs, sub: sub}, nil
}

// WatchPaycrestFees is a free log subscription operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchPaycrestFees(opts *bind.WatchOpts, sink chan<- *PaycrestOrderPaycrestFees) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "PaycrestFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderPaycrestFees)
				if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaycrestFees is a log parse operation binding the contract event 0xe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df.
//
// Solidity: event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) ParsePaycrestFees(log types.Log) (*PaycrestOrderPaycrestFees, error) {
	event := new(PaycrestOrderPaycrestFees)
	if err := _PaycrestOrder.contract.UnpackLog(event, "PaycrestFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderRefundedIterator is returned from FilterRefunded and is used to iterate over the raw logs and unpacked data for Refunded events raised by the PaycrestOrder contract.
type PaycrestOrderRefundedIterator struct {
	Event *PaycrestOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderRefunded represents a Refunded event raised by the PaycrestOrder contract.
type PaycrestOrderRefunded struct {
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRefunded is a free log retrieval operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterRefunded(opts *bind.FilterOpts, orderId [][32]byte) (*PaycrestOrderRefundedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderRefundedIterator{contract: _PaycrestOrder.contract, event: "Refunded", logs: logs, sub: sub}, nil
}

// WatchRefunded is a free log subscription operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchRefunded(opts *bind.WatchOpts, sink chan<- *PaycrestOrderRefunded, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Refunded", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderRefunded)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefunded is a log parse operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderId)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseRefunded(log types.Log) (*PaycrestOrderRefunded, error) {
	event := new(PaycrestOrderRefunded)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Refunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettingManagerBoolIterator is returned from FilterSettingManagerBool and is used to iterate over the raw logs and unpacked data for SettingManagerBool events raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBoolIterator struct {
	Event *PaycrestOrderSettingManagerBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettingManagerBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettingManagerBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettingManagerBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettingManagerBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettingManagerBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettingManagerBool represents a SettingManagerBool event raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerBool struct {
	What   [32]byte
	Value  common.Address
	Status bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerBool is a free log retrieval operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettingManagerBool(opts *bind.FilterOpts) (*PaycrestOrderSettingManagerBoolIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettingManagerBoolIterator{contract: _PaycrestOrder.contract, event: "SettingManagerBool", logs: logs, sub: sub}, nil
}

// WatchSettingManagerBool is a free log subscription operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettingManagerBool(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettingManagerBool) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SettingManagerBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettingManagerBool)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerBool is a log parse operation binding the contract event 0xe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930.
//
// Solidity: event SettingManagerBool(bytes32 what, address value, bool status)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettingManagerBool(log types.Log) (*PaycrestOrderSettingManagerBool, error) {
	event := new(PaycrestOrderSettingManagerBool)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettingManagerForInstitutionIterator is returned from FilterSettingManagerForInstitution and is used to iterate over the raw logs and unpacked data for SettingManagerForInstitution events raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerForInstitutionIterator struct {
	Event *PaycrestOrderSettingManagerForInstitution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettingManagerForInstitution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettingManagerForInstitution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettingManagerForInstitutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettingManagerForInstitution represents a SettingManagerForInstitution event raised by the PaycrestOrder contract.
type PaycrestOrderSettingManagerForInstitution struct {
	What   [32]byte
	Value  [8]byte
	Status [8]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettingManagerForInstitution is a free log retrieval operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettingManagerForInstitution(opts *bind.FilterOpts) (*PaycrestOrderSettingManagerForInstitutionIterator, error) {

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "SettingManagerForInstitution")
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettingManagerForInstitutionIterator{contract: _PaycrestOrder.contract, event: "SettingManagerForInstitution", logs: logs, sub: sub}, nil
}

// WatchSettingManagerForInstitution is a free log subscription operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettingManagerForInstitution(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettingManagerForInstitution) (event.Subscription, error) {

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "SettingManagerForInstitution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettingManagerForInstitution)
				if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerForInstitution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettingManagerForInstitution is a log parse operation binding the contract event 0x3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79.
//
// Solidity: event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettingManagerForInstitution(log types.Log) (*PaycrestOrderSettingManagerForInstitution, error) {
	event := new(PaycrestOrderSettingManagerForInstitution)
	if err := _PaycrestOrder.contract.UnpackLog(event, "SettingManagerForInstitution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderSettledIterator is returned from FilterSettled and is used to iterate over the raw logs and unpacked data for Settled events raised by the PaycrestOrder contract.
type PaycrestOrderSettledIterator struct {
	Event *PaycrestOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderSettled represents a Settled event raised by the PaycrestOrder contract.
type PaycrestOrderSettled struct {
	OrderId           [32]byte
	LiquidityProvider common.Address
	SettlePercent     *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSettled is a free log retrieval operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterSettled(opts *bind.FilterOpts, orderId [][32]byte, liquidityProvider []common.Address) (*PaycrestOrderSettledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderSettledIterator{contract: _PaycrestOrder.contract, event: "Settled", logs: logs, sub: sub}, nil
}

// WatchSettled is a free log subscription operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchSettled(opts *bind.WatchOpts, sink chan<- *PaycrestOrderSettled, orderId [][32]byte, liquidityProvider []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}
	var liquidityProviderRule []interface{}
	for _, liquidityProviderItem := range liquidityProvider {
		liquidityProviderRule = append(liquidityProviderRule, liquidityProviderItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "Settled", orderIdRule, liquidityProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderSettled)
				if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettled is a log parse operation binding the contract event 0xce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e33.
//
// Solidity: event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseSettled(log types.Log) (*PaycrestOrderSettled, error) {
	event := new(PaycrestOrderSettled)
	if err := _PaycrestOrder.contract.UnpackLog(event, "Settled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaycrestOrderTransferSenderFeeIterator is returned from FilterTransferSenderFee and is used to iterate over the raw logs and unpacked data for TransferSenderFee events raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFeeIterator struct {
	Event *PaycrestOrderTransferSenderFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaycrestOrderTransferSenderFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaycrestOrderTransferSenderFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaycrestOrderTransferSenderFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaycrestOrderTransferSenderFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaycrestOrderTransferSenderFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaycrestOrderTransferSenderFee represents a TransferSenderFee event raised by the PaycrestOrder contract.
type PaycrestOrderTransferSenderFee struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferSenderFee is a free log retrieval operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) FilterTransferSenderFee(opts *bind.FilterOpts, sender []common.Address, amount []*big.Int) (*PaycrestOrderTransferSenderFeeIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.FilterLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &PaycrestOrderTransferSenderFeeIterator{contract: _PaycrestOrder.contract, event: "TransferSenderFee", logs: logs, sub: sub}, nil
}

// WatchTransferSenderFee is a free log subscription operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) WatchTransferSenderFee(opts *bind.WatchOpts, sink chan<- *PaycrestOrderTransferSenderFee, sender []common.Address, amount []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _PaycrestOrder.contract.WatchLogs(opts, "TransferSenderFee", senderRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaycrestOrderTransferSenderFee)
				if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSenderFee is a log parse operation binding the contract event 0x96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2.
//
// Solidity: event TransferSenderFee(address indexed sender, uint256 indexed amount)
func (_PaycrestOrder *PaycrestOrderFilterer) ParseTransferSenderFee(log types.Log) (*PaycrestOrderTransferSenderFee, error) {
	event := new(PaycrestOrderTransferSenderFee)
	if err := _PaycrestOrder.contract.UnpackLog(event, "TransferSenderFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
