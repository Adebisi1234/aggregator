// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/senderordertoken"
	"github.com/paycrest/protocol/ent/senderprofile"
	"github.com/shopspring/decimal"
)

// SenderOrderToken is the model entity for the SenderOrderToken schema.
type SenderOrderToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// FeePerTokenUnit holds the value of the "fee_per_token_unit" field.
	FeePerTokenUnit decimal.Decimal `json:"fee_per_token_unit,omitempty"`
	// Addresses holds the value of the "addresses" field.
	Addresses []struct {
		IsDisabled    bool   "json:\"isDisabled\""
		FeeAddress    string "json:\"feeAddress\""
		RefundAddress string "json:\"refundAddress\""
		Network       string "json:\"network\""
	} `json:"addresses,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SenderOrderTokenQuery when eager-loading is set.
	Edges                       SenderOrderTokenEdges `json:"edges"`
	sender_profile_order_tokens *uuid.UUID
	selectValues                sql.SelectValues
}

// SenderOrderTokenEdges holds the relations/edges for other nodes in the graph.
type SenderOrderTokenEdges struct {
	// Sender holds the value of the sender edge.
	Sender *SenderProfile `json:"sender,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SenderOrderTokenEdges) SenderOrErr() (*SenderProfile, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: senderprofile.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SenderOrderToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case senderordertoken.FieldAddresses:
			values[i] = new([]byte)
		case senderordertoken.FieldFeePerTokenUnit:
			values[i] = new(decimal.Decimal)
		case senderordertoken.FieldID:
			values[i] = new(sql.NullInt64)
		case senderordertoken.FieldSymbol:
			values[i] = new(sql.NullString)
		case senderordertoken.ForeignKeys[0]: // sender_profile_order_tokens
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SenderOrderToken fields.
func (sot *SenderOrderToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case senderordertoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sot.ID = int(value.Int64)
		case senderordertoken.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				sot.Symbol = value.String
			}
		case senderordertoken.FieldFeePerTokenUnit:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field fee_per_token_unit", values[i])
			} else if value != nil {
				sot.FeePerTokenUnit = *value
			}
		case senderordertoken.FieldAddresses:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field addresses", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sot.Addresses); err != nil {
					return fmt.Errorf("unmarshal field addresses: %w", err)
				}
			}
		case senderordertoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sender_profile_order_tokens", values[i])
			} else if value.Valid {
				sot.sender_profile_order_tokens = new(uuid.UUID)
				*sot.sender_profile_order_tokens = *value.S.(*uuid.UUID)
			}
		default:
			sot.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SenderOrderToken.
// This includes values selected through modifiers, order, etc.
func (sot *SenderOrderToken) Value(name string) (ent.Value, error) {
	return sot.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the SenderOrderToken entity.
func (sot *SenderOrderToken) QuerySender() *SenderProfileQuery {
	return NewSenderOrderTokenClient(sot.config).QuerySender(sot)
}

// Update returns a builder for updating this SenderOrderToken.
// Note that you need to call SenderOrderToken.Unwrap() before calling this method if this SenderOrderToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (sot *SenderOrderToken) Update() *SenderOrderTokenUpdateOne {
	return NewSenderOrderTokenClient(sot.config).UpdateOne(sot)
}

// Unwrap unwraps the SenderOrderToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sot *SenderOrderToken) Unwrap() *SenderOrderToken {
	_tx, ok := sot.config.driver.(*txDriver)
	if !ok {
		panic("ent: SenderOrderToken is not a transactional entity")
	}
	sot.config.driver = _tx.drv
	return sot
}

// String implements the fmt.Stringer.
func (sot *SenderOrderToken) String() string {
	var builder strings.Builder
	builder.WriteString("SenderOrderToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sot.ID))
	builder.WriteString("symbol=")
	builder.WriteString(sot.Symbol)
	builder.WriteString(", ")
	builder.WriteString("fee_per_token_unit=")
	builder.WriteString(fmt.Sprintf("%v", sot.FeePerTokenUnit))
	builder.WriteString(", ")
	builder.WriteString("addresses=")
	builder.WriteString(fmt.Sprintf("%v", sot.Addresses))
	builder.WriteByte(')')
	return builder.String()
}

// SenderOrderTokens is a parsable slice of SenderOrderToken.
type SenderOrderTokens []*SenderOrderToken
