// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/paycrest/paycrest-protocol/ent/providerordertoken"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
)

// ProviderOrderTokenAddress is the model entity for the ProviderOrderTokenAddress schema.
type ProviderOrderTokenAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Network holds the value of the "network" field.
	Network providerordertokenaddress.Network `json:"network,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderOrderTokenAddressQuery when eager-loading is set.
	Edges                          ProviderOrderTokenAddressEdges `json:"edges"`
	provider_order_token_addresses *int
	selectValues                   sql.SelectValues
}

// ProviderOrderTokenAddressEdges holds the relations/edges for other nodes in the graph.
type ProviderOrderTokenAddressEdges struct {
	// Providerordertoken holds the value of the providerordertoken edge.
	Providerordertoken *ProviderOrderToken `json:"providerordertoken,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProviderordertokenOrErr returns the Providerordertoken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderOrderTokenAddressEdges) ProviderordertokenOrErr() (*ProviderOrderToken, error) {
	if e.loadedTypes[0] {
		if e.Providerordertoken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: providerordertoken.Label}
		}
		return e.Providerordertoken, nil
	}
	return nil, &NotLoadedError{edge: "providerordertoken"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderOrderTokenAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providerordertokenaddress.FieldID:
			values[i] = new(sql.NullInt64)
		case providerordertokenaddress.FieldNetwork, providerordertokenaddress.FieldAddress:
			values[i] = new(sql.NullString)
		case providerordertokenaddress.ForeignKeys[0]: // provider_order_token_addresses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderOrderTokenAddress fields.
func (pota *ProviderOrderTokenAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providerordertokenaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pota.ID = int(value.Int64)
		case providerordertokenaddress.FieldNetwork:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network", values[i])
			} else if value.Valid {
				pota.Network = providerordertokenaddress.Network(value.String)
			}
		case providerordertokenaddress.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pota.Address = value.String
			}
		case providerordertokenaddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provider_order_token_addresses", value)
			} else if value.Valid {
				pota.provider_order_token_addresses = new(int)
				*pota.provider_order_token_addresses = int(value.Int64)
			}
		default:
			pota.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderOrderTokenAddress.
// This includes values selected through modifiers, order, etc.
func (pota *ProviderOrderTokenAddress) Value(name string) (ent.Value, error) {
	return pota.selectValues.Get(name)
}

// QueryProviderordertoken queries the "providerordertoken" edge of the ProviderOrderTokenAddress entity.
func (pota *ProviderOrderTokenAddress) QueryProviderordertoken() *ProviderOrderTokenQuery {
	return NewProviderOrderTokenAddressClient(pota.config).QueryProviderordertoken(pota)
}

// Update returns a builder for updating this ProviderOrderTokenAddress.
// Note that you need to call ProviderOrderTokenAddress.Unwrap() before calling this method if this ProviderOrderTokenAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (pota *ProviderOrderTokenAddress) Update() *ProviderOrderTokenAddressUpdateOne {
	return NewProviderOrderTokenAddressClient(pota.config).UpdateOne(pota)
}

// Unwrap unwraps the ProviderOrderTokenAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pota *ProviderOrderTokenAddress) Unwrap() *ProviderOrderTokenAddress {
	_tx, ok := pota.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderOrderTokenAddress is not a transactional entity")
	}
	pota.config.driver = _tx.drv
	return pota
}

// String implements the fmt.Stringer.
func (pota *ProviderOrderTokenAddress) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderOrderTokenAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pota.ID))
	builder.WriteString("network=")
	builder.WriteString(fmt.Sprintf("%v", pota.Network))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pota.Address)
	builder.WriteByte(')')
	return builder.String()
}

// ProviderOrderTokenAddresses is a parsable slice of ProviderOrderTokenAddress.
type ProviderOrderTokenAddresses []*ProviderOrderTokenAddress
