// Code generated by ent, DO NOT EDIT.

package webhookretryattempt

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the webhookretryattempt type in the database.
	Label = "webhook_retry_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAttemptNumber holds the string denoting the attempt_number field in the database.
	FieldAttemptNumber = "attempt_number"
	// FieldNextRetryTime holds the string denoting the next_retry_time field in the database.
	FieldNextRetryTime = "next_retry_time"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldWebhookURL holds the string denoting the webhook_url field in the database.
	FieldWebhookURL = "webhook_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the webhookretryattempt in the database.
	Table = "webhook_retry_attempts"
)

// Columns holds all SQL columns for webhookretryattempt fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAttemptNumber,
	FieldNextRetryTime,
	FieldPayload,
	FieldSignature,
	FieldWebhookURL,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultNextRetryTime holds the default value on creation for the "next_retry_time" field.
	DefaultNextRetryTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusFailed is the default value of the Status enum.
const DefaultStatus = StatusFailed

// Status values.
const (
	StatusSuccess Status = "success"
	StatusFailed  Status = "failed"
	StatusExpired Status = "expired"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccess, StatusFailed, StatusExpired:
		return nil
	default:
		return fmt.Errorf("webhookretryattempt: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the WebhookRetryAttempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAttemptNumber orders the results by the attempt_number field.
func ByAttemptNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptNumber, opts...).ToFunc()
}

// ByNextRetryTime orders the results by the next_retry_time field.
func ByNextRetryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRetryTime, opts...).ToFunc()
}

// BySignature orders the results by the signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByWebhookURL orders the results by the webhook_url field.
func ByWebhookURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
