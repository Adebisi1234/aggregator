// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/lockorderfulfillment"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/user"
	"github.com/paycrest/paycrest-protocol/ent/validatorprofile"
)

// ValidatorProfileQuery is the builder for querying ValidatorProfile entities.
type ValidatorProfileQuery struct {
	config
	ctx                       *QueryContext
	order                     []validatorprofile.OrderOption
	inters                    []Interceptor
	predicates                []predicate.ValidatorProfile
	withUser                  *UserQuery
	withValidatedFulfillments *LockOrderFulfillmentQuery
	withFKs                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ValidatorProfileQuery builder.
func (vpq *ValidatorProfileQuery) Where(ps ...predicate.ValidatorProfile) *ValidatorProfileQuery {
	vpq.predicates = append(vpq.predicates, ps...)
	return vpq
}

// Limit the number of records to be returned by this query.
func (vpq *ValidatorProfileQuery) Limit(limit int) *ValidatorProfileQuery {
	vpq.ctx.Limit = &limit
	return vpq
}

// Offset to start from.
func (vpq *ValidatorProfileQuery) Offset(offset int) *ValidatorProfileQuery {
	vpq.ctx.Offset = &offset
	return vpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vpq *ValidatorProfileQuery) Unique(unique bool) *ValidatorProfileQuery {
	vpq.ctx.Unique = &unique
	return vpq
}

// Order specifies how the records should be ordered.
func (vpq *ValidatorProfileQuery) Order(o ...validatorprofile.OrderOption) *ValidatorProfileQuery {
	vpq.order = append(vpq.order, o...)
	return vpq
}

// QueryUser chains the current query on the "user" edge.
func (vpq *ValidatorProfileQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(validatorprofile.Table, validatorprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, validatorprofile.UserTable, validatorprofile.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValidatedFulfillments chains the current query on the "validated_fulfillments" edge.
func (vpq *ValidatorProfileQuery) QueryValidatedFulfillments() *LockOrderFulfillmentQuery {
	query := (&LockOrderFulfillmentClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(validatorprofile.Table, validatorprofile.FieldID, selector),
			sqlgraph.To(lockorderfulfillment.Table, lockorderfulfillment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, validatorprofile.ValidatedFulfillmentsTable, validatorprofile.ValidatedFulfillmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ValidatorProfile entity from the query.
// Returns a *NotFoundError when no ValidatorProfile was found.
func (vpq *ValidatorProfileQuery) First(ctx context.Context) (*ValidatorProfile, error) {
	nodes, err := vpq.Limit(1).All(setContextOp(ctx, vpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{validatorprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) FirstX(ctx context.Context) *ValidatorProfile {
	node, err := vpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ValidatorProfile ID from the query.
// Returns a *NotFoundError when no ValidatorProfile ID was found.
func (vpq *ValidatorProfileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vpq.Limit(1).IDs(setContextOp(ctx, vpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{validatorprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := vpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ValidatorProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ValidatorProfile entity is found.
// Returns a *NotFoundError when no ValidatorProfile entities are found.
func (vpq *ValidatorProfileQuery) Only(ctx context.Context) (*ValidatorProfile, error) {
	nodes, err := vpq.Limit(2).All(setContextOp(ctx, vpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{validatorprofile.Label}
	default:
		return nil, &NotSingularError{validatorprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) OnlyX(ctx context.Context) *ValidatorProfile {
	node, err := vpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ValidatorProfile ID in the query.
// Returns a *NotSingularError when more than one ValidatorProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (vpq *ValidatorProfileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vpq.Limit(2).IDs(setContextOp(ctx, vpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{validatorprofile.Label}
	default:
		err = &NotSingularError{validatorprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := vpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ValidatorProfiles.
func (vpq *ValidatorProfileQuery) All(ctx context.Context) ([]*ValidatorProfile, error) {
	ctx = setContextOp(ctx, vpq.ctx, "All")
	if err := vpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ValidatorProfile, *ValidatorProfileQuery]()
	return withInterceptors[[]*ValidatorProfile](ctx, vpq, qr, vpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) AllX(ctx context.Context) []*ValidatorProfile {
	nodes, err := vpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ValidatorProfile IDs.
func (vpq *ValidatorProfileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if vpq.ctx.Unique == nil && vpq.path != nil {
		vpq.Unique(true)
	}
	ctx = setContextOp(ctx, vpq.ctx, "IDs")
	if err = vpq.Select(validatorprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := vpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vpq *ValidatorProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vpq.ctx, "Count")
	if err := vpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vpq, querierCount[*ValidatorProfileQuery](), vpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) CountX(ctx context.Context) int {
	count, err := vpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vpq *ValidatorProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vpq.ctx, "Exist")
	switch _, err := vpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vpq *ValidatorProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := vpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ValidatorProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vpq *ValidatorProfileQuery) Clone() *ValidatorProfileQuery {
	if vpq == nil {
		return nil
	}
	return &ValidatorProfileQuery{
		config:                    vpq.config,
		ctx:                       vpq.ctx.Clone(),
		order:                     append([]validatorprofile.OrderOption{}, vpq.order...),
		inters:                    append([]Interceptor{}, vpq.inters...),
		predicates:                append([]predicate.ValidatorProfile{}, vpq.predicates...),
		withUser:                  vpq.withUser.Clone(),
		withValidatedFulfillments: vpq.withValidatedFulfillments.Clone(),
		// clone intermediate query.
		sql:  vpq.sql.Clone(),
		path: vpq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *ValidatorProfileQuery) WithUser(opts ...func(*UserQuery)) *ValidatorProfileQuery {
	query := (&UserClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withUser = query
	return vpq
}

// WithValidatedFulfillments tells the query-builder to eager-load the nodes that are connected to
// the "validated_fulfillments" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *ValidatorProfileQuery) WithValidatedFulfillments(opts ...func(*LockOrderFulfillmentQuery)) *ValidatorProfileQuery {
	query := (&LockOrderFulfillmentClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withValidatedFulfillments = query
	return vpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ValidatorProfile.Query().
//		GroupBy(validatorprofile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vpq *ValidatorProfileQuery) GroupBy(field string, fields ...string) *ValidatorProfileGroupBy {
	vpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ValidatorProfileGroupBy{build: vpq}
	grbuild.flds = &vpq.ctx.Fields
	grbuild.label = validatorprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ValidatorProfile.Query().
//		Select(validatorprofile.FieldCreatedAt).
//		Scan(ctx, &v)
func (vpq *ValidatorProfileQuery) Select(fields ...string) *ValidatorProfileSelect {
	vpq.ctx.Fields = append(vpq.ctx.Fields, fields...)
	sbuild := &ValidatorProfileSelect{ValidatorProfileQuery: vpq}
	sbuild.label = validatorprofile.Label
	sbuild.flds, sbuild.scan = &vpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ValidatorProfileSelect configured with the given aggregations.
func (vpq *ValidatorProfileQuery) Aggregate(fns ...AggregateFunc) *ValidatorProfileSelect {
	return vpq.Select().Aggregate(fns...)
}

func (vpq *ValidatorProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vpq); err != nil {
				return err
			}
		}
	}
	for _, f := range vpq.ctx.Fields {
		if !validatorprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vpq.path != nil {
		prev, err := vpq.path(ctx)
		if err != nil {
			return err
		}
		vpq.sql = prev
	}
	return nil
}

func (vpq *ValidatorProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ValidatorProfile, error) {
	var (
		nodes       = []*ValidatorProfile{}
		withFKs     = vpq.withFKs
		_spec       = vpq.querySpec()
		loadedTypes = [2]bool{
			vpq.withUser != nil,
			vpq.withValidatedFulfillments != nil,
		}
	)
	if vpq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, validatorprofile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ValidatorProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ValidatorProfile{config: vpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vpq.withUser; query != nil {
		if err := vpq.loadUser(ctx, query, nodes, nil,
			func(n *ValidatorProfile, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withValidatedFulfillments; query != nil {
		if err := vpq.loadValidatedFulfillments(ctx, query, nodes,
			func(n *ValidatorProfile) { n.Edges.ValidatedFulfillments = []*LockOrderFulfillment{} },
			func(n *ValidatorProfile, e *LockOrderFulfillment) {
				n.Edges.ValidatedFulfillments = append(n.Edges.ValidatedFulfillments, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vpq *ValidatorProfileQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ValidatorProfile, init func(*ValidatorProfile), assign func(*ValidatorProfile, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ValidatorProfile)
	for i := range nodes {
		if nodes[i].user_validator_profile == nil {
			continue
		}
		fk := *nodes[i].user_validator_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_validator_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vpq *ValidatorProfileQuery) loadValidatedFulfillments(ctx context.Context, query *LockOrderFulfillmentQuery, nodes []*ValidatorProfile, init func(*ValidatorProfile), assign func(*ValidatorProfile, *LockOrderFulfillment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*ValidatorProfile)
	nids := make(map[uuid.UUID]map[*ValidatorProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(validatorprofile.ValidatedFulfillmentsTable)
		s.Join(joinT).On(s.C(lockorderfulfillment.FieldID), joinT.C(validatorprofile.ValidatedFulfillmentsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(validatorprofile.ValidatedFulfillmentsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(validatorprofile.ValidatedFulfillmentsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ValidatorProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*LockOrderFulfillment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "validated_fulfillments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (vpq *ValidatorProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vpq.querySpec()
	_spec.Node.Columns = vpq.ctx.Fields
	if len(vpq.ctx.Fields) > 0 {
		_spec.Unique = vpq.ctx.Unique != nil && *vpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vpq.driver, _spec)
}

func (vpq *ValidatorProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(validatorprofile.Table, validatorprofile.Columns, sqlgraph.NewFieldSpec(validatorprofile.FieldID, field.TypeUUID))
	_spec.From = vpq.sql
	if unique := vpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vpq.path != nil {
		_spec.Unique = true
	}
	if fields := vpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, validatorprofile.FieldID)
		for i := range fields {
			if fields[i] != validatorprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vpq *ValidatorProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vpq.driver.Dialect())
	t1 := builder.Table(validatorprofile.Table)
	columns := vpq.ctx.Fields
	if len(columns) == 0 {
		columns = validatorprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vpq.sql != nil {
		selector = vpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vpq.ctx.Unique != nil && *vpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vpq.predicates {
		p(selector)
	}
	for _, p := range vpq.order {
		p(selector)
	}
	if offset := vpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ValidatorProfileGroupBy is the group-by builder for ValidatorProfile entities.
type ValidatorProfileGroupBy struct {
	selector
	build *ValidatorProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vpgb *ValidatorProfileGroupBy) Aggregate(fns ...AggregateFunc) *ValidatorProfileGroupBy {
	vpgb.fns = append(vpgb.fns, fns...)
	return vpgb
}

// Scan applies the selector query and scans the result into the given value.
func (vpgb *ValidatorProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vpgb.build.ctx, "GroupBy")
	if err := vpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ValidatorProfileQuery, *ValidatorProfileGroupBy](ctx, vpgb.build, vpgb, vpgb.build.inters, v)
}

func (vpgb *ValidatorProfileGroupBy) sqlScan(ctx context.Context, root *ValidatorProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vpgb.fns))
	for _, fn := range vpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vpgb.flds)+len(vpgb.fns))
		for _, f := range *vpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ValidatorProfileSelect is the builder for selecting fields of ValidatorProfile entities.
type ValidatorProfileSelect struct {
	*ValidatorProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vps *ValidatorProfileSelect) Aggregate(fns ...AggregateFunc) *ValidatorProfileSelect {
	vps.fns = append(vps.fns, fns...)
	return vps
}

// Scan applies the selector query and scans the result into the given value.
func (vps *ValidatorProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vps.ctx, "Select")
	if err := vps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ValidatorProfileQuery, *ValidatorProfileSelect](ctx, vps.ValidatorProfileQuery, vps, vps.inters, v)
}

func (vps *ValidatorProfileSelect) sqlScan(ctx context.Context, root *ValidatorProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vps.fns))
	for _, fn := range vps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
