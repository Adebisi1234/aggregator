// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/paycrest/paycrest-protocol/ent/apikey"
	"github.com/paycrest/paycrest-protocol/ent/network"
	"github.com/paycrest/paycrest-protocol/ent/paymentorder"
	"github.com/paycrest/paycrest-protocol/ent/paymentorderrecipient"
	"github.com/paycrest/paycrest-protocol/ent/provideravailability"
	"github.com/paycrest/paycrest-protocol/ent/providerordertoken"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
	"github.com/paycrest/paycrest-protocol/ent/providerprofile"
	"github.com/paycrest/paycrest-protocol/ent/receiveaddress"
	"github.com/paycrest/paycrest-protocol/ent/token"
	"github.com/paycrest/paycrest-protocol/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APIKey is the client for interacting with the APIKey builders.
	APIKey *APIKeyClient
	// Network is the client for interacting with the Network builders.
	Network *NetworkClient
	// PaymentOrder is the client for interacting with the PaymentOrder builders.
	PaymentOrder *PaymentOrderClient
	// PaymentOrderRecipient is the client for interacting with the PaymentOrderRecipient builders.
	PaymentOrderRecipient *PaymentOrderRecipientClient
	// ProviderAvailability is the client for interacting with the ProviderAvailability builders.
	ProviderAvailability *ProviderAvailabilityClient
	// ProviderOrderToken is the client for interacting with the ProviderOrderToken builders.
	ProviderOrderToken *ProviderOrderTokenClient
	// ProviderOrderTokenAddress is the client for interacting with the ProviderOrderTokenAddress builders.
	ProviderOrderTokenAddress *ProviderOrderTokenAddressClient
	// ProviderProfile is the client for interacting with the ProviderProfile builders.
	ProviderProfile *ProviderProfileClient
	// ReceiveAddress is the client for interacting with the ReceiveAddress builders.
	ReceiveAddress *ReceiveAddressClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APIKey = NewAPIKeyClient(c.config)
	c.Network = NewNetworkClient(c.config)
	c.PaymentOrder = NewPaymentOrderClient(c.config)
	c.PaymentOrderRecipient = NewPaymentOrderRecipientClient(c.config)
	c.ProviderAvailability = NewProviderAvailabilityClient(c.config)
	c.ProviderOrderToken = NewProviderOrderTokenClient(c.config)
	c.ProviderOrderTokenAddress = NewProviderOrderTokenAddressClient(c.config)
	c.ProviderProfile = NewProviderProfileClient(c.config)
	c.ReceiveAddress = NewReceiveAddressClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		APIKey:                    NewAPIKeyClient(cfg),
		Network:                   NewNetworkClient(cfg),
		PaymentOrder:              NewPaymentOrderClient(cfg),
		PaymentOrderRecipient:     NewPaymentOrderRecipientClient(cfg),
		ProviderAvailability:      NewProviderAvailabilityClient(cfg),
		ProviderOrderToken:        NewProviderOrderTokenClient(cfg),
		ProviderOrderTokenAddress: NewProviderOrderTokenAddressClient(cfg),
		ProviderProfile:           NewProviderProfileClient(cfg),
		ReceiveAddress:            NewReceiveAddressClient(cfg),
		Token:                     NewTokenClient(cfg),
		User:                      NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		APIKey:                    NewAPIKeyClient(cfg),
		Network:                   NewNetworkClient(cfg),
		PaymentOrder:              NewPaymentOrderClient(cfg),
		PaymentOrderRecipient:     NewPaymentOrderRecipientClient(cfg),
		ProviderAvailability:      NewProviderAvailabilityClient(cfg),
		ProviderOrderToken:        NewProviderOrderTokenClient(cfg),
		ProviderOrderTokenAddress: NewProviderOrderTokenAddressClient(cfg),
		ProviderProfile:           NewProviderProfileClient(cfg),
		ReceiveAddress:            NewReceiveAddressClient(cfg),
		Token:                     NewTokenClient(cfg),
		User:                      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APIKey.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APIKey, c.Network, c.PaymentOrder, c.PaymentOrderRecipient,
		c.ProviderAvailability, c.ProviderOrderToken, c.ProviderOrderTokenAddress,
		c.ProviderProfile, c.ReceiveAddress, c.Token, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APIKey, c.Network, c.PaymentOrder, c.PaymentOrderRecipient,
		c.ProviderAvailability, c.ProviderOrderToken, c.ProviderOrderTokenAddress,
		c.ProviderProfile, c.ReceiveAddress, c.Token, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APIKeyMutation:
		return c.APIKey.mutate(ctx, m)
	case *NetworkMutation:
		return c.Network.mutate(ctx, m)
	case *PaymentOrderMutation:
		return c.PaymentOrder.mutate(ctx, m)
	case *PaymentOrderRecipientMutation:
		return c.PaymentOrderRecipient.mutate(ctx, m)
	case *ProviderAvailabilityMutation:
		return c.ProviderAvailability.mutate(ctx, m)
	case *ProviderOrderTokenMutation:
		return c.ProviderOrderToken.mutate(ctx, m)
	case *ProviderOrderTokenAddressMutation:
		return c.ProviderOrderTokenAddress.mutate(ctx, m)
	case *ProviderProfileMutation:
		return c.ProviderProfile.mutate(ctx, m)
	case *ReceiveAddressMutation:
		return c.ReceiveAddress.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APIKeyClient is a client for the APIKey schema.
type APIKeyClient struct {
	config
}

// NewAPIKeyClient returns a client for the APIKey from the given config.
func NewAPIKeyClient(c config) *APIKeyClient {
	return &APIKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *APIKeyClient) Use(hooks ...Hook) {
	c.hooks.APIKey = append(c.hooks.APIKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *APIKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.APIKey = append(c.inters.APIKey, interceptors...)
}

// Create returns a builder for creating a APIKey entity.
func (c *APIKeyClient) Create() *APIKeyCreate {
	mutation := newAPIKeyMutation(c.config, OpCreate)
	return &APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APIKey entities.
func (c *APIKeyClient) CreateBulk(builders ...*APIKeyCreate) *APIKeyCreateBulk {
	return &APIKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APIKey.
func (c *APIKeyClient) Update() *APIKeyUpdate {
	mutation := newAPIKeyMutation(c.config, OpUpdate)
	return &APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APIKeyClient) UpdateOne(ak *APIKey) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKey(ak))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APIKeyClient) UpdateOneID(id uuid.UUID) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKeyID(id))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APIKey.
func (c *APIKeyClient) Delete() *APIKeyDelete {
	mutation := newAPIKeyMutation(c.config, OpDelete)
	return &APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APIKeyClient) DeleteOne(ak *APIKey) *APIKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APIKeyClient) DeleteOneID(id uuid.UUID) *APIKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIKeyDeleteOne{builder}
}

// Query returns a query builder for APIKey.
func (c *APIKeyClient) Query() *APIKeyQuery {
	return &APIKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPIKey},
		inters: c.Interceptors(),
	}
}

// Get returns a APIKey entity by its id.
func (c *APIKeyClient) Get(ctx context.Context, id uuid.UUID) (*APIKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APIKeyClient) GetX(ctx context.Context, id uuid.UUID) *APIKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a APIKey.
func (c *APIKeyClient) QueryOwner(ak *APIKey) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.OwnerTable, apikey.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderProfile queries the provider_profile edge of a APIKey.
func (c *APIKeyClient) QueryProviderProfile(ak *APIKey) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, apikey.ProviderProfileTable, apikey.ProviderProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentOrders queries the payment_orders edge of a APIKey.
func (c *APIKeyClient) QueryPaymentOrders(ak *APIKey) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apikey.PaymentOrdersTable, apikey.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APIKeyClient) Hooks() []Hook {
	return c.hooks.APIKey
}

// Interceptors returns the client interceptors.
func (c *APIKeyClient) Interceptors() []Interceptor {
	return c.inters.APIKey
}

func (c *APIKeyClient) mutate(ctx context.Context, m *APIKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APIKey mutation op: %q", m.Op())
	}
}

// NetworkClient is a client for the Network schema.
type NetworkClient struct {
	config
}

// NewNetworkClient returns a client for the Network from the given config.
func NewNetworkClient(c config) *NetworkClient {
	return &NetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `network.Hooks(f(g(h())))`.
func (c *NetworkClient) Use(hooks ...Hook) {
	c.hooks.Network = append(c.hooks.Network, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `network.Intercept(f(g(h())))`.
func (c *NetworkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Network = append(c.inters.Network, interceptors...)
}

// Create returns a builder for creating a Network entity.
func (c *NetworkClient) Create() *NetworkCreate {
	mutation := newNetworkMutation(c.config, OpCreate)
	return &NetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Network entities.
func (c *NetworkClient) CreateBulk(builders ...*NetworkCreate) *NetworkCreateBulk {
	return &NetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Network.
func (c *NetworkClient) Update() *NetworkUpdate {
	mutation := newNetworkMutation(c.config, OpUpdate)
	return &NetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkClient) UpdateOne(n *Network) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetwork(n))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkClient) UpdateOneID(id int) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetworkID(id))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Network.
func (c *NetworkClient) Delete() *NetworkDelete {
	mutation := newNetworkMutation(c.config, OpDelete)
	return &NetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkClient) DeleteOne(n *Network) *NetworkDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkClient) DeleteOneID(id int) *NetworkDeleteOne {
	builder := c.Delete().Where(network.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkDeleteOne{builder}
}

// Query returns a query builder for Network.
func (c *NetworkClient) Query() *NetworkQuery {
	return &NetworkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetwork},
		inters: c.Interceptors(),
	}
}

// Get returns a Network entity by its id.
func (c *NetworkClient) Get(ctx context.Context, id int) (*Network, error) {
	return c.Query().Where(network.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkClient) GetX(ctx context.Context, id int) *Network {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTokens queries the tokens edge of a Network.
func (c *NetworkClient) QueryTokens(n *Network) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, network.TokensTable, network.TokensColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkClient) Hooks() []Hook {
	return c.hooks.Network
}

// Interceptors returns the client interceptors.
func (c *NetworkClient) Interceptors() []Interceptor {
	return c.inters.Network
}

func (c *NetworkClient) mutate(ctx context.Context, m *NetworkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Network mutation op: %q", m.Op())
	}
}

// PaymentOrderClient is a client for the PaymentOrder schema.
type PaymentOrderClient struct {
	config
}

// NewPaymentOrderClient returns a client for the PaymentOrder from the given config.
func NewPaymentOrderClient(c config) *PaymentOrderClient {
	return &PaymentOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentorder.Hooks(f(g(h())))`.
func (c *PaymentOrderClient) Use(hooks ...Hook) {
	c.hooks.PaymentOrder = append(c.hooks.PaymentOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentorder.Intercept(f(g(h())))`.
func (c *PaymentOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentOrder = append(c.inters.PaymentOrder, interceptors...)
}

// Create returns a builder for creating a PaymentOrder entity.
func (c *PaymentOrderClient) Create() *PaymentOrderCreate {
	mutation := newPaymentOrderMutation(c.config, OpCreate)
	return &PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentOrder entities.
func (c *PaymentOrderClient) CreateBulk(builders ...*PaymentOrderCreate) *PaymentOrderCreateBulk {
	return &PaymentOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentOrder.
func (c *PaymentOrderClient) Update() *PaymentOrderUpdate {
	mutation := newPaymentOrderMutation(c.config, OpUpdate)
	return &PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentOrderClient) UpdateOne(po *PaymentOrder) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrder(po))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentOrderClient) UpdateOneID(id int) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrderID(id))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentOrder.
func (c *PaymentOrderClient) Delete() *PaymentOrderDelete {
	mutation := newPaymentOrderMutation(c.config, OpDelete)
	return &PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentOrderClient) DeleteOne(po *PaymentOrder) *PaymentOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentOrderClient) DeleteOneID(id int) *PaymentOrderDeleteOne {
	builder := c.Delete().Where(paymentorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentOrderDeleteOne{builder}
}

// Query returns a query builder for PaymentOrder.
func (c *PaymentOrderClient) Query() *PaymentOrderQuery {
	return &PaymentOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentOrder entity by its id.
func (c *PaymentOrderClient) Get(ctx context.Context, id int) (*PaymentOrder, error) {
	return c.Query().Where(paymentorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentOrderClient) GetX(ctx context.Context, id int) *PaymentOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAPIKey queries the api_key edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryAPIKey(po *PaymentOrder) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentorder.APIKeyTable, paymentorder.APIKeyColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToken queries the token edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryToken(po *PaymentOrder) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentorder.TokenTable, paymentorder.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiveAddressFk queries the receive_address_fk edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryReceiveAddressFk(po *PaymentOrder) *ReceiveAddressQuery {
	query := (&ReceiveAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(receiveaddress.Table, receiveaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentorder.ReceiveAddressFkTable, paymentorder.ReceiveAddressFkColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipient queries the recipient edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryRecipient(po *PaymentOrder) *PaymentOrderRecipientQuery {
	query := (&PaymentOrderRecipientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(paymentorderrecipient.Table, paymentorderrecipient.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentorder.RecipientTable, paymentorder.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentOrderClient) Hooks() []Hook {
	return c.hooks.PaymentOrder
}

// Interceptors returns the client interceptors.
func (c *PaymentOrderClient) Interceptors() []Interceptor {
	return c.inters.PaymentOrder
}

func (c *PaymentOrderClient) mutate(ctx context.Context, m *PaymentOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentOrder mutation op: %q", m.Op())
	}
}

// PaymentOrderRecipientClient is a client for the PaymentOrderRecipient schema.
type PaymentOrderRecipientClient struct {
	config
}

// NewPaymentOrderRecipientClient returns a client for the PaymentOrderRecipient from the given config.
func NewPaymentOrderRecipientClient(c config) *PaymentOrderRecipientClient {
	return &PaymentOrderRecipientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentorderrecipient.Hooks(f(g(h())))`.
func (c *PaymentOrderRecipientClient) Use(hooks ...Hook) {
	c.hooks.PaymentOrderRecipient = append(c.hooks.PaymentOrderRecipient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentorderrecipient.Intercept(f(g(h())))`.
func (c *PaymentOrderRecipientClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentOrderRecipient = append(c.inters.PaymentOrderRecipient, interceptors...)
}

// Create returns a builder for creating a PaymentOrderRecipient entity.
func (c *PaymentOrderRecipientClient) Create() *PaymentOrderRecipientCreate {
	mutation := newPaymentOrderRecipientMutation(c.config, OpCreate)
	return &PaymentOrderRecipientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentOrderRecipient entities.
func (c *PaymentOrderRecipientClient) CreateBulk(builders ...*PaymentOrderRecipientCreate) *PaymentOrderRecipientCreateBulk {
	return &PaymentOrderRecipientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Update() *PaymentOrderRecipientUpdate {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdate)
	return &PaymentOrderRecipientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentOrderRecipientClient) UpdateOne(por *PaymentOrderRecipient) *PaymentOrderRecipientUpdateOne {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdateOne, withPaymentOrderRecipient(por))
	return &PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentOrderRecipientClient) UpdateOneID(id int) *PaymentOrderRecipientUpdateOne {
	mutation := newPaymentOrderRecipientMutation(c.config, OpUpdateOne, withPaymentOrderRecipientID(id))
	return &PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Delete() *PaymentOrderRecipientDelete {
	mutation := newPaymentOrderRecipientMutation(c.config, OpDelete)
	return &PaymentOrderRecipientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentOrderRecipientClient) DeleteOne(por *PaymentOrderRecipient) *PaymentOrderRecipientDeleteOne {
	return c.DeleteOneID(por.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentOrderRecipientClient) DeleteOneID(id int) *PaymentOrderRecipientDeleteOne {
	builder := c.Delete().Where(paymentorderrecipient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentOrderRecipientDeleteOne{builder}
}

// Query returns a query builder for PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) Query() *PaymentOrderRecipientQuery {
	return &PaymentOrderRecipientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentOrderRecipient},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentOrderRecipient entity by its id.
func (c *PaymentOrderRecipientClient) Get(ctx context.Context, id int) (*PaymentOrderRecipient, error) {
	return c.Query().Where(paymentorderrecipient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentOrderRecipientClient) GetX(ctx context.Context, id int) *PaymentOrderRecipient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentOrder queries the payment_order edge of a PaymentOrderRecipient.
func (c *PaymentOrderRecipientClient) QueryPaymentOrder(por *PaymentOrderRecipient) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := por.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorderrecipient.Table, paymentorderrecipient.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, paymentorderrecipient.PaymentOrderTable, paymentorderrecipient.PaymentOrderColumn),
		)
		fromV = sqlgraph.Neighbors(por.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentOrderRecipientClient) Hooks() []Hook {
	return c.hooks.PaymentOrderRecipient
}

// Interceptors returns the client interceptors.
func (c *PaymentOrderRecipientClient) Interceptors() []Interceptor {
	return c.inters.PaymentOrderRecipient
}

func (c *PaymentOrderRecipientClient) mutate(ctx context.Context, m *PaymentOrderRecipientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentOrderRecipientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentOrderRecipientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentOrderRecipientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentOrderRecipientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentOrderRecipient mutation op: %q", m.Op())
	}
}

// ProviderAvailabilityClient is a client for the ProviderAvailability schema.
type ProviderAvailabilityClient struct {
	config
}

// NewProviderAvailabilityClient returns a client for the ProviderAvailability from the given config.
func NewProviderAvailabilityClient(c config) *ProviderAvailabilityClient {
	return &ProviderAvailabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provideravailability.Hooks(f(g(h())))`.
func (c *ProviderAvailabilityClient) Use(hooks ...Hook) {
	c.hooks.ProviderAvailability = append(c.hooks.ProviderAvailability, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `provideravailability.Intercept(f(g(h())))`.
func (c *ProviderAvailabilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderAvailability = append(c.inters.ProviderAvailability, interceptors...)
}

// Create returns a builder for creating a ProviderAvailability entity.
func (c *ProviderAvailabilityClient) Create() *ProviderAvailabilityCreate {
	mutation := newProviderAvailabilityMutation(c.config, OpCreate)
	return &ProviderAvailabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderAvailability entities.
func (c *ProviderAvailabilityClient) CreateBulk(builders ...*ProviderAvailabilityCreate) *ProviderAvailabilityCreateBulk {
	return &ProviderAvailabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderAvailability.
func (c *ProviderAvailabilityClient) Update() *ProviderAvailabilityUpdate {
	mutation := newProviderAvailabilityMutation(c.config, OpUpdate)
	return &ProviderAvailabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderAvailabilityClient) UpdateOne(pa *ProviderAvailability) *ProviderAvailabilityUpdateOne {
	mutation := newProviderAvailabilityMutation(c.config, OpUpdateOne, withProviderAvailability(pa))
	return &ProviderAvailabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderAvailabilityClient) UpdateOneID(id int) *ProviderAvailabilityUpdateOne {
	mutation := newProviderAvailabilityMutation(c.config, OpUpdateOne, withProviderAvailabilityID(id))
	return &ProviderAvailabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderAvailability.
func (c *ProviderAvailabilityClient) Delete() *ProviderAvailabilityDelete {
	mutation := newProviderAvailabilityMutation(c.config, OpDelete)
	return &ProviderAvailabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderAvailabilityClient) DeleteOne(pa *ProviderAvailability) *ProviderAvailabilityDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderAvailabilityClient) DeleteOneID(id int) *ProviderAvailabilityDeleteOne {
	builder := c.Delete().Where(provideravailability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderAvailabilityDeleteOne{builder}
}

// Query returns a query builder for ProviderAvailability.
func (c *ProviderAvailabilityClient) Query() *ProviderAvailabilityQuery {
	return &ProviderAvailabilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderAvailability},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderAvailability entity by its id.
func (c *ProviderAvailabilityClient) Get(ctx context.Context, id int) (*ProviderAvailability, error) {
	return c.Query().Where(provideravailability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderAvailabilityClient) GetX(ctx context.Context, id int) *ProviderAvailability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a ProviderAvailability.
func (c *ProviderAvailabilityClient) QueryProvider(pa *ProviderAvailability) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provideravailability.Table, provideravailability.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provideravailability.ProviderTable, provideravailability.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderAvailabilityClient) Hooks() []Hook {
	return c.hooks.ProviderAvailability
}

// Interceptors returns the client interceptors.
func (c *ProviderAvailabilityClient) Interceptors() []Interceptor {
	return c.inters.ProviderAvailability
}

func (c *ProviderAvailabilityClient) mutate(ctx context.Context, m *ProviderAvailabilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderAvailabilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderAvailabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderAvailabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderAvailabilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderAvailability mutation op: %q", m.Op())
	}
}

// ProviderOrderTokenClient is a client for the ProviderOrderToken schema.
type ProviderOrderTokenClient struct {
	config
}

// NewProviderOrderTokenClient returns a client for the ProviderOrderToken from the given config.
func NewProviderOrderTokenClient(c config) *ProviderOrderTokenClient {
	return &ProviderOrderTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerordertoken.Hooks(f(g(h())))`.
func (c *ProviderOrderTokenClient) Use(hooks ...Hook) {
	c.hooks.ProviderOrderToken = append(c.hooks.ProviderOrderToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerordertoken.Intercept(f(g(h())))`.
func (c *ProviderOrderTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderOrderToken = append(c.inters.ProviderOrderToken, interceptors...)
}

// Create returns a builder for creating a ProviderOrderToken entity.
func (c *ProviderOrderTokenClient) Create() *ProviderOrderTokenCreate {
	mutation := newProviderOrderTokenMutation(c.config, OpCreate)
	return &ProviderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderOrderToken entities.
func (c *ProviderOrderTokenClient) CreateBulk(builders ...*ProviderOrderTokenCreate) *ProviderOrderTokenCreateBulk {
	return &ProviderOrderTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Update() *ProviderOrderTokenUpdate {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdate)
	return &ProviderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderOrderTokenClient) UpdateOne(pot *ProviderOrderToken) *ProviderOrderTokenUpdateOne {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdateOne, withProviderOrderToken(pot))
	return &ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderOrderTokenClient) UpdateOneID(id int) *ProviderOrderTokenUpdateOne {
	mutation := newProviderOrderTokenMutation(c.config, OpUpdateOne, withProviderOrderTokenID(id))
	return &ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Delete() *ProviderOrderTokenDelete {
	mutation := newProviderOrderTokenMutation(c.config, OpDelete)
	return &ProviderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderOrderTokenClient) DeleteOne(pot *ProviderOrderToken) *ProviderOrderTokenDeleteOne {
	return c.DeleteOneID(pot.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderOrderTokenClient) DeleteOneID(id int) *ProviderOrderTokenDeleteOne {
	builder := c.Delete().Where(providerordertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderOrderTokenDeleteOne{builder}
}

// Query returns a query builder for ProviderOrderToken.
func (c *ProviderOrderTokenClient) Query() *ProviderOrderTokenQuery {
	return &ProviderOrderTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderOrderToken},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderOrderToken entity by its id.
func (c *ProviderOrderTokenClient) Get(ctx context.Context, id int) (*ProviderOrderToken, error) {
	return c.Query().Where(providerordertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderOrderTokenClient) GetX(ctx context.Context, id int) *ProviderOrderToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a ProviderOrderToken.
func (c *ProviderOrderTokenClient) QueryProvider(pot *ProviderOrderToken) *ProviderProfileQuery {
	query := (&ProviderProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertoken.Table, providerordertoken.FieldID, id),
			sqlgraph.To(providerprofile.Table, providerprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerordertoken.ProviderTable, providerordertoken.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(pot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a ProviderOrderToken.
func (c *ProviderOrderTokenClient) QueryAddresses(pot *ProviderOrderToken) *ProviderOrderTokenAddressQuery {
	query := (&ProviderOrderTokenAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertoken.Table, providerordertoken.FieldID, id),
			sqlgraph.To(providerordertokenaddress.Table, providerordertokenaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerordertoken.AddressesTable, providerordertoken.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(pot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderOrderTokenClient) Hooks() []Hook {
	return c.hooks.ProviderOrderToken
}

// Interceptors returns the client interceptors.
func (c *ProviderOrderTokenClient) Interceptors() []Interceptor {
	return c.inters.ProviderOrderToken
}

func (c *ProviderOrderTokenClient) mutate(ctx context.Context, m *ProviderOrderTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderOrderTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderOrderTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderOrderTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderOrderTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderOrderToken mutation op: %q", m.Op())
	}
}

// ProviderOrderTokenAddressClient is a client for the ProviderOrderTokenAddress schema.
type ProviderOrderTokenAddressClient struct {
	config
}

// NewProviderOrderTokenAddressClient returns a client for the ProviderOrderTokenAddress from the given config.
func NewProviderOrderTokenAddressClient(c config) *ProviderOrderTokenAddressClient {
	return &ProviderOrderTokenAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerordertokenaddress.Hooks(f(g(h())))`.
func (c *ProviderOrderTokenAddressClient) Use(hooks ...Hook) {
	c.hooks.ProviderOrderTokenAddress = append(c.hooks.ProviderOrderTokenAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerordertokenaddress.Intercept(f(g(h())))`.
func (c *ProviderOrderTokenAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderOrderTokenAddress = append(c.inters.ProviderOrderTokenAddress, interceptors...)
}

// Create returns a builder for creating a ProviderOrderTokenAddress entity.
func (c *ProviderOrderTokenAddressClient) Create() *ProviderOrderTokenAddressCreate {
	mutation := newProviderOrderTokenAddressMutation(c.config, OpCreate)
	return &ProviderOrderTokenAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderOrderTokenAddress entities.
func (c *ProviderOrderTokenAddressClient) CreateBulk(builders ...*ProviderOrderTokenAddressCreate) *ProviderOrderTokenAddressCreateBulk {
	return &ProviderOrderTokenAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderOrderTokenAddress.
func (c *ProviderOrderTokenAddressClient) Update() *ProviderOrderTokenAddressUpdate {
	mutation := newProviderOrderTokenAddressMutation(c.config, OpUpdate)
	return &ProviderOrderTokenAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderOrderTokenAddressClient) UpdateOne(pota *ProviderOrderTokenAddress) *ProviderOrderTokenAddressUpdateOne {
	mutation := newProviderOrderTokenAddressMutation(c.config, OpUpdateOne, withProviderOrderTokenAddress(pota))
	return &ProviderOrderTokenAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderOrderTokenAddressClient) UpdateOneID(id int) *ProviderOrderTokenAddressUpdateOne {
	mutation := newProviderOrderTokenAddressMutation(c.config, OpUpdateOne, withProviderOrderTokenAddressID(id))
	return &ProviderOrderTokenAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderOrderTokenAddress.
func (c *ProviderOrderTokenAddressClient) Delete() *ProviderOrderTokenAddressDelete {
	mutation := newProviderOrderTokenAddressMutation(c.config, OpDelete)
	return &ProviderOrderTokenAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderOrderTokenAddressClient) DeleteOne(pota *ProviderOrderTokenAddress) *ProviderOrderTokenAddressDeleteOne {
	return c.DeleteOneID(pota.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderOrderTokenAddressClient) DeleteOneID(id int) *ProviderOrderTokenAddressDeleteOne {
	builder := c.Delete().Where(providerordertokenaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderOrderTokenAddressDeleteOne{builder}
}

// Query returns a query builder for ProviderOrderTokenAddress.
func (c *ProviderOrderTokenAddressClient) Query() *ProviderOrderTokenAddressQuery {
	return &ProviderOrderTokenAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderOrderTokenAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderOrderTokenAddress entity by its id.
func (c *ProviderOrderTokenAddressClient) Get(ctx context.Context, id int) (*ProviderOrderTokenAddress, error) {
	return c.Query().Where(providerordertokenaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderOrderTokenAddressClient) GetX(ctx context.Context, id int) *ProviderOrderTokenAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProviderordertoken queries the providerordertoken edge of a ProviderOrderTokenAddress.
func (c *ProviderOrderTokenAddressClient) QueryProviderordertoken(pota *ProviderOrderTokenAddress) *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pota.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerordertokenaddress.Table, providerordertokenaddress.FieldID, id),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerordertokenaddress.ProviderordertokenTable, providerordertokenaddress.ProviderordertokenColumn),
		)
		fromV = sqlgraph.Neighbors(pota.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderOrderTokenAddressClient) Hooks() []Hook {
	return c.hooks.ProviderOrderTokenAddress
}

// Interceptors returns the client interceptors.
func (c *ProviderOrderTokenAddressClient) Interceptors() []Interceptor {
	return c.inters.ProviderOrderTokenAddress
}

func (c *ProviderOrderTokenAddressClient) mutate(ctx context.Context, m *ProviderOrderTokenAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderOrderTokenAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderOrderTokenAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderOrderTokenAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderOrderTokenAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderOrderTokenAddress mutation op: %q", m.Op())
	}
}

// ProviderProfileClient is a client for the ProviderProfile schema.
type ProviderProfileClient struct {
	config
}

// NewProviderProfileClient returns a client for the ProviderProfile from the given config.
func NewProviderProfileClient(c config) *ProviderProfileClient {
	return &ProviderProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerprofile.Hooks(f(g(h())))`.
func (c *ProviderProfileClient) Use(hooks ...Hook) {
	c.hooks.ProviderProfile = append(c.hooks.ProviderProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerprofile.Intercept(f(g(h())))`.
func (c *ProviderProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderProfile = append(c.inters.ProviderProfile, interceptors...)
}

// Create returns a builder for creating a ProviderProfile entity.
func (c *ProviderProfileClient) Create() *ProviderProfileCreate {
	mutation := newProviderProfileMutation(c.config, OpCreate)
	return &ProviderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderProfile entities.
func (c *ProviderProfileClient) CreateBulk(builders ...*ProviderProfileCreate) *ProviderProfileCreateBulk {
	return &ProviderProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderProfile.
func (c *ProviderProfileClient) Update() *ProviderProfileUpdate {
	mutation := newProviderProfileMutation(c.config, OpUpdate)
	return &ProviderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderProfileClient) UpdateOne(pp *ProviderProfile) *ProviderProfileUpdateOne {
	mutation := newProviderProfileMutation(c.config, OpUpdateOne, withProviderProfile(pp))
	return &ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderProfileClient) UpdateOneID(id string) *ProviderProfileUpdateOne {
	mutation := newProviderProfileMutation(c.config, OpUpdateOne, withProviderProfileID(id))
	return &ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderProfile.
func (c *ProviderProfileClient) Delete() *ProviderProfileDelete {
	mutation := newProviderProfileMutation(c.config, OpDelete)
	return &ProviderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderProfileClient) DeleteOne(pp *ProviderProfile) *ProviderProfileDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderProfileClient) DeleteOneID(id string) *ProviderProfileDeleteOne {
	builder := c.Delete().Where(providerprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderProfileDeleteOne{builder}
}

// Query returns a query builder for ProviderProfile.
func (c *ProviderProfileClient) Query() *ProviderProfileQuery {
	return &ProviderProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderProfile entity by its id.
func (c *ProviderProfileClient) Get(ctx context.Context, id string) (*ProviderProfile, error) {
	return c.Query().Where(providerprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderProfileClient) GetX(ctx context.Context, id string) *ProviderProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAPIKey queries the api_key edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryAPIKey(pp *ProviderProfile) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, providerprofile.APIKeyTable, providerprofile.APIKeyColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderTokens queries the order_tokens edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryOrderTokens(pp *ProviderProfile) *ProviderOrderTokenQuery {
	query := (&ProviderOrderTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(providerordertoken.Table, providerordertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerprofile.OrderTokensTable, providerprofile.OrderTokensColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailability queries the availability edge of a ProviderProfile.
func (c *ProviderProfileClient) QueryAvailability(pp *ProviderProfile) *ProviderAvailabilityQuery {
	query := (&ProviderAvailabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerprofile.Table, providerprofile.FieldID, id),
			sqlgraph.To(provideravailability.Table, provideravailability.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, providerprofile.AvailabilityTable, providerprofile.AvailabilityColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderProfileClient) Hooks() []Hook {
	return c.hooks.ProviderProfile
}

// Interceptors returns the client interceptors.
func (c *ProviderProfileClient) Interceptors() []Interceptor {
	return c.inters.ProviderProfile
}

func (c *ProviderProfileClient) mutate(ctx context.Context, m *ProviderProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderProfile mutation op: %q", m.Op())
	}
}

// ReceiveAddressClient is a client for the ReceiveAddress schema.
type ReceiveAddressClient struct {
	config
}

// NewReceiveAddressClient returns a client for the ReceiveAddress from the given config.
func NewReceiveAddressClient(c config) *ReceiveAddressClient {
	return &ReceiveAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `receiveaddress.Hooks(f(g(h())))`.
func (c *ReceiveAddressClient) Use(hooks ...Hook) {
	c.hooks.ReceiveAddress = append(c.hooks.ReceiveAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `receiveaddress.Intercept(f(g(h())))`.
func (c *ReceiveAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReceiveAddress = append(c.inters.ReceiveAddress, interceptors...)
}

// Create returns a builder for creating a ReceiveAddress entity.
func (c *ReceiveAddressClient) Create() *ReceiveAddressCreate {
	mutation := newReceiveAddressMutation(c.config, OpCreate)
	return &ReceiveAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReceiveAddress entities.
func (c *ReceiveAddressClient) CreateBulk(builders ...*ReceiveAddressCreate) *ReceiveAddressCreateBulk {
	return &ReceiveAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReceiveAddress.
func (c *ReceiveAddressClient) Update() *ReceiveAddressUpdate {
	mutation := newReceiveAddressMutation(c.config, OpUpdate)
	return &ReceiveAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReceiveAddressClient) UpdateOne(ra *ReceiveAddress) *ReceiveAddressUpdateOne {
	mutation := newReceiveAddressMutation(c.config, OpUpdateOne, withReceiveAddress(ra))
	return &ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReceiveAddressClient) UpdateOneID(id int) *ReceiveAddressUpdateOne {
	mutation := newReceiveAddressMutation(c.config, OpUpdateOne, withReceiveAddressID(id))
	return &ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReceiveAddress.
func (c *ReceiveAddressClient) Delete() *ReceiveAddressDelete {
	mutation := newReceiveAddressMutation(c.config, OpDelete)
	return &ReceiveAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReceiveAddressClient) DeleteOne(ra *ReceiveAddress) *ReceiveAddressDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReceiveAddressClient) DeleteOneID(id int) *ReceiveAddressDeleteOne {
	builder := c.Delete().Where(receiveaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReceiveAddressDeleteOne{builder}
}

// Query returns a query builder for ReceiveAddress.
func (c *ReceiveAddressClient) Query() *ReceiveAddressQuery {
	return &ReceiveAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReceiveAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a ReceiveAddress entity by its id.
func (c *ReceiveAddressClient) Get(ctx context.Context, id int) (*ReceiveAddress, error) {
	return c.Query().Where(receiveaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReceiveAddressClient) GetX(ctx context.Context, id int) *ReceiveAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentOrder queries the payment_order edge of a ReceiveAddress.
func (c *ReceiveAddressClient) QueryPaymentOrder(ra *ReceiveAddress) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(receiveaddress.Table, receiveaddress.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, receiveaddress.PaymentOrderTable, receiveaddress.PaymentOrderColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReceiveAddressClient) Hooks() []Hook {
	return c.hooks.ReceiveAddress
}

// Interceptors returns the client interceptors.
func (c *ReceiveAddressClient) Interceptors() []Interceptor {
	return c.inters.ReceiveAddress
}

func (c *ReceiveAddressClient) mutate(ctx context.Context, m *ReceiveAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReceiveAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReceiveAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReceiveAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReceiveAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReceiveAddress mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetwork queries the network edge of a Token.
func (c *TokenClient) QueryNetwork(t *Token) *NetworkQuery {
	query := (&NetworkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, token.NetworkTable, token.NetworkColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentOrders queries the payment_orders edge of a Token.
func (c *TokenClient) QueryPaymentOrders(t *Token) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, token.PaymentOrdersTable, token.PaymentOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAPIKeys queries the api_keys edge of a User.
func (c *UserClient) QueryAPIKeys(u *User) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APIKeysTable, user.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APIKey, Network, PaymentOrder, PaymentOrderRecipient, ProviderAvailability,
		ProviderOrderToken, ProviderOrderTokenAddress, ProviderProfile, ReceiveAddress,
		Token, User []ent.Hook
	}
	inters struct {
		APIKey, Network, PaymentOrder, PaymentOrderRecipient, ProviderAvailability,
		ProviderOrderToken, ProviderOrderTokenAddress, ProviderProfile, ReceiveAddress,
		Token, User []ent.Interceptor
	}
)
