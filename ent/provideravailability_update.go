// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/provideravailability"
	"github.com/paycrest/paycrest-protocol/ent/providerprofile"
)

// ProviderAvailabilityUpdate is the builder for updating ProviderAvailability entities.
type ProviderAvailabilityUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderAvailabilityMutation
}

// Where appends a list predicates to the ProviderAvailabilityUpdate builder.
func (pau *ProviderAvailabilityUpdate) Where(ps ...predicate.ProviderAvailability) *ProviderAvailabilityUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetCadence sets the "cadence" field.
func (pau *ProviderAvailabilityUpdate) SetCadence(pr provideravailability.Cadence) *ProviderAvailabilityUpdate {
	pau.mutation.SetCadence(pr)
	return pau
}

// SetStartTime sets the "start_time" field.
func (pau *ProviderAvailabilityUpdate) SetStartTime(t time.Time) *ProviderAvailabilityUpdate {
	pau.mutation.SetStartTime(t)
	return pau
}

// SetEndTime sets the "end_time" field.
func (pau *ProviderAvailabilityUpdate) SetEndTime(t time.Time) *ProviderAvailabilityUpdate {
	pau.mutation.SetEndTime(t)
	return pau
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pau *ProviderAvailabilityUpdate) SetProviderID(id string) *ProviderAvailabilityUpdate {
	pau.mutation.SetProviderID(id)
	return pau
}

// SetNillableProviderID sets the "provider" edge to the ProviderProfile entity by ID if the given value is not nil.
func (pau *ProviderAvailabilityUpdate) SetNillableProviderID(id *string) *ProviderAvailabilityUpdate {
	if id != nil {
		pau = pau.SetProviderID(*id)
	}
	return pau
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pau *ProviderAvailabilityUpdate) SetProvider(p *ProviderProfile) *ProviderAvailabilityUpdate {
	return pau.SetProviderID(p.ID)
}

// Mutation returns the ProviderAvailabilityMutation object of the builder.
func (pau *ProviderAvailabilityUpdate) Mutation() *ProviderAvailabilityMutation {
	return pau.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pau *ProviderAvailabilityUpdate) ClearProvider() *ProviderAvailabilityUpdate {
	pau.mutation.ClearProvider()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *ProviderAvailabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *ProviderAvailabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *ProviderAvailabilityUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *ProviderAvailabilityUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pau *ProviderAvailabilityUpdate) check() error {
	if v, ok := pau.mutation.Cadence(); ok {
		if err := provideravailability.CadenceValidator(v); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "ProviderAvailability.cadence": %w`, err)}
		}
	}
	return nil
}

func (pau *ProviderAvailabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(provideravailability.Table, provideravailability.Columns, sqlgraph.NewFieldSpec(provideravailability.FieldID, field.TypeInt))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Cadence(); ok {
		_spec.SetField(provideravailability.FieldCadence, field.TypeEnum, value)
	}
	if value, ok := pau.mutation.StartTime(); ok {
		_spec.SetField(provideravailability.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := pau.mutation.EndTime(); ok {
		_spec.SetField(provideravailability.FieldEndTime, field.TypeTime, value)
	}
	if pau.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provideravailability.ProviderTable,
			Columns: []string{provideravailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provideravailability.ProviderTable,
			Columns: []string{provideravailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provideravailability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// ProviderAvailabilityUpdateOne is the builder for updating a single ProviderAvailability entity.
type ProviderAvailabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderAvailabilityMutation
}

// SetCadence sets the "cadence" field.
func (pauo *ProviderAvailabilityUpdateOne) SetCadence(pr provideravailability.Cadence) *ProviderAvailabilityUpdateOne {
	pauo.mutation.SetCadence(pr)
	return pauo
}

// SetStartTime sets the "start_time" field.
func (pauo *ProviderAvailabilityUpdateOne) SetStartTime(t time.Time) *ProviderAvailabilityUpdateOne {
	pauo.mutation.SetStartTime(t)
	return pauo
}

// SetEndTime sets the "end_time" field.
func (pauo *ProviderAvailabilityUpdateOne) SetEndTime(t time.Time) *ProviderAvailabilityUpdateOne {
	pauo.mutation.SetEndTime(t)
	return pauo
}

// SetProviderID sets the "provider" edge to the ProviderProfile entity by ID.
func (pauo *ProviderAvailabilityUpdateOne) SetProviderID(id string) *ProviderAvailabilityUpdateOne {
	pauo.mutation.SetProviderID(id)
	return pauo
}

// SetNillableProviderID sets the "provider" edge to the ProviderProfile entity by ID if the given value is not nil.
func (pauo *ProviderAvailabilityUpdateOne) SetNillableProviderID(id *string) *ProviderAvailabilityUpdateOne {
	if id != nil {
		pauo = pauo.SetProviderID(*id)
	}
	return pauo
}

// SetProvider sets the "provider" edge to the ProviderProfile entity.
func (pauo *ProviderAvailabilityUpdateOne) SetProvider(p *ProviderProfile) *ProviderAvailabilityUpdateOne {
	return pauo.SetProviderID(p.ID)
}

// Mutation returns the ProviderAvailabilityMutation object of the builder.
func (pauo *ProviderAvailabilityUpdateOne) Mutation() *ProviderAvailabilityMutation {
	return pauo.mutation
}

// ClearProvider clears the "provider" edge to the ProviderProfile entity.
func (pauo *ProviderAvailabilityUpdateOne) ClearProvider() *ProviderAvailabilityUpdateOne {
	pauo.mutation.ClearProvider()
	return pauo
}

// Where appends a list predicates to the ProviderAvailabilityUpdate builder.
func (pauo *ProviderAvailabilityUpdateOne) Where(ps ...predicate.ProviderAvailability) *ProviderAvailabilityUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *ProviderAvailabilityUpdateOne) Select(field string, fields ...string) *ProviderAvailabilityUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated ProviderAvailability entity.
func (pauo *ProviderAvailabilityUpdateOne) Save(ctx context.Context) (*ProviderAvailability, error) {
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *ProviderAvailabilityUpdateOne) SaveX(ctx context.Context) *ProviderAvailability {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *ProviderAvailabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *ProviderAvailabilityUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pauo *ProviderAvailabilityUpdateOne) check() error {
	if v, ok := pauo.mutation.Cadence(); ok {
		if err := provideravailability.CadenceValidator(v); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`ent: validator failed for field "ProviderAvailability.cadence": %w`, err)}
		}
	}
	return nil
}

func (pauo *ProviderAvailabilityUpdateOne) sqlSave(ctx context.Context) (_node *ProviderAvailability, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(provideravailability.Table, provideravailability.Columns, sqlgraph.NewFieldSpec(provideravailability.FieldID, field.TypeInt))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderAvailability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provideravailability.FieldID)
		for _, f := range fields {
			if !provideravailability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provideravailability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.Cadence(); ok {
		_spec.SetField(provideravailability.FieldCadence, field.TypeEnum, value)
	}
	if value, ok := pauo.mutation.StartTime(); ok {
		_spec.SetField(provideravailability.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.EndTime(); ok {
		_spec.SetField(provideravailability.FieldEndTime, field.TypeTime, value)
	}
	if pauo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provideravailability.ProviderTable,
			Columns: []string{provideravailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   provideravailability.ProviderTable,
			Columns: []string{provideravailability.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderAvailability{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provideravailability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
