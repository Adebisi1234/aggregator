// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
)

// ProviderOrderTokenAddressDelete is the builder for deleting a ProviderOrderTokenAddress entity.
type ProviderOrderTokenAddressDelete struct {
	config
	hooks    []Hook
	mutation *ProviderOrderTokenAddressMutation
}

// Where appends a list predicates to the ProviderOrderTokenAddressDelete builder.
func (potad *ProviderOrderTokenAddressDelete) Where(ps ...predicate.ProviderOrderTokenAddress) *ProviderOrderTokenAddressDelete {
	potad.mutation.Where(ps...)
	return potad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (potad *ProviderOrderTokenAddressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ProviderOrderTokenAddressMutation](ctx, potad.sqlExec, potad.mutation, potad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (potad *ProviderOrderTokenAddressDelete) ExecX(ctx context.Context) int {
	n, err := potad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (potad *ProviderOrderTokenAddressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(providerordertokenaddress.Table, sqlgraph.NewFieldSpec(providerordertokenaddress.FieldID, field.TypeInt))
	if ps := potad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, potad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	potad.mutation.done = true
	return affected, err
}

// ProviderOrderTokenAddressDeleteOne is the builder for deleting a single ProviderOrderTokenAddress entity.
type ProviderOrderTokenAddressDeleteOne struct {
	potad *ProviderOrderTokenAddressDelete
}

// Where appends a list predicates to the ProviderOrderTokenAddressDelete builder.
func (potado *ProviderOrderTokenAddressDeleteOne) Where(ps ...predicate.ProviderOrderTokenAddress) *ProviderOrderTokenAddressDeleteOne {
	potado.potad.mutation.Where(ps...)
	return potado
}

// Exec executes the deletion query.
func (potado *ProviderOrderTokenAddressDeleteOne) Exec(ctx context.Context) error {
	n, err := potado.potad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{providerordertokenaddress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (potado *ProviderOrderTokenAddressDeleteOne) ExecX(ctx context.Context) {
	if err := potado.Exec(ctx); err != nil {
		panic(err)
	}
}
