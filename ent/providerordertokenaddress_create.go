// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/paycrest-protocol/ent/providerordertoken"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
)

// ProviderOrderTokenAddressCreate is the builder for creating a ProviderOrderTokenAddress entity.
type ProviderOrderTokenAddressCreate struct {
	config
	mutation *ProviderOrderTokenAddressMutation
	hooks    []Hook
}

// SetNetwork sets the "network" field.
func (potac *ProviderOrderTokenAddressCreate) SetNetwork(pr providerordertokenaddress.Network) *ProviderOrderTokenAddressCreate {
	potac.mutation.SetNetwork(pr)
	return potac
}

// SetAddress sets the "address" field.
func (potac *ProviderOrderTokenAddressCreate) SetAddress(s string) *ProviderOrderTokenAddressCreate {
	potac.mutation.SetAddress(s)
	return potac
}

// SetProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID.
func (potac *ProviderOrderTokenAddressCreate) SetProviderordertokenID(id int) *ProviderOrderTokenAddressCreate {
	potac.mutation.SetProviderordertokenID(id)
	return potac
}

// SetNillableProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID if the given value is not nil.
func (potac *ProviderOrderTokenAddressCreate) SetNillableProviderordertokenID(id *int) *ProviderOrderTokenAddressCreate {
	if id != nil {
		potac = potac.SetProviderordertokenID(*id)
	}
	return potac
}

// SetProviderordertoken sets the "providerordertoken" edge to the ProviderOrderToken entity.
func (potac *ProviderOrderTokenAddressCreate) SetProviderordertoken(p *ProviderOrderToken) *ProviderOrderTokenAddressCreate {
	return potac.SetProviderordertokenID(p.ID)
}

// Mutation returns the ProviderOrderTokenAddressMutation object of the builder.
func (potac *ProviderOrderTokenAddressCreate) Mutation() *ProviderOrderTokenAddressMutation {
	return potac.mutation
}

// Save creates the ProviderOrderTokenAddress in the database.
func (potac *ProviderOrderTokenAddressCreate) Save(ctx context.Context) (*ProviderOrderTokenAddress, error) {
	return withHooks[*ProviderOrderTokenAddress, ProviderOrderTokenAddressMutation](ctx, potac.sqlSave, potac.mutation, potac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (potac *ProviderOrderTokenAddressCreate) SaveX(ctx context.Context) *ProviderOrderTokenAddress {
	v, err := potac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (potac *ProviderOrderTokenAddressCreate) Exec(ctx context.Context) error {
	_, err := potac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (potac *ProviderOrderTokenAddressCreate) ExecX(ctx context.Context) {
	if err := potac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (potac *ProviderOrderTokenAddressCreate) check() error {
	if _, ok := potac.mutation.Network(); !ok {
		return &ValidationError{Name: "network", err: errors.New(`ent: missing required field "ProviderOrderTokenAddress.network"`)}
	}
	if v, ok := potac.mutation.Network(); ok {
		if err := providerordertokenaddress.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.network": %w`, err)}
		}
	}
	if _, ok := potac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "ProviderOrderTokenAddress.address"`)}
	}
	if v, ok := potac.mutation.Address(); ok {
		if err := providerordertokenaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.address": %w`, err)}
		}
	}
	return nil
}

func (potac *ProviderOrderTokenAddressCreate) sqlSave(ctx context.Context) (*ProviderOrderTokenAddress, error) {
	if err := potac.check(); err != nil {
		return nil, err
	}
	_node, _spec := potac.createSpec()
	if err := sqlgraph.CreateNode(ctx, potac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	potac.mutation.id = &_node.ID
	potac.mutation.done = true
	return _node, nil
}

func (potac *ProviderOrderTokenAddressCreate) createSpec() (*ProviderOrderTokenAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderOrderTokenAddress{config: potac.config}
		_spec = sqlgraph.NewCreateSpec(providerordertokenaddress.Table, sqlgraph.NewFieldSpec(providerordertokenaddress.FieldID, field.TypeInt))
	)
	if value, ok := potac.mutation.Network(); ok {
		_spec.SetField(providerordertokenaddress.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	if value, ok := potac.mutation.Address(); ok {
		_spec.SetField(providerordertokenaddress.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := potac.mutation.ProviderordertokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerordertokenaddress.ProviderordertokenTable,
			Columns: []string{providerordertokenaddress.ProviderordertokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_order_token_addresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderOrderTokenAddressCreateBulk is the builder for creating many ProviderOrderTokenAddress entities in bulk.
type ProviderOrderTokenAddressCreateBulk struct {
	config
	builders []*ProviderOrderTokenAddressCreate
}

// Save creates the ProviderOrderTokenAddress entities in the database.
func (potacb *ProviderOrderTokenAddressCreateBulk) Save(ctx context.Context) ([]*ProviderOrderTokenAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(potacb.builders))
	nodes := make([]*ProviderOrderTokenAddress, len(potacb.builders))
	mutators := make([]Mutator, len(potacb.builders))
	for i := range potacb.builders {
		func(i int, root context.Context) {
			builder := potacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderOrderTokenAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, potacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, potacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, potacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (potacb *ProviderOrderTokenAddressCreateBulk) SaveX(ctx context.Context) []*ProviderOrderTokenAddress {
	v, err := potacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (potacb *ProviderOrderTokenAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := potacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (potacb *ProviderOrderTokenAddressCreateBulk) ExecX(ctx context.Context) {
	if err := potacb.Exec(ctx); err != nil {
		panic(err)
	}
}
