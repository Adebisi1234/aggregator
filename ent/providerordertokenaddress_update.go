// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/providerordertoken"
	"github.com/paycrest/paycrest-protocol/ent/providerordertokenaddress"
)

// ProviderOrderTokenAddressUpdate is the builder for updating ProviderOrderTokenAddress entities.
type ProviderOrderTokenAddressUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderOrderTokenAddressMutation
}

// Where appends a list predicates to the ProviderOrderTokenAddressUpdate builder.
func (potau *ProviderOrderTokenAddressUpdate) Where(ps ...predicate.ProviderOrderTokenAddress) *ProviderOrderTokenAddressUpdate {
	potau.mutation.Where(ps...)
	return potau
}

// SetNetwork sets the "network" field.
func (potau *ProviderOrderTokenAddressUpdate) SetNetwork(pr providerordertokenaddress.Network) *ProviderOrderTokenAddressUpdate {
	potau.mutation.SetNetwork(pr)
	return potau
}

// SetAddress sets the "address" field.
func (potau *ProviderOrderTokenAddressUpdate) SetAddress(s string) *ProviderOrderTokenAddressUpdate {
	potau.mutation.SetAddress(s)
	return potau
}

// SetProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID.
func (potau *ProviderOrderTokenAddressUpdate) SetProviderordertokenID(id int) *ProviderOrderTokenAddressUpdate {
	potau.mutation.SetProviderordertokenID(id)
	return potau
}

// SetNillableProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID if the given value is not nil.
func (potau *ProviderOrderTokenAddressUpdate) SetNillableProviderordertokenID(id *int) *ProviderOrderTokenAddressUpdate {
	if id != nil {
		potau = potau.SetProviderordertokenID(*id)
	}
	return potau
}

// SetProviderordertoken sets the "providerordertoken" edge to the ProviderOrderToken entity.
func (potau *ProviderOrderTokenAddressUpdate) SetProviderordertoken(p *ProviderOrderToken) *ProviderOrderTokenAddressUpdate {
	return potau.SetProviderordertokenID(p.ID)
}

// Mutation returns the ProviderOrderTokenAddressMutation object of the builder.
func (potau *ProviderOrderTokenAddressUpdate) Mutation() *ProviderOrderTokenAddressMutation {
	return potau.mutation
}

// ClearProviderordertoken clears the "providerordertoken" edge to the ProviderOrderToken entity.
func (potau *ProviderOrderTokenAddressUpdate) ClearProviderordertoken() *ProviderOrderTokenAddressUpdate {
	potau.mutation.ClearProviderordertoken()
	return potau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (potau *ProviderOrderTokenAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProviderOrderTokenAddressMutation](ctx, potau.sqlSave, potau.mutation, potau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (potau *ProviderOrderTokenAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := potau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (potau *ProviderOrderTokenAddressUpdate) Exec(ctx context.Context) error {
	_, err := potau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (potau *ProviderOrderTokenAddressUpdate) ExecX(ctx context.Context) {
	if err := potau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (potau *ProviderOrderTokenAddressUpdate) check() error {
	if v, ok := potau.mutation.Network(); ok {
		if err := providerordertokenaddress.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.network": %w`, err)}
		}
	}
	if v, ok := potau.mutation.Address(); ok {
		if err := providerordertokenaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.address": %w`, err)}
		}
	}
	return nil
}

func (potau *ProviderOrderTokenAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := potau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerordertokenaddress.Table, providerordertokenaddress.Columns, sqlgraph.NewFieldSpec(providerordertokenaddress.FieldID, field.TypeInt))
	if ps := potau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := potau.mutation.Network(); ok {
		_spec.SetField(providerordertokenaddress.FieldNetwork, field.TypeEnum, value)
	}
	if value, ok := potau.mutation.Address(); ok {
		_spec.SetField(providerordertokenaddress.FieldAddress, field.TypeString, value)
	}
	if potau.mutation.ProviderordertokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerordertokenaddress.ProviderordertokenTable,
			Columns: []string{providerordertokenaddress.ProviderordertokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := potau.mutation.ProviderordertokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerordertokenaddress.ProviderordertokenTable,
			Columns: []string{providerordertokenaddress.ProviderordertokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, potau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerordertokenaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	potau.mutation.done = true
	return n, nil
}

// ProviderOrderTokenAddressUpdateOne is the builder for updating a single ProviderOrderTokenAddress entity.
type ProviderOrderTokenAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderOrderTokenAddressMutation
}

// SetNetwork sets the "network" field.
func (potauo *ProviderOrderTokenAddressUpdateOne) SetNetwork(pr providerordertokenaddress.Network) *ProviderOrderTokenAddressUpdateOne {
	potauo.mutation.SetNetwork(pr)
	return potauo
}

// SetAddress sets the "address" field.
func (potauo *ProviderOrderTokenAddressUpdateOne) SetAddress(s string) *ProviderOrderTokenAddressUpdateOne {
	potauo.mutation.SetAddress(s)
	return potauo
}

// SetProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID.
func (potauo *ProviderOrderTokenAddressUpdateOne) SetProviderordertokenID(id int) *ProviderOrderTokenAddressUpdateOne {
	potauo.mutation.SetProviderordertokenID(id)
	return potauo
}

// SetNillableProviderordertokenID sets the "providerordertoken" edge to the ProviderOrderToken entity by ID if the given value is not nil.
func (potauo *ProviderOrderTokenAddressUpdateOne) SetNillableProviderordertokenID(id *int) *ProviderOrderTokenAddressUpdateOne {
	if id != nil {
		potauo = potauo.SetProviderordertokenID(*id)
	}
	return potauo
}

// SetProviderordertoken sets the "providerordertoken" edge to the ProviderOrderToken entity.
func (potauo *ProviderOrderTokenAddressUpdateOne) SetProviderordertoken(p *ProviderOrderToken) *ProviderOrderTokenAddressUpdateOne {
	return potauo.SetProviderordertokenID(p.ID)
}

// Mutation returns the ProviderOrderTokenAddressMutation object of the builder.
func (potauo *ProviderOrderTokenAddressUpdateOne) Mutation() *ProviderOrderTokenAddressMutation {
	return potauo.mutation
}

// ClearProviderordertoken clears the "providerordertoken" edge to the ProviderOrderToken entity.
func (potauo *ProviderOrderTokenAddressUpdateOne) ClearProviderordertoken() *ProviderOrderTokenAddressUpdateOne {
	potauo.mutation.ClearProviderordertoken()
	return potauo
}

// Where appends a list predicates to the ProviderOrderTokenAddressUpdate builder.
func (potauo *ProviderOrderTokenAddressUpdateOne) Where(ps ...predicate.ProviderOrderTokenAddress) *ProviderOrderTokenAddressUpdateOne {
	potauo.mutation.Where(ps...)
	return potauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (potauo *ProviderOrderTokenAddressUpdateOne) Select(field string, fields ...string) *ProviderOrderTokenAddressUpdateOne {
	potauo.fields = append([]string{field}, fields...)
	return potauo
}

// Save executes the query and returns the updated ProviderOrderTokenAddress entity.
func (potauo *ProviderOrderTokenAddressUpdateOne) Save(ctx context.Context) (*ProviderOrderTokenAddress, error) {
	return withHooks[*ProviderOrderTokenAddress, ProviderOrderTokenAddressMutation](ctx, potauo.sqlSave, potauo.mutation, potauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (potauo *ProviderOrderTokenAddressUpdateOne) SaveX(ctx context.Context) *ProviderOrderTokenAddress {
	node, err := potauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (potauo *ProviderOrderTokenAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := potauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (potauo *ProviderOrderTokenAddressUpdateOne) ExecX(ctx context.Context) {
	if err := potauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (potauo *ProviderOrderTokenAddressUpdateOne) check() error {
	if v, ok := potauo.mutation.Network(); ok {
		if err := providerordertokenaddress.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.network": %w`, err)}
		}
	}
	if v, ok := potauo.mutation.Address(); ok {
		if err := providerordertokenaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "ProviderOrderTokenAddress.address": %w`, err)}
		}
	}
	return nil
}

func (potauo *ProviderOrderTokenAddressUpdateOne) sqlSave(ctx context.Context) (_node *ProviderOrderTokenAddress, err error) {
	if err := potauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerordertokenaddress.Table, providerordertokenaddress.Columns, sqlgraph.NewFieldSpec(providerordertokenaddress.FieldID, field.TypeInt))
	id, ok := potauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderOrderTokenAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := potauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerordertokenaddress.FieldID)
		for _, f := range fields {
			if !providerordertokenaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerordertokenaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := potauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := potauo.mutation.Network(); ok {
		_spec.SetField(providerordertokenaddress.FieldNetwork, field.TypeEnum, value)
	}
	if value, ok := potauo.mutation.Address(); ok {
		_spec.SetField(providerordertokenaddress.FieldAddress, field.TypeString, value)
	}
	if potauo.mutation.ProviderordertokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerordertokenaddress.ProviderordertokenTable,
			Columns: []string{providerordertokenaddress.ProviderordertokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := potauo.mutation.ProviderordertokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerordertokenaddress.ProviderordertokenTable,
			Columns: []string{providerordertokenaddress.ProviderordertokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerordertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderOrderTokenAddress{config: potauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, potauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerordertokenaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	potauo.mutation.done = true
	return _node, nil
}
