// Code generated by ent, DO NOT EDIT.

package providerordertokenaddress

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the providerordertokenaddress type in the database.
	Label = "provider_order_token_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// EdgeProviderordertoken holds the string denoting the providerordertoken edge name in mutations.
	EdgeProviderordertoken = "providerordertoken"
	// Table holds the table name of the providerordertokenaddress in the database.
	Table = "provider_order_token_addresses"
	// ProviderordertokenTable is the table that holds the providerordertoken relation/edge.
	ProviderordertokenTable = "provider_order_token_addresses"
	// ProviderordertokenInverseTable is the table name for the ProviderOrderToken entity.
	// It exists in this package in order to avoid circular dependency with the "providerordertoken" package.
	ProviderordertokenInverseTable = "provider_order_tokens"
	// ProviderordertokenColumn is the table column denoting the providerordertoken relation/edge.
	ProviderordertokenColumn = "provider_order_token_addresses"
)

// Columns holds all SQL columns for providerordertokenaddress fields.
var Columns = []string{
	FieldID,
	FieldNetwork,
	FieldAddress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_order_token_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_order_token_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
)

// Network defines the type for the "network" enum field.
type Network string

// Network values.
const (
	NetworkBnbSmartChain Network = "bnb-smart-chain"
	NetworkPolygon       Network = "polygon"
	NetworkTron          Network = "tron"
	NetworkPolygonMumbai Network = "polygon-mumbai"
	NetworkTronShasta    Network = "tron-shasta"
)

func (n Network) String() string {
	return string(n)
}

// NetworkValidator is a validator for the "network" field enum values. It is called by the builders before save.
func NetworkValidator(n Network) error {
	switch n {
	case NetworkBnbSmartChain, NetworkPolygon, NetworkTron, NetworkPolygonMumbai, NetworkTronShasta:
		return nil
	default:
		return fmt.Errorf("providerordertokenaddress: invalid enum value for network field: %q", n)
	}
}

// OrderOption defines the ordering options for the ProviderOrderTokenAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByProviderordertokenField orders the results by providerordertoken field.
func ByProviderordertokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderordertokenStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderordertokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderordertokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderordertokenTable, ProviderordertokenColumn),
	)
}
