// Code generated by ent, DO NOT EDIT.

package provideravailability

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the provideravailability type in the database.
	Label = "provider_availability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCadence holds the string denoting the cadence field in the database.
	FieldCadence = "cadence"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// Table holds the table name of the provideravailability in the database.
	Table = "provider_availabilities"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "provider_availabilities"
	// ProviderInverseTable is the table name for the ProviderProfile entity.
	// It exists in this package in order to avoid circular dependency with the "providerprofile" package.
	ProviderInverseTable = "provider_profiles"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_profile_availability"
)

// Columns holds all SQL columns for provideravailability fields.
var Columns = []string{
	FieldID,
	FieldCadence,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_availabilities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_profile_availability",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Cadence defines the type for the "cadence" enum field.
type Cadence string

// Cadence values.
const (
	CadenceAlways   Cadence = "always"
	CadenceWeekdays Cadence = "weekdays"
	CadenceWeekends Cadence = "weekends"
)

func (c Cadence) String() string {
	return string(c)
}

// CadenceValidator is a validator for the "cadence" field enum values. It is called by the builders before save.
func CadenceValidator(c Cadence) error {
	switch c {
	case CadenceAlways, CadenceWeekdays, CadenceWeekends:
		return nil
	default:
		return fmt.Errorf("provideravailability: invalid enum value for cadence field: %q", c)
	}
}

// OrderOption defines the ordering options for the ProviderAvailability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCadence orders the results by the cadence field.
func ByCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadence, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProviderTable, ProviderColumn),
	)
}
