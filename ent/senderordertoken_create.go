// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/senderordertoken"
	"github.com/paycrest/protocol/ent/senderprofile"
	"github.com/shopspring/decimal"
)

// SenderOrderTokenCreate is the builder for creating a SenderOrderToken entity.
type SenderOrderTokenCreate struct {
	config
	mutation *SenderOrderTokenMutation
	hooks    []Hook
}

// SetSymbol sets the "symbol" field.
func (sotc *SenderOrderTokenCreate) SetSymbol(s string) *SenderOrderTokenCreate {
	sotc.mutation.SetSymbol(s)
	return sotc
}

// SetFeePerTokenUnit sets the "fee_per_token_unit" field.
func (sotc *SenderOrderTokenCreate) SetFeePerTokenUnit(d decimal.Decimal) *SenderOrderTokenCreate {
	sotc.mutation.SetFeePerTokenUnit(d)
	return sotc
}

// SetAddresses sets the "addresses" field.
func (sotc *SenderOrderTokenCreate) SetAddresses(sddaaaa []struct {
	IsDisabled    bool   "json:\"isDisabled\""
	FeeAddress    string "json:\"feeAddress\""
	RefundAddress string "json:\"refundAddress\""
	Network       string "json:\"network\""
}) *SenderOrderTokenCreate {
	sotc.mutation.SetAddresses(sddaaaa)
	return sotc
}

// SetSenderID sets the "sender" edge to the SenderProfile entity by ID.
func (sotc *SenderOrderTokenCreate) SetSenderID(id uuid.UUID) *SenderOrderTokenCreate {
	sotc.mutation.SetSenderID(id)
	return sotc
}

// SetNillableSenderID sets the "sender" edge to the SenderProfile entity by ID if the given value is not nil.
func (sotc *SenderOrderTokenCreate) SetNillableSenderID(id *uuid.UUID) *SenderOrderTokenCreate {
	if id != nil {
		sotc = sotc.SetSenderID(*id)
	}
	return sotc
}

// SetSender sets the "sender" edge to the SenderProfile entity.
func (sotc *SenderOrderTokenCreate) SetSender(s *SenderProfile) *SenderOrderTokenCreate {
	return sotc.SetSenderID(s.ID)
}

// Mutation returns the SenderOrderTokenMutation object of the builder.
func (sotc *SenderOrderTokenCreate) Mutation() *SenderOrderTokenMutation {
	return sotc.mutation
}

// Save creates the SenderOrderToken in the database.
func (sotc *SenderOrderTokenCreate) Save(ctx context.Context) (*SenderOrderToken, error) {
	return withHooks(ctx, sotc.sqlSave, sotc.mutation, sotc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sotc *SenderOrderTokenCreate) SaveX(ctx context.Context) *SenderOrderToken {
	v, err := sotc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sotc *SenderOrderTokenCreate) Exec(ctx context.Context) error {
	_, err := sotc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sotc *SenderOrderTokenCreate) ExecX(ctx context.Context) {
	if err := sotc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sotc *SenderOrderTokenCreate) check() error {
	if _, ok := sotc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "SenderOrderToken.symbol"`)}
	}
	if _, ok := sotc.mutation.FeePerTokenUnit(); !ok {
		return &ValidationError{Name: "fee_per_token_unit", err: errors.New(`ent: missing required field "SenderOrderToken.fee_per_token_unit"`)}
	}
	if _, ok := sotc.mutation.Addresses(); !ok {
		return &ValidationError{Name: "addresses", err: errors.New(`ent: missing required field "SenderOrderToken.addresses"`)}
	}
	return nil
}

func (sotc *SenderOrderTokenCreate) sqlSave(ctx context.Context) (*SenderOrderToken, error) {
	if err := sotc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sotc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sotc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sotc.mutation.id = &_node.ID
	sotc.mutation.done = true
	return _node, nil
}

func (sotc *SenderOrderTokenCreate) createSpec() (*SenderOrderToken, *sqlgraph.CreateSpec) {
	var (
		_node = &SenderOrderToken{config: sotc.config}
		_spec = sqlgraph.NewCreateSpec(senderordertoken.Table, sqlgraph.NewFieldSpec(senderordertoken.FieldID, field.TypeInt))
	)
	if value, ok := sotc.mutation.Symbol(); ok {
		_spec.SetField(senderordertoken.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := sotc.mutation.FeePerTokenUnit(); ok {
		_spec.SetField(senderordertoken.FieldFeePerTokenUnit, field.TypeFloat64, value)
		_node.FeePerTokenUnit = value
	}
	if value, ok := sotc.mutation.Addresses(); ok {
		_spec.SetField(senderordertoken.FieldAddresses, field.TypeJSON, value)
		_node.Addresses = value
	}
	if nodes := sotc.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   senderordertoken.SenderTable,
			Columns: []string{senderordertoken.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(senderprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sender_profile_order_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SenderOrderTokenCreateBulk is the builder for creating many SenderOrderToken entities in bulk.
type SenderOrderTokenCreateBulk struct {
	config
	builders []*SenderOrderTokenCreate
}

// Save creates the SenderOrderToken entities in the database.
func (sotcb *SenderOrderTokenCreateBulk) Save(ctx context.Context) ([]*SenderOrderToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sotcb.builders))
	nodes := make([]*SenderOrderToken, len(sotcb.builders))
	mutators := make([]Mutator, len(sotcb.builders))
	for i := range sotcb.builders {
		func(i int, root context.Context) {
			builder := sotcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SenderOrderTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sotcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sotcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sotcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sotcb *SenderOrderTokenCreateBulk) SaveX(ctx context.Context) []*SenderOrderToken {
	v, err := sotcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sotcb *SenderOrderTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := sotcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sotcb *SenderOrderTokenCreateBulk) ExecX(ctx context.Context) {
	if err := sotcb.Exec(ctx); err != nil {
		panic(err)
	}
}
