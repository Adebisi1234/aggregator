// Code generated by ent, DO NOT EDIT.

package identityverificationrequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the identityverificationrequest type in the database.
	Label = "identity_verification_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWalletAddress holds the string denoting the wallet_address field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformRef holds the string denoting the platform_ref field in the database.
	FieldPlatformRef = "platform_ref"
	// FieldVerificationURL holds the string denoting the verification_url field in the database.
	FieldVerificationURL = "verification_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFeeReclaimed holds the string denoting the fee_reclaimed field in the database.
	FieldFeeReclaimed = "fee_reclaimed"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the identityverificationrequest in the database.
	Table = "identity_verification_requests"
)

// Columns holds all SQL columns for identityverificationrequest fields.
var Columns = []string{
	FieldID,
	FieldWalletAddress,
	FieldPlatform,
	FieldPlatformRef,
	FieldVerificationURL,
	FieldStatus,
	FieldFeeReclaimed,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFeeReclaimed holds the default value on creation for the "fee_reclaimed" field.
	DefaultFeeReclaimed bool
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Platform defines the type for the "platform" enum field.
type Platform string

// Platform values.
const (
	PlatformSmileID Platform = "smile_id"
	PlatformMetamap Platform = "metamap"
	PlatformSumsub  Platform = "sumsub"
	PlatformSynaps  Platform = "synaps"
)

func (pl Platform) String() string {
	return string(pl)
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl Platform) error {
	switch pl {
	case PlatformSmileID, PlatformMetamap, PlatformSumsub, PlatformSynaps:
		return nil
	default:
		return fmt.Errorf("identityverificationrequest: invalid enum value for platform field: %q", pl)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusSuccess Status = "success"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusSuccess:
		return nil
	default:
		return fmt.Errorf("identityverificationrequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the IdentityVerificationRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWalletAddress orders the results by the wallet_address field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByPlatformRef orders the results by the platform_ref field.
func ByPlatformRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformRef, opts...).ToFunc()
}

// ByVerificationURL orders the results by the verification_url field.
func ByVerificationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFeeReclaimed orders the results by the fee_reclaimed field.
func ByFeeReclaimed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeeReclaimed, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
