// Code generated by ent, DO NOT EDIT.

package providerrating

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the providerrating type in the database.
	Label = "provider_rating"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTrustScore holds the string denoting the trust_score field in the database.
	FieldTrustScore = "trust_score"
	// EdgeProviderProfile holds the string denoting the provider_profile edge name in mutations.
	EdgeProviderProfile = "provider_profile"
	// Table holds the table name of the providerrating in the database.
	Table = "provider_ratings"
	// ProviderProfileTable is the table that holds the provider_profile relation/edge.
	ProviderProfileTable = "provider_ratings"
	// ProviderProfileInverseTable is the table name for the ProviderProfile entity.
	// It exists in this package in order to avoid circular dependency with the "providerprofile" package.
	ProviderProfileInverseTable = "provider_profiles"
	// ProviderProfileColumn is the table column denoting the provider_profile relation/edge.
	ProviderProfileColumn = "provider_profile_provider_rating"
)

// Columns holds all SQL columns for providerrating fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTrustScore,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_ratings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_profile_provider_rating",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProviderRating queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTrustScore orders the results by the trust_score field.
func ByTrustScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustScore, opts...).ToFunc()
}

// ByProviderProfileField orders the results by provider_profile field.
func ByProviderProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProviderProfileTable, ProviderProfileColumn),
	)
}
