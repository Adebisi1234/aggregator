// Code generated by ent, DO NOT EDIT.

package transactionlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transactionlog type in the database.
	Label = "transaction_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSenderAddress holds the string denoting the sender_address field in the database.
	FieldSenderAddress = "sender_address"
	// FieldProviderAddress holds the string denoting the provider_address field in the database.
	FieldProviderAddress = "provider_address"
	// FieldGatewayID holds the string denoting the gateway_id field in the database.
	FieldGatewayID = "gateway_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// FieldTransactionHash holds the string denoting the transaction_hash field in the database.
	FieldTransactionHash = "transaction_hash"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the transactionlog in the database.
	Table = "transaction_logs"
)

// Columns holds all SQL columns for transactionlog fields.
var Columns = []string{
	FieldID,
	FieldSenderAddress,
	FieldProviderAddress,
	FieldGatewayID,
	FieldStatus,
	FieldNetwork,
	FieldTransactionHash,
	FieldMetadata,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transaction_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"lock_payment_order_transactions",
	"payment_order_transactions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TransactionLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySenderAddress orders the results by the sender_address field.
func BySenderAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderAddress, opts...).ToFunc()
}

// ByProviderAddress orders the results by the provider_address field.
func ByProviderAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderAddress, opts...).ToFunc()
}

// ByGatewayID orders the results by the gateway_id field.
func ByGatewayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGatewayID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByTransactionHash orders the results by the transaction_hash field.
func ByTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionHash, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
