// Code generated by ent, DO NOT EDIT.

package transactionlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/paycrest/protocol/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldID, id))
}

// SenderAddress applies equality check predicate on the "sender_address" field. It's identical to SenderAddressEQ.
func SenderAddress(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldSenderAddress, v))
}

// ProviderAddress applies equality check predicate on the "provider_address" field. It's identical to ProviderAddressEQ.
func ProviderAddress(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldProviderAddress, v))
}

// GatewayID applies equality check predicate on the "gateway_id" field. It's identical to GatewayIDEQ.
func GatewayID(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldGatewayID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldStatus, v))
}

// Network applies equality check predicate on the "network" field. It's identical to NetworkEQ.
func Network(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldNetwork, v))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldTransactionHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// SenderAddressEQ applies the EQ predicate on the "sender_address" field.
func SenderAddressEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldSenderAddress, v))
}

// SenderAddressNEQ applies the NEQ predicate on the "sender_address" field.
func SenderAddressNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldSenderAddress, v))
}

// SenderAddressIn applies the In predicate on the "sender_address" field.
func SenderAddressIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldSenderAddress, vs...))
}

// SenderAddressNotIn applies the NotIn predicate on the "sender_address" field.
func SenderAddressNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldSenderAddress, vs...))
}

// SenderAddressGT applies the GT predicate on the "sender_address" field.
func SenderAddressGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldSenderAddress, v))
}

// SenderAddressGTE applies the GTE predicate on the "sender_address" field.
func SenderAddressGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldSenderAddress, v))
}

// SenderAddressLT applies the LT predicate on the "sender_address" field.
func SenderAddressLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldSenderAddress, v))
}

// SenderAddressLTE applies the LTE predicate on the "sender_address" field.
func SenderAddressLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldSenderAddress, v))
}

// SenderAddressContains applies the Contains predicate on the "sender_address" field.
func SenderAddressContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldSenderAddress, v))
}

// SenderAddressHasPrefix applies the HasPrefix predicate on the "sender_address" field.
func SenderAddressHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldSenderAddress, v))
}

// SenderAddressHasSuffix applies the HasSuffix predicate on the "sender_address" field.
func SenderAddressHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldSenderAddress, v))
}

// SenderAddressIsNil applies the IsNil predicate on the "sender_address" field.
func SenderAddressIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldSenderAddress))
}

// SenderAddressNotNil applies the NotNil predicate on the "sender_address" field.
func SenderAddressNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldSenderAddress))
}

// SenderAddressEqualFold applies the EqualFold predicate on the "sender_address" field.
func SenderAddressEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldSenderAddress, v))
}

// SenderAddressContainsFold applies the ContainsFold predicate on the "sender_address" field.
func SenderAddressContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldSenderAddress, v))
}

// ProviderAddressEQ applies the EQ predicate on the "provider_address" field.
func ProviderAddressEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldProviderAddress, v))
}

// ProviderAddressNEQ applies the NEQ predicate on the "provider_address" field.
func ProviderAddressNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldProviderAddress, v))
}

// ProviderAddressIn applies the In predicate on the "provider_address" field.
func ProviderAddressIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldProviderAddress, vs...))
}

// ProviderAddressNotIn applies the NotIn predicate on the "provider_address" field.
func ProviderAddressNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldProviderAddress, vs...))
}

// ProviderAddressGT applies the GT predicate on the "provider_address" field.
func ProviderAddressGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldProviderAddress, v))
}

// ProviderAddressGTE applies the GTE predicate on the "provider_address" field.
func ProviderAddressGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldProviderAddress, v))
}

// ProviderAddressLT applies the LT predicate on the "provider_address" field.
func ProviderAddressLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldProviderAddress, v))
}

// ProviderAddressLTE applies the LTE predicate on the "provider_address" field.
func ProviderAddressLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldProviderAddress, v))
}

// ProviderAddressContains applies the Contains predicate on the "provider_address" field.
func ProviderAddressContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldProviderAddress, v))
}

// ProviderAddressHasPrefix applies the HasPrefix predicate on the "provider_address" field.
func ProviderAddressHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldProviderAddress, v))
}

// ProviderAddressHasSuffix applies the HasSuffix predicate on the "provider_address" field.
func ProviderAddressHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldProviderAddress, v))
}

// ProviderAddressIsNil applies the IsNil predicate on the "provider_address" field.
func ProviderAddressIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldProviderAddress))
}

// ProviderAddressNotNil applies the NotNil predicate on the "provider_address" field.
func ProviderAddressNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldProviderAddress))
}

// ProviderAddressEqualFold applies the EqualFold predicate on the "provider_address" field.
func ProviderAddressEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldProviderAddress, v))
}

// ProviderAddressContainsFold applies the ContainsFold predicate on the "provider_address" field.
func ProviderAddressContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldProviderAddress, v))
}

// GatewayIDEQ applies the EQ predicate on the "gateway_id" field.
func GatewayIDEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldGatewayID, v))
}

// GatewayIDNEQ applies the NEQ predicate on the "gateway_id" field.
func GatewayIDNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldGatewayID, v))
}

// GatewayIDIn applies the In predicate on the "gateway_id" field.
func GatewayIDIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldGatewayID, vs...))
}

// GatewayIDNotIn applies the NotIn predicate on the "gateway_id" field.
func GatewayIDNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldGatewayID, vs...))
}

// GatewayIDGT applies the GT predicate on the "gateway_id" field.
func GatewayIDGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldGatewayID, v))
}

// GatewayIDGTE applies the GTE predicate on the "gateway_id" field.
func GatewayIDGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldGatewayID, v))
}

// GatewayIDLT applies the LT predicate on the "gateway_id" field.
func GatewayIDLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldGatewayID, v))
}

// GatewayIDLTE applies the LTE predicate on the "gateway_id" field.
func GatewayIDLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldGatewayID, v))
}

// GatewayIDContains applies the Contains predicate on the "gateway_id" field.
func GatewayIDContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldGatewayID, v))
}

// GatewayIDHasPrefix applies the HasPrefix predicate on the "gateway_id" field.
func GatewayIDHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldGatewayID, v))
}

// GatewayIDHasSuffix applies the HasSuffix predicate on the "gateway_id" field.
func GatewayIDHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldGatewayID, v))
}

// GatewayIDIsNil applies the IsNil predicate on the "gateway_id" field.
func GatewayIDIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldGatewayID))
}

// GatewayIDNotNil applies the NotNil predicate on the "gateway_id" field.
func GatewayIDNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldGatewayID))
}

// GatewayIDEqualFold applies the EqualFold predicate on the "gateway_id" field.
func GatewayIDEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldGatewayID, v))
}

// GatewayIDContainsFold applies the ContainsFold predicate on the "gateway_id" field.
func GatewayIDContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldGatewayID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldStatus, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldNetwork, v))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldNetwork, v))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldNetwork, vs...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldNetwork, vs...))
}

// NetworkGT applies the GT predicate on the "network" field.
func NetworkGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldNetwork, v))
}

// NetworkGTE applies the GTE predicate on the "network" field.
func NetworkGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldNetwork, v))
}

// NetworkLT applies the LT predicate on the "network" field.
func NetworkLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldNetwork, v))
}

// NetworkLTE applies the LTE predicate on the "network" field.
func NetworkLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldNetwork, v))
}

// NetworkContains applies the Contains predicate on the "network" field.
func NetworkContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldNetwork, v))
}

// NetworkHasPrefix applies the HasPrefix predicate on the "network" field.
func NetworkHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldNetwork, v))
}

// NetworkHasSuffix applies the HasSuffix predicate on the "network" field.
func NetworkHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldNetwork, v))
}

// NetworkIsNil applies the IsNil predicate on the "network" field.
func NetworkIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldNetwork))
}

// NetworkNotNil applies the NotNil predicate on the "network" field.
func NetworkNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldNetwork))
}

// NetworkEqualFold applies the EqualFold predicate on the "network" field.
func NetworkEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldNetwork, v))
}

// NetworkContainsFold applies the ContainsFold predicate on the "network" field.
func NetworkContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldNetwork, v))
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashIsNil applies the IsNil predicate on the "transaction_hash" field.
func TransactionHashIsNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIsNull(FieldTransactionHash))
}

// TransactionHashNotNil applies the NotNil predicate on the "transaction_hash" field.
func TransactionHashNotNil() predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotNull(FieldTransactionHash))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldContainsFold(FieldTransactionHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TransactionLog {
	return predicate.TransactionLog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransactionLog) predicate.TransactionLog {
	return predicate.TransactionLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
