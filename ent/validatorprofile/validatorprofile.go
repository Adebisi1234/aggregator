// Code generated by ent, DO NOT EDIT.

package validatorprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the validatorprofile type in the database.
	Label = "validator_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldWalletAddress holds the string denoting the wallet_address field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldHostIdentifier holds the string denoting the host_identifier field in the database.
	FieldHostIdentifier = "host_identifier"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeValidatedFulfillments holds the string denoting the validated_fulfillments edge name in mutations.
	EdgeValidatedFulfillments = "validated_fulfillments"
	// Table holds the table name of the validatorprofile in the database.
	Table = "validator_profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "validator_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_validator_profile"
	// ValidatedFulfillmentsTable is the table that holds the validated_fulfillments relation/edge. The primary key declared below.
	ValidatedFulfillmentsTable = "lock_order_fulfillment_validators"
	// ValidatedFulfillmentsInverseTable is the table name for the LockOrderFulfillment entity.
	// It exists in this package in order to avoid circular dependency with the "lockorderfulfillment" package.
	ValidatedFulfillmentsInverseTable = "lock_order_fulfillments"
)

// Columns holds all SQL columns for validatorprofile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldWalletAddress,
	FieldHostIdentifier,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "validator_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_validator_profile",
}

var (
	// ValidatedFulfillmentsPrimaryKey and ValidatedFulfillmentsColumn2 are the table columns denoting the
	// primary key for the validated_fulfillments relation (M2M).
	ValidatedFulfillmentsPrimaryKey = []string{"lock_order_fulfillment_id", "validator_profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ValidatorProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWalletAddress orders the results by the wallet_address field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}

// ByHostIdentifier orders the results by the host_identifier field.
func ByHostIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostIdentifier, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByValidatedFulfillmentsCount orders the results by validated_fulfillments count.
func ByValidatedFulfillmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newValidatedFulfillmentsStep(), opts...)
	}
}

// ByValidatedFulfillments orders the results by validated_fulfillments terms.
func ByValidatedFulfillments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValidatedFulfillmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newValidatedFulfillmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValidatedFulfillmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ValidatedFulfillmentsTable, ValidatedFulfillmentsPrimaryKey...),
	)
}
