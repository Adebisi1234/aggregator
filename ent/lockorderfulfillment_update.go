// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/lockorderfulfillment"
	"github.com/paycrest/paycrest-protocol/ent/lockpaymentorder"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
)

// LockOrderFulfillmentUpdate is the builder for updating LockOrderFulfillment entities.
type LockOrderFulfillmentUpdate struct {
	config
	hooks    []Hook
	mutation *LockOrderFulfillmentMutation
}

// Where appends a list predicates to the LockOrderFulfillmentUpdate builder.
func (lofu *LockOrderFulfillmentUpdate) Where(ps ...predicate.LockOrderFulfillment) *LockOrderFulfillmentUpdate {
	lofu.mutation.Where(ps...)
	return lofu
}

// SetUpdatedAt sets the "updated_at" field.
func (lofu *LockOrderFulfillmentUpdate) SetUpdatedAt(t time.Time) *LockOrderFulfillmentUpdate {
	lofu.mutation.SetUpdatedAt(t)
	return lofu
}

// SetTxID sets the "tx_id" field.
func (lofu *LockOrderFulfillmentUpdate) SetTxID(s string) *LockOrderFulfillmentUpdate {
	lofu.mutation.SetTxID(s)
	return lofu
}

// SetTxReceiptImage sets the "tx_receipt_image" field.
func (lofu *LockOrderFulfillmentUpdate) SetTxReceiptImage(s string) *LockOrderFulfillmentUpdate {
	lofu.mutation.SetTxReceiptImage(s)
	return lofu
}

// SetConfirmations sets the "confirmations" field.
func (lofu *LockOrderFulfillmentUpdate) SetConfirmations(i int) *LockOrderFulfillmentUpdate {
	lofu.mutation.ResetConfirmations()
	lofu.mutation.SetConfirmations(i)
	return lofu
}

// SetNillableConfirmations sets the "confirmations" field if the given value is not nil.
func (lofu *LockOrderFulfillmentUpdate) SetNillableConfirmations(i *int) *LockOrderFulfillmentUpdate {
	if i != nil {
		lofu.SetConfirmations(*i)
	}
	return lofu
}

// AddConfirmations adds i to the "confirmations" field.
func (lofu *LockOrderFulfillmentUpdate) AddConfirmations(i int) *LockOrderFulfillmentUpdate {
	lofu.mutation.AddConfirmations(i)
	return lofu
}

// SetOrderID sets the "order" edge to the LockPaymentOrder entity by ID.
func (lofu *LockOrderFulfillmentUpdate) SetOrderID(id uuid.UUID) *LockOrderFulfillmentUpdate {
	lofu.mutation.SetOrderID(id)
	return lofu
}

// SetOrder sets the "order" edge to the LockPaymentOrder entity.
func (lofu *LockOrderFulfillmentUpdate) SetOrder(l *LockPaymentOrder) *LockOrderFulfillmentUpdate {
	return lofu.SetOrderID(l.ID)
}

// Mutation returns the LockOrderFulfillmentMutation object of the builder.
func (lofu *LockOrderFulfillmentUpdate) Mutation() *LockOrderFulfillmentMutation {
	return lofu.mutation
}

// ClearOrder clears the "order" edge to the LockPaymentOrder entity.
func (lofu *LockOrderFulfillmentUpdate) ClearOrder() *LockOrderFulfillmentUpdate {
	lofu.mutation.ClearOrder()
	return lofu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lofu *LockOrderFulfillmentUpdate) Save(ctx context.Context) (int, error) {
	lofu.defaults()
	return withHooks(ctx, lofu.sqlSave, lofu.mutation, lofu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lofu *LockOrderFulfillmentUpdate) SaveX(ctx context.Context) int {
	affected, err := lofu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lofu *LockOrderFulfillmentUpdate) Exec(ctx context.Context) error {
	_, err := lofu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lofu *LockOrderFulfillmentUpdate) ExecX(ctx context.Context) {
	if err := lofu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lofu *LockOrderFulfillmentUpdate) defaults() {
	if _, ok := lofu.mutation.UpdatedAt(); !ok {
		v := lockorderfulfillment.UpdateDefaultUpdatedAt()
		lofu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lofu *LockOrderFulfillmentUpdate) check() error {
	if _, ok := lofu.mutation.OrderID(); lofu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LockOrderFulfillment.order"`)
	}
	return nil
}

func (lofu *LockOrderFulfillmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lofu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lockorderfulfillment.Table, lockorderfulfillment.Columns, sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeInt))
	if ps := lofu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lofu.mutation.UpdatedAt(); ok {
		_spec.SetField(lockorderfulfillment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lofu.mutation.TxID(); ok {
		_spec.SetField(lockorderfulfillment.FieldTxID, field.TypeString, value)
	}
	if value, ok := lofu.mutation.TxReceiptImage(); ok {
		_spec.SetField(lockorderfulfillment.FieldTxReceiptImage, field.TypeString, value)
	}
	if value, ok := lofu.mutation.Confirmations(); ok {
		_spec.SetField(lockorderfulfillment.FieldConfirmations, field.TypeInt, value)
	}
	if value, ok := lofu.mutation.AddedConfirmations(); ok {
		_spec.AddField(lockorderfulfillment.FieldConfirmations, field.TypeInt, value)
	}
	if lofu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lockorderfulfillment.OrderTable,
			Columns: []string{lockorderfulfillment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lofu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lockorderfulfillment.OrderTable,
			Columns: []string{lockorderfulfillment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lofu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lockorderfulfillment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lofu.mutation.done = true
	return n, nil
}

// LockOrderFulfillmentUpdateOne is the builder for updating a single LockOrderFulfillment entity.
type LockOrderFulfillmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LockOrderFulfillmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lofuo *LockOrderFulfillmentUpdateOne) SetUpdatedAt(t time.Time) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.SetUpdatedAt(t)
	return lofuo
}

// SetTxID sets the "tx_id" field.
func (lofuo *LockOrderFulfillmentUpdateOne) SetTxID(s string) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.SetTxID(s)
	return lofuo
}

// SetTxReceiptImage sets the "tx_receipt_image" field.
func (lofuo *LockOrderFulfillmentUpdateOne) SetTxReceiptImage(s string) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.SetTxReceiptImage(s)
	return lofuo
}

// SetConfirmations sets the "confirmations" field.
func (lofuo *LockOrderFulfillmentUpdateOne) SetConfirmations(i int) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.ResetConfirmations()
	lofuo.mutation.SetConfirmations(i)
	return lofuo
}

// SetNillableConfirmations sets the "confirmations" field if the given value is not nil.
func (lofuo *LockOrderFulfillmentUpdateOne) SetNillableConfirmations(i *int) *LockOrderFulfillmentUpdateOne {
	if i != nil {
		lofuo.SetConfirmations(*i)
	}
	return lofuo
}

// AddConfirmations adds i to the "confirmations" field.
func (lofuo *LockOrderFulfillmentUpdateOne) AddConfirmations(i int) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.AddConfirmations(i)
	return lofuo
}

// SetOrderID sets the "order" edge to the LockPaymentOrder entity by ID.
func (lofuo *LockOrderFulfillmentUpdateOne) SetOrderID(id uuid.UUID) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.SetOrderID(id)
	return lofuo
}

// SetOrder sets the "order" edge to the LockPaymentOrder entity.
func (lofuo *LockOrderFulfillmentUpdateOne) SetOrder(l *LockPaymentOrder) *LockOrderFulfillmentUpdateOne {
	return lofuo.SetOrderID(l.ID)
}

// Mutation returns the LockOrderFulfillmentMutation object of the builder.
func (lofuo *LockOrderFulfillmentUpdateOne) Mutation() *LockOrderFulfillmentMutation {
	return lofuo.mutation
}

// ClearOrder clears the "order" edge to the LockPaymentOrder entity.
func (lofuo *LockOrderFulfillmentUpdateOne) ClearOrder() *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.ClearOrder()
	return lofuo
}

// Where appends a list predicates to the LockOrderFulfillmentUpdate builder.
func (lofuo *LockOrderFulfillmentUpdateOne) Where(ps ...predicate.LockOrderFulfillment) *LockOrderFulfillmentUpdateOne {
	lofuo.mutation.Where(ps...)
	return lofuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lofuo *LockOrderFulfillmentUpdateOne) Select(field string, fields ...string) *LockOrderFulfillmentUpdateOne {
	lofuo.fields = append([]string{field}, fields...)
	return lofuo
}

// Save executes the query and returns the updated LockOrderFulfillment entity.
func (lofuo *LockOrderFulfillmentUpdateOne) Save(ctx context.Context) (*LockOrderFulfillment, error) {
	lofuo.defaults()
	return withHooks(ctx, lofuo.sqlSave, lofuo.mutation, lofuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lofuo *LockOrderFulfillmentUpdateOne) SaveX(ctx context.Context) *LockOrderFulfillment {
	node, err := lofuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lofuo *LockOrderFulfillmentUpdateOne) Exec(ctx context.Context) error {
	_, err := lofuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lofuo *LockOrderFulfillmentUpdateOne) ExecX(ctx context.Context) {
	if err := lofuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lofuo *LockOrderFulfillmentUpdateOne) defaults() {
	if _, ok := lofuo.mutation.UpdatedAt(); !ok {
		v := lockorderfulfillment.UpdateDefaultUpdatedAt()
		lofuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lofuo *LockOrderFulfillmentUpdateOne) check() error {
	if _, ok := lofuo.mutation.OrderID(); lofuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LockOrderFulfillment.order"`)
	}
	return nil
}

func (lofuo *LockOrderFulfillmentUpdateOne) sqlSave(ctx context.Context) (_node *LockOrderFulfillment, err error) {
	if err := lofuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lockorderfulfillment.Table, lockorderfulfillment.Columns, sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeInt))
	id, ok := lofuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LockOrderFulfillment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lofuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lockorderfulfillment.FieldID)
		for _, f := range fields {
			if !lockorderfulfillment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lockorderfulfillment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lofuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lofuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lockorderfulfillment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lofuo.mutation.TxID(); ok {
		_spec.SetField(lockorderfulfillment.FieldTxID, field.TypeString, value)
	}
	if value, ok := lofuo.mutation.TxReceiptImage(); ok {
		_spec.SetField(lockorderfulfillment.FieldTxReceiptImage, field.TypeString, value)
	}
	if value, ok := lofuo.mutation.Confirmations(); ok {
		_spec.SetField(lockorderfulfillment.FieldConfirmations, field.TypeInt, value)
	}
	if value, ok := lofuo.mutation.AddedConfirmations(); ok {
		_spec.AddField(lockorderfulfillment.FieldConfirmations, field.TypeInt, value)
	}
	if lofuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lockorderfulfillment.OrderTable,
			Columns: []string{lockorderfulfillment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lofuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lockorderfulfillment.OrderTable,
			Columns: []string{lockorderfulfillment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockpaymentorder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LockOrderFulfillment{config: lofuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lofuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lockorderfulfillment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lofuo.mutation.done = true
	return _node, nil
}
