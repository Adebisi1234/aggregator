// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/lockorderfulfillment"
	"github.com/paycrest/paycrest-protocol/ent/user"
	"github.com/paycrest/paycrest-protocol/ent/validatorprofile"
)

// ValidatorProfileCreate is the builder for creating a ValidatorProfile entity.
type ValidatorProfileCreate struct {
	config
	mutation *ValidatorProfileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vpc *ValidatorProfileCreate) SetCreatedAt(t time.Time) *ValidatorProfileCreate {
	vpc.mutation.SetCreatedAt(t)
	return vpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vpc *ValidatorProfileCreate) SetNillableCreatedAt(t *time.Time) *ValidatorProfileCreate {
	if t != nil {
		vpc.SetCreatedAt(*t)
	}
	return vpc
}

// SetUpdatedAt sets the "updated_at" field.
func (vpc *ValidatorProfileCreate) SetUpdatedAt(t time.Time) *ValidatorProfileCreate {
	vpc.mutation.SetUpdatedAt(t)
	return vpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vpc *ValidatorProfileCreate) SetNillableUpdatedAt(t *time.Time) *ValidatorProfileCreate {
	if t != nil {
		vpc.SetUpdatedAt(*t)
	}
	return vpc
}

// SetWalletAddress sets the "wallet_address" field.
func (vpc *ValidatorProfileCreate) SetWalletAddress(s string) *ValidatorProfileCreate {
	vpc.mutation.SetWalletAddress(s)
	return vpc
}

// SetID sets the "id" field.
func (vpc *ValidatorProfileCreate) SetID(u uuid.UUID) *ValidatorProfileCreate {
	vpc.mutation.SetID(u)
	return vpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vpc *ValidatorProfileCreate) SetNillableID(u *uuid.UUID) *ValidatorProfileCreate {
	if u != nil {
		vpc.SetID(*u)
	}
	return vpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vpc *ValidatorProfileCreate) SetUserID(id uuid.UUID) *ValidatorProfileCreate {
	vpc.mutation.SetUserID(id)
	return vpc
}

// SetUser sets the "user" edge to the User entity.
func (vpc *ValidatorProfileCreate) SetUser(u *User) *ValidatorProfileCreate {
	return vpc.SetUserID(u.ID)
}

// AddValidatedFulfillmentIDs adds the "validated_fulfillments" edge to the LockOrderFulfillment entity by IDs.
func (vpc *ValidatorProfileCreate) AddValidatedFulfillmentIDs(ids ...uuid.UUID) *ValidatorProfileCreate {
	vpc.mutation.AddValidatedFulfillmentIDs(ids...)
	return vpc
}

// AddValidatedFulfillments adds the "validated_fulfillments" edges to the LockOrderFulfillment entity.
func (vpc *ValidatorProfileCreate) AddValidatedFulfillments(l ...*LockOrderFulfillment) *ValidatorProfileCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vpc.AddValidatedFulfillmentIDs(ids...)
}

// Mutation returns the ValidatorProfileMutation object of the builder.
func (vpc *ValidatorProfileCreate) Mutation() *ValidatorProfileMutation {
	return vpc.mutation
}

// Save creates the ValidatorProfile in the database.
func (vpc *ValidatorProfileCreate) Save(ctx context.Context) (*ValidatorProfile, error) {
	vpc.defaults()
	return withHooks(ctx, vpc.sqlSave, vpc.mutation, vpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vpc *ValidatorProfileCreate) SaveX(ctx context.Context) *ValidatorProfile {
	v, err := vpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpc *ValidatorProfileCreate) Exec(ctx context.Context) error {
	_, err := vpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpc *ValidatorProfileCreate) ExecX(ctx context.Context) {
	if err := vpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpc *ValidatorProfileCreate) defaults() {
	if _, ok := vpc.mutation.CreatedAt(); !ok {
		v := validatorprofile.DefaultCreatedAt()
		vpc.mutation.SetCreatedAt(v)
	}
	if _, ok := vpc.mutation.UpdatedAt(); !ok {
		v := validatorprofile.DefaultUpdatedAt()
		vpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vpc.mutation.ID(); !ok {
		v := validatorprofile.DefaultID()
		vpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpc *ValidatorProfileCreate) check() error {
	if _, ok := vpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ValidatorProfile.created_at"`)}
	}
	if _, ok := vpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ValidatorProfile.updated_at"`)}
	}
	if _, ok := vpc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "ValidatorProfile.wallet_address"`)}
	}
	if v, ok := vpc.mutation.WalletAddress(); ok {
		if err := validatorprofile.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "ValidatorProfile.wallet_address": %w`, err)}
		}
	}
	if _, ok := vpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ValidatorProfile.user"`)}
	}
	return nil
}

func (vpc *ValidatorProfileCreate) sqlSave(ctx context.Context) (*ValidatorProfile, error) {
	if err := vpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vpc.mutation.id = &_node.ID
	vpc.mutation.done = true
	return _node, nil
}

func (vpc *ValidatorProfileCreate) createSpec() (*ValidatorProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &ValidatorProfile{config: vpc.config}
		_spec = sqlgraph.NewCreateSpec(validatorprofile.Table, sqlgraph.NewFieldSpec(validatorprofile.FieldID, field.TypeUUID))
	)
	if id, ok := vpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vpc.mutation.CreatedAt(); ok {
		_spec.SetField(validatorprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vpc.mutation.UpdatedAt(); ok {
		_spec.SetField(validatorprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vpc.mutation.WalletAddress(); ok {
		_spec.SetField(validatorprofile.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if nodes := vpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   validatorprofile.UserTable,
			Columns: []string{validatorprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_validator_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpc.mutation.ValidatedFulfillmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ValidatorProfileCreateBulk is the builder for creating many ValidatorProfile entities in bulk.
type ValidatorProfileCreateBulk struct {
	config
	builders []*ValidatorProfileCreate
}

// Save creates the ValidatorProfile entities in the database.
func (vpcb *ValidatorProfileCreateBulk) Save(ctx context.Context) ([]*ValidatorProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vpcb.builders))
	nodes := make([]*ValidatorProfile, len(vpcb.builders))
	mutators := make([]Mutator, len(vpcb.builders))
	for i := range vpcb.builders {
		func(i int, root context.Context) {
			builder := vpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ValidatorProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vpcb *ValidatorProfileCreateBulk) SaveX(ctx context.Context) []*ValidatorProfile {
	v, err := vpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpcb *ValidatorProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := vpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpcb *ValidatorProfileCreateBulk) ExecX(ctx context.Context) {
	if err := vpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
