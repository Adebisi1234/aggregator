// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/paycrest/paycrest-protocol/ent/apikey"
	"github.com/paycrest/paycrest-protocol/ent/lockorderfulfillment"
	"github.com/paycrest/paycrest-protocol/ent/predicate"
	"github.com/paycrest/paycrest-protocol/ent/validatorprofile"
)

// ValidatorProfileUpdate is the builder for updating ValidatorProfile entities.
type ValidatorProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ValidatorProfileMutation
}

// Where appends a list predicates to the ValidatorProfileUpdate builder.
func (vpu *ValidatorProfileUpdate) Where(ps ...predicate.ValidatorProfile) *ValidatorProfileUpdate {
	vpu.mutation.Where(ps...)
	return vpu
}

// SetWalletAddress sets the "wallet_address" field.
func (vpu *ValidatorProfileUpdate) SetWalletAddress(s string) *ValidatorProfileUpdate {
	vpu.mutation.SetWalletAddress(s)
	return vpu
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (vpu *ValidatorProfileUpdate) SetNillableWalletAddress(s *string) *ValidatorProfileUpdate {
	if s != nil {
		vpu.SetWalletAddress(*s)
	}
	return vpu
}

// ClearWalletAddress clears the value of the "wallet_address" field.
func (vpu *ValidatorProfileUpdate) ClearWalletAddress() *ValidatorProfileUpdate {
	vpu.mutation.ClearWalletAddress()
	return vpu
}

// SetHostIdentifier sets the "host_identifier" field.
func (vpu *ValidatorProfileUpdate) SetHostIdentifier(s string) *ValidatorProfileUpdate {
	vpu.mutation.SetHostIdentifier(s)
	return vpu
}

// SetNillableHostIdentifier sets the "host_identifier" field if the given value is not nil.
func (vpu *ValidatorProfileUpdate) SetNillableHostIdentifier(s *string) *ValidatorProfileUpdate {
	if s != nil {
		vpu.SetHostIdentifier(*s)
	}
	return vpu
}

// ClearHostIdentifier clears the value of the "host_identifier" field.
func (vpu *ValidatorProfileUpdate) ClearHostIdentifier() *ValidatorProfileUpdate {
	vpu.mutation.ClearHostIdentifier()
	return vpu
}

// SetUpdatedAt sets the "updated_at" field.
func (vpu *ValidatorProfileUpdate) SetUpdatedAt(t time.Time) *ValidatorProfileUpdate {
	vpu.mutation.SetUpdatedAt(t)
	return vpu
}

// AddValidatedFulfillmentIDs adds the "validated_fulfillments" edge to the LockOrderFulfillment entity by IDs.
func (vpu *ValidatorProfileUpdate) AddValidatedFulfillmentIDs(ids ...uuid.UUID) *ValidatorProfileUpdate {
	vpu.mutation.AddValidatedFulfillmentIDs(ids...)
	return vpu
}

// AddValidatedFulfillments adds the "validated_fulfillments" edges to the LockOrderFulfillment entity.
func (vpu *ValidatorProfileUpdate) AddValidatedFulfillments(l ...*LockOrderFulfillment) *ValidatorProfileUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vpu.AddValidatedFulfillmentIDs(ids...)
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (vpu *ValidatorProfileUpdate) SetAPIKeyID(id uuid.UUID) *ValidatorProfileUpdate {
	vpu.mutation.SetAPIKeyID(id)
	return vpu
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (vpu *ValidatorProfileUpdate) SetNillableAPIKeyID(id *uuid.UUID) *ValidatorProfileUpdate {
	if id != nil {
		vpu = vpu.SetAPIKeyID(*id)
	}
	return vpu
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (vpu *ValidatorProfileUpdate) SetAPIKey(a *APIKey) *ValidatorProfileUpdate {
	return vpu.SetAPIKeyID(a.ID)
}

// Mutation returns the ValidatorProfileMutation object of the builder.
func (vpu *ValidatorProfileUpdate) Mutation() *ValidatorProfileMutation {
	return vpu.mutation
}

// ClearValidatedFulfillments clears all "validated_fulfillments" edges to the LockOrderFulfillment entity.
func (vpu *ValidatorProfileUpdate) ClearValidatedFulfillments() *ValidatorProfileUpdate {
	vpu.mutation.ClearValidatedFulfillments()
	return vpu
}

// RemoveValidatedFulfillmentIDs removes the "validated_fulfillments" edge to LockOrderFulfillment entities by IDs.
func (vpu *ValidatorProfileUpdate) RemoveValidatedFulfillmentIDs(ids ...uuid.UUID) *ValidatorProfileUpdate {
	vpu.mutation.RemoveValidatedFulfillmentIDs(ids...)
	return vpu
}

// RemoveValidatedFulfillments removes "validated_fulfillments" edges to LockOrderFulfillment entities.
func (vpu *ValidatorProfileUpdate) RemoveValidatedFulfillments(l ...*LockOrderFulfillment) *ValidatorProfileUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vpu.RemoveValidatedFulfillmentIDs(ids...)
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (vpu *ValidatorProfileUpdate) ClearAPIKey() *ValidatorProfileUpdate {
	vpu.mutation.ClearAPIKey()
	return vpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpu *ValidatorProfileUpdate) Save(ctx context.Context) (int, error) {
	vpu.defaults()
	return withHooks(ctx, vpu.sqlSave, vpu.mutation, vpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpu *ValidatorProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := vpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpu *ValidatorProfileUpdate) Exec(ctx context.Context) error {
	_, err := vpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpu *ValidatorProfileUpdate) ExecX(ctx context.Context) {
	if err := vpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpu *ValidatorProfileUpdate) defaults() {
	if _, ok := vpu.mutation.UpdatedAt(); !ok {
		v := validatorprofile.UpdateDefaultUpdatedAt()
		vpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpu *ValidatorProfileUpdate) check() error {
	if _, ok := vpu.mutation.UserID(); vpu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ValidatorProfile.user"`)
	}
	return nil
}

func (vpu *ValidatorProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(validatorprofile.Table, validatorprofile.Columns, sqlgraph.NewFieldSpec(validatorprofile.FieldID, field.TypeUUID))
	if ps := vpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpu.mutation.WalletAddress(); ok {
		_spec.SetField(validatorprofile.FieldWalletAddress, field.TypeString, value)
	}
	if vpu.mutation.WalletAddressCleared() {
		_spec.ClearField(validatorprofile.FieldWalletAddress, field.TypeString)
	}
	if value, ok := vpu.mutation.HostIdentifier(); ok {
		_spec.SetField(validatorprofile.FieldHostIdentifier, field.TypeString, value)
	}
	if vpu.mutation.HostIdentifierCleared() {
		_spec.ClearField(validatorprofile.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := vpu.mutation.UpdatedAt(); ok {
		_spec.SetField(validatorprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpu.mutation.ValidatedFulfillmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedValidatedFulfillmentsIDs(); len(nodes) > 0 && !vpu.mutation.ValidatedFulfillmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.ValidatedFulfillmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   validatorprofile.APIKeyTable,
			Columns: []string{validatorprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   validatorprofile.APIKeyTable,
			Columns: []string{validatorprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validatorprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpu.mutation.done = true
	return n, nil
}

// ValidatorProfileUpdateOne is the builder for updating a single ValidatorProfile entity.
type ValidatorProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ValidatorProfileMutation
}

// SetWalletAddress sets the "wallet_address" field.
func (vpuo *ValidatorProfileUpdateOne) SetWalletAddress(s string) *ValidatorProfileUpdateOne {
	vpuo.mutation.SetWalletAddress(s)
	return vpuo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (vpuo *ValidatorProfileUpdateOne) SetNillableWalletAddress(s *string) *ValidatorProfileUpdateOne {
	if s != nil {
		vpuo.SetWalletAddress(*s)
	}
	return vpuo
}

// ClearWalletAddress clears the value of the "wallet_address" field.
func (vpuo *ValidatorProfileUpdateOne) ClearWalletAddress() *ValidatorProfileUpdateOne {
	vpuo.mutation.ClearWalletAddress()
	return vpuo
}

// SetHostIdentifier sets the "host_identifier" field.
func (vpuo *ValidatorProfileUpdateOne) SetHostIdentifier(s string) *ValidatorProfileUpdateOne {
	vpuo.mutation.SetHostIdentifier(s)
	return vpuo
}

// SetNillableHostIdentifier sets the "host_identifier" field if the given value is not nil.
func (vpuo *ValidatorProfileUpdateOne) SetNillableHostIdentifier(s *string) *ValidatorProfileUpdateOne {
	if s != nil {
		vpuo.SetHostIdentifier(*s)
	}
	return vpuo
}

// ClearHostIdentifier clears the value of the "host_identifier" field.
func (vpuo *ValidatorProfileUpdateOne) ClearHostIdentifier() *ValidatorProfileUpdateOne {
	vpuo.mutation.ClearHostIdentifier()
	return vpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vpuo *ValidatorProfileUpdateOne) SetUpdatedAt(t time.Time) *ValidatorProfileUpdateOne {
	vpuo.mutation.SetUpdatedAt(t)
	return vpuo
}

// AddValidatedFulfillmentIDs adds the "validated_fulfillments" edge to the LockOrderFulfillment entity by IDs.
func (vpuo *ValidatorProfileUpdateOne) AddValidatedFulfillmentIDs(ids ...uuid.UUID) *ValidatorProfileUpdateOne {
	vpuo.mutation.AddValidatedFulfillmentIDs(ids...)
	return vpuo
}

// AddValidatedFulfillments adds the "validated_fulfillments" edges to the LockOrderFulfillment entity.
func (vpuo *ValidatorProfileUpdateOne) AddValidatedFulfillments(l ...*LockOrderFulfillment) *ValidatorProfileUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vpuo.AddValidatedFulfillmentIDs(ids...)
}

// SetAPIKeyID sets the "api_key" edge to the APIKey entity by ID.
func (vpuo *ValidatorProfileUpdateOne) SetAPIKeyID(id uuid.UUID) *ValidatorProfileUpdateOne {
	vpuo.mutation.SetAPIKeyID(id)
	return vpuo
}

// SetNillableAPIKeyID sets the "api_key" edge to the APIKey entity by ID if the given value is not nil.
func (vpuo *ValidatorProfileUpdateOne) SetNillableAPIKeyID(id *uuid.UUID) *ValidatorProfileUpdateOne {
	if id != nil {
		vpuo = vpuo.SetAPIKeyID(*id)
	}
	return vpuo
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (vpuo *ValidatorProfileUpdateOne) SetAPIKey(a *APIKey) *ValidatorProfileUpdateOne {
	return vpuo.SetAPIKeyID(a.ID)
}

// Mutation returns the ValidatorProfileMutation object of the builder.
func (vpuo *ValidatorProfileUpdateOne) Mutation() *ValidatorProfileMutation {
	return vpuo.mutation
}

// ClearValidatedFulfillments clears all "validated_fulfillments" edges to the LockOrderFulfillment entity.
func (vpuo *ValidatorProfileUpdateOne) ClearValidatedFulfillments() *ValidatorProfileUpdateOne {
	vpuo.mutation.ClearValidatedFulfillments()
	return vpuo
}

// RemoveValidatedFulfillmentIDs removes the "validated_fulfillments" edge to LockOrderFulfillment entities by IDs.
func (vpuo *ValidatorProfileUpdateOne) RemoveValidatedFulfillmentIDs(ids ...uuid.UUID) *ValidatorProfileUpdateOne {
	vpuo.mutation.RemoveValidatedFulfillmentIDs(ids...)
	return vpuo
}

// RemoveValidatedFulfillments removes "validated_fulfillments" edges to LockOrderFulfillment entities.
func (vpuo *ValidatorProfileUpdateOne) RemoveValidatedFulfillments(l ...*LockOrderFulfillment) *ValidatorProfileUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vpuo.RemoveValidatedFulfillmentIDs(ids...)
}

// ClearAPIKey clears the "api_key" edge to the APIKey entity.
func (vpuo *ValidatorProfileUpdateOne) ClearAPIKey() *ValidatorProfileUpdateOne {
	vpuo.mutation.ClearAPIKey()
	return vpuo
}

// Where appends a list predicates to the ValidatorProfileUpdate builder.
func (vpuo *ValidatorProfileUpdateOne) Where(ps ...predicate.ValidatorProfile) *ValidatorProfileUpdateOne {
	vpuo.mutation.Where(ps...)
	return vpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpuo *ValidatorProfileUpdateOne) Select(field string, fields ...string) *ValidatorProfileUpdateOne {
	vpuo.fields = append([]string{field}, fields...)
	return vpuo
}

// Save executes the query and returns the updated ValidatorProfile entity.
func (vpuo *ValidatorProfileUpdateOne) Save(ctx context.Context) (*ValidatorProfile, error) {
	vpuo.defaults()
	return withHooks(ctx, vpuo.sqlSave, vpuo.mutation, vpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpuo *ValidatorProfileUpdateOne) SaveX(ctx context.Context) *ValidatorProfile {
	node, err := vpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpuo *ValidatorProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := vpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpuo *ValidatorProfileUpdateOne) ExecX(ctx context.Context) {
	if err := vpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpuo *ValidatorProfileUpdateOne) defaults() {
	if _, ok := vpuo.mutation.UpdatedAt(); !ok {
		v := validatorprofile.UpdateDefaultUpdatedAt()
		vpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpuo *ValidatorProfileUpdateOne) check() error {
	if _, ok := vpuo.mutation.UserID(); vpuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ValidatorProfile.user"`)
	}
	return nil
}

func (vpuo *ValidatorProfileUpdateOne) sqlSave(ctx context.Context) (_node *ValidatorProfile, err error) {
	if err := vpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(validatorprofile.Table, validatorprofile.Columns, sqlgraph.NewFieldSpec(validatorprofile.FieldID, field.TypeUUID))
	id, ok := vpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ValidatorProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, validatorprofile.FieldID)
		for _, f := range fields {
			if !validatorprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != validatorprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpuo.mutation.WalletAddress(); ok {
		_spec.SetField(validatorprofile.FieldWalletAddress, field.TypeString, value)
	}
	if vpuo.mutation.WalletAddressCleared() {
		_spec.ClearField(validatorprofile.FieldWalletAddress, field.TypeString)
	}
	if value, ok := vpuo.mutation.HostIdentifier(); ok {
		_spec.SetField(validatorprofile.FieldHostIdentifier, field.TypeString, value)
	}
	if vpuo.mutation.HostIdentifierCleared() {
		_spec.ClearField(validatorprofile.FieldHostIdentifier, field.TypeString)
	}
	if value, ok := vpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(validatorprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpuo.mutation.ValidatedFulfillmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedValidatedFulfillmentsIDs(); len(nodes) > 0 && !vpuo.mutation.ValidatedFulfillmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.ValidatedFulfillmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validatorprofile.ValidatedFulfillmentsTable,
			Columns: validatorprofile.ValidatedFulfillmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lockorderfulfillment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.APIKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   validatorprofile.APIKeyTable,
			Columns: []string{validatorprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   validatorprofile.APIKeyTable,
			Columns: []string{validatorprofile.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ValidatorProfile{config: vpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validatorprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpuo.mutation.done = true
	return _node, nil
}
